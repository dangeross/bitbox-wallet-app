package breez_sdk

/*


// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

#include <stdbool.h>
#include <stdint.h>

// The following structs are used to implement the lowest level
// of the FFI, and thus useful to multiple uniffied crates.
// We ensure they are declared exactly once, with a header guard, UNIFFI_SHARED_H.
#ifdef UNIFFI_SHARED_H
	// We also try to prevent mixing versions of shared uniffi header structs.
	// If you add anything to the #else block, you must increment the version suffix in UNIFFI_SHARED_HEADER_V4
	#ifndef UNIFFI_SHARED_HEADER_V4
		#error Combining helper code from multiple versions of uniffi is not supported
	#endif // ndef UNIFFI_SHARED_HEADER_V4
#else
#define UNIFFI_SHARED_H
#define UNIFFI_SHARED_HEADER_V4
// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️

typedef struct RustBuffer {
	int32_t capacity;
	int32_t len;
	uint8_t *data;
} RustBuffer;

typedef int32_t (*ForeignCallback)(uint64_t, int32_t, RustBuffer, RustBuffer *);

typedef struct ForeignBytes {
	int32_t len;
	const uint8_t *data;
} ForeignBytes;

// Error definitions
typedef struct RustCallStatus {
	int8_t code;
	RustBuffer errorBuf;
} RustCallStatus;

// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️
#endif // def UNIFFI_SHARED_H

void ffi_breez_sdk_d634_BlockingBreezServices_object_free(
	void* ptr,
	RustCallStatus* out_status
);

void breez_sdk_d634_BlockingBreezServices_disconnect(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_send_payment(
	void* ptr,
	RustBuffer bolt11,
	RustBuffer amount_sats,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_send_spontaneous_payment(
	void* ptr,
	RustBuffer node_id,
	uint64_t amount_sats,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_receive_payment(
	void* ptr,
	RustBuffer req_data,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_pay_lnurl(
	void* ptr,
	RustBuffer req_data,
	uint64_t amount_sats,
	RustBuffer comment,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_withdraw_lnurl(
	void* ptr,
	RustBuffer req_data,
	uint64_t amount_sats,
	RustBuffer description,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_lnurl_auth(
	void* ptr,
	RustBuffer req_data,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_node_info(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_sign_message(
	void* ptr,
	RustBuffer request,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_check_message(
	void* ptr,
	RustBuffer request,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_backup_status(
	void* ptr,
	RustCallStatus* out_status
);

void breez_sdk_d634_BlockingBreezServices_backup(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_payment_by_hash(
	void* ptr,
	RustBuffer hash,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_list_payments(
	void* ptr,
	RustBuffer filter,
	RustBuffer from_timestamp,
	RustBuffer to_timestamp,
	RustCallStatus* out_status
);

void breez_sdk_d634_BlockingBreezServices_sweep(
	void* ptr,
	RustBuffer to_address,
	uint64_t fee_rate_sats_per_vbyte,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_fetch_fiat_rates(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_list_fiat_currencies(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_list_lsps(
	void* ptr,
	RustCallStatus* out_status
);

void breez_sdk_d634_BlockingBreezServices_connect_lsp(
	void* ptr,
	RustBuffer lsp_id,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_fetch_lsp_info(
	void* ptr,
	RustBuffer lsp_id,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_open_channel_fee(
	void* ptr,
	RustBuffer req,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_lsp_id(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_lsp_info(
	void* ptr,
	RustCallStatus* out_status
);

void breez_sdk_d634_BlockingBreezServices_close_lsp_channels(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_receive_onchain(
	void* ptr,
	RustBuffer req,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_in_progress_swap(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_list_refundables(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_refund(
	void* ptr,
	RustBuffer swap_address,
	RustBuffer to_address,
	uint32_t sat_per_vbyte,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_fetch_reverse_swap_fees(
	void* ptr,
	RustBuffer req,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_in_progress_reverse_swaps(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_send_onchain(
	void* ptr,
	uint64_t amount_sat,
	RustBuffer onchain_recipient_address,
	RustBuffer pair_hash,
	uint64_t sat_per_vbyte,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_execute_dev_command(
	void* ptr,
	RustBuffer command,
	RustCallStatus* out_status
);

void breez_sdk_d634_BlockingBreezServices_sync(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_recommended_fees(
	void* ptr,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_BlockingBreezServices_buy_bitcoin(
	void* ptr,
	RustBuffer req,
	RustCallStatus* out_status
);

void ffi_breez_sdk_d634_LogStream_init_callback(
	ForeignCallback callback_stub,
	RustCallStatus* out_status
);

void ffi_breez_sdk_d634_EventListener_init_callback(
	ForeignCallback callback_stub,
	RustCallStatus* out_status
);

void* breez_sdk_d634_connect(
	RustBuffer config,
	RustBuffer seed,
	uint64_t listener,
	RustCallStatus* out_status
);

void breez_sdk_d634_set_log_stream(
	uint64_t log_stream,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_parse_invoice(
	RustBuffer invoice,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_parse_input(
	RustBuffer s,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_mnemonic_to_seed(
	RustBuffer phrase,
	RustCallStatus* out_status
);

RustBuffer breez_sdk_d634_default_config(
	RustBuffer env_type,
	RustBuffer api_key,
	RustBuffer node_config,
	RustCallStatus* out_status
);

RustBuffer ffi_breez_sdk_d634_rustbuffer_alloc(
	int32_t size,
	RustCallStatus* out_status
);

RustBuffer ffi_breez_sdk_d634_rustbuffer_from_bytes(
	ForeignBytes bytes,
	RustCallStatus* out_status
);

void ffi_breez_sdk_d634_rustbuffer_free(
	RustBuffer buf,
	RustCallStatus* out_status
);

RustBuffer ffi_breez_sdk_d634_rustbuffer_reserve(
	RustBuffer buf,
	int32_t additional,
	RustCallStatus* out_status
);


int32_t breez_sdk_d634_cgo_LogStream(uint64_t, int32_t, RustBuffer, RustBuffer *);
int32_t breez_sdk_d634_cgo_EventListener(uint64_t, int32_t, RustBuffer, RustBuffer *);
*/
import "C"

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"io"
	"math"
	"runtime"
	"sync"
	"sync/atomic"
	"unsafe"
)

type rustBuffer struct {
	capacity int
	length   int
	data     unsafe.Pointer
	self     C.RustBuffer
}

func fromCRustBuffer(crbuf C.RustBuffer) rustBuffer {
	return rustBuffer{
		capacity: int(crbuf.capacity),
		length:   int(crbuf.len),
		data:     unsafe.Pointer(crbuf.data),
		self:     crbuf,
	}
}

// asByteBuffer reads the full rust buffer and then converts read bytes to a new reader which makes
// it quite inefficient
// TODO: Return an implementation which reads only when needed
func (rb rustBuffer) asReader() *bytes.Reader {
	b := C.GoBytes(rb.data, C.int(rb.length))
	return bytes.NewReader(b)
}

func (rb rustBuffer) asCRustBuffer() C.RustBuffer {
	return C.RustBuffer{
		capacity: C.int(rb.capacity),
		len:      C.int(rb.length),
		data:     (*C.uchar)(unsafe.Pointer(rb.data)),
	}
}

func stringToCRustBuffer(str string) C.RustBuffer {
	b := []byte(str)
	cs := C.CString(str)
	return C.RustBuffer{
		capacity: C.int(len(b)),
		len:      C.int(len(b)),
		data:     (*C.uchar)(unsafe.Pointer(cs)),
	}
}

func (rb rustBuffer) free() {
	rustCall(func(status *C.RustCallStatus) bool {
		C.ffi_breez_sdk_d634_rustbuffer_free(rb.self, status)
		return false
	})
}

type bufLifter[GoType any] interface {
	lift(value C.RustBuffer) (GoType, error)
}

type bufLowerer[GoType any] interface {
	lower(value GoType) C.RustBuffer
}

type ffiConverter[GoType any, FfiType any] interface {
	lift(value FfiType) (GoType, error)
	lower(value GoType) FfiType
}

type bufReader[GoType any] interface {
	read(reader io.Reader) (GoType, error)
}

type bufWriter[GoType any] interface {
	write(writer io.Writer, value GoType) error
}

type ffiRustBufConverter[GoType any, FfiType any] interface {
	ffiConverter[GoType, FfiType]
	bufReader[GoType]
}

func lowerIntoRustBuffer[GoType any](bufWriter bufWriter[GoType], value GoType) (C.RustBuffer, error) {
	// This might be not the most efficient way but it does not require knowing allocation size
	// beforehand
	var buffer bytes.Buffer
	bufWriter.write(&buffer, value)

	bytes, err := io.ReadAll(&buffer)
	if err != nil {
		return stringToCRustBuffer(""), fmt.Errorf("reading written data: %w", err)
	}

	return stringToCRustBuffer(string(bytes)), nil
}

func liftFromRustBuffer[GoType any](bufReader bufReader[GoType], rbuf rustBuffer) (GoType, error) {
	defer rbuf.free()
	var _uniffiDefaultValue GoType
	reader := rbuf.asReader()
	item, err := bufReader.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	if reader.Len() > 0 {
		// TODO: Remove this
		leftover, _ := io.ReadAll(reader)
		return _uniffiDefaultValue, fmt.Errorf("junk remaining in buffer after lifting: %s", string(leftover))
	}
	return item, nil
}

func rustCallWithError[U any](converter bufLifter[error], callback func(*C.RustCallStatus) U) (U, error) {
	var status C.RustCallStatus
	returnValue := callback(&status)
	switch status.code {
	case 0:
		return returnValue, nil
	case 1:
		liftedErr, err := converter.lift(status.errorBuf)
		if err != nil {
			return returnValue, fmt.Errorf("lifting Error: %s", err)
		}
		return returnValue, liftedErr
	case 2:
		// when the rust code sees a panic, it tries to construct a rustbuffer
		// with the message.  but if that code panics, then it just sends back
		// an empty buffer.
		if status.errorBuf.len > 0 {
			liftedErr, err := FfiConverterstringINSTANCE.lift(status.errorBuf)
			if err != nil {
				return returnValue, fmt.Errorf("panic Error: %s", err)
			}
			return returnValue, fmt.Errorf("panic: %s", liftedErr)
		} else {
			return returnValue, fmt.Errorf("rust panicked while handling Rust panic")
		}
	default:
		return returnValue, fmt.Errorf("unknown status code: %d", status.code)
	}
}

func rustCall[U any](callback func(*C.RustCallStatus) U) U {
	returnValue, _ := rustCallWithError(nil, callback)
	//	if err != nil {
	//		panic(err)
	//	}
	return returnValue
}

func writeInt8(writer io.Writer, value int8) error {
	return binary.Write(writer, binary.BigEndian, value)
}

func writeUint8(writer io.Writer, value uint8) error {
	return binary.Write(writer, binary.BigEndian, value)
}

func writeInt16(writer io.Writer, value int16) error {
	return binary.Write(writer, binary.BigEndian, value)
}

func writeUint16(writer io.Writer, value uint16) error {
	return binary.Write(writer, binary.BigEndian, value)
}

func writeInt32(writer io.Writer, value int32) error {
	return binary.Write(writer, binary.BigEndian, value)
}

func writeUint32(writer io.Writer, value uint32) error {
	return binary.Write(writer, binary.BigEndian, value)
}

func writeInt64(writer io.Writer, value int64) error {
	return binary.Write(writer, binary.BigEndian, value)
}

func writeUint64(writer io.Writer, value uint64) error {
	return binary.Write(writer, binary.BigEndian, value)
}

func writeFloat32(writer io.Writer, value float32) error {
	return binary.Write(writer, binary.BigEndian, value)
}

func writeFloat64(writer io.Writer, value float64) error {
	return binary.Write(writer, binary.BigEndian, value)
}

func readInt8(reader io.Reader) (int8, error) {
	var result int8
	if err := binary.Read(reader, binary.BigEndian, &result); err != nil {
		return result, err
	}
	return result, nil
}

func readUint8(reader io.Reader) (uint8, error) {
	var result uint8
	if err := binary.Read(reader, binary.BigEndian, &result); err != nil {
		return result, err
	}
	return result, nil
}

func readInt16(reader io.Reader) (int16, error) {
	var result int16
	if err := binary.Read(reader, binary.BigEndian, &result); err != nil {
		return result, err
	}
	return result, nil
}

func readUint16(reader io.Reader) (uint16, error) {
	var result uint16
	if err := binary.Read(reader, binary.BigEndian, &result); err != nil {
		return result, err
	}
	return result, nil
}

func readInt32(reader io.Reader) (int32, error) {
	var result int32
	if err := binary.Read(reader, binary.BigEndian, &result); err != nil {
		return result, err
	}
	return result, nil
}

func readUint32(reader io.Reader) (uint32, error) {
	var result uint32
	if err := binary.Read(reader, binary.BigEndian, &result); err != nil {
		return result, err
	}
	return result, nil
}

func readInt64(reader io.Reader) (int64, error) {
	var result int64
	if err := binary.Read(reader, binary.BigEndian, &result); err != nil {
		return result, err
	}
	return result, nil
}

func readUint64(reader io.Reader) (uint64, error) {
	var result uint64
	if err := binary.Read(reader, binary.BigEndian, &result); err != nil {
		return result, err
	}
	return result, nil
}

func readFloat32(reader io.Reader) (float32, error) {
	var result float32
	if err := binary.Read(reader, binary.BigEndian, &result); err != nil {
		return result, err
	}
	return result, nil
}

func readFloat64(reader io.Reader) (float64, error) {
	var result float64
	if err := binary.Read(reader, binary.BigEndian, &result); err != nil {
		return result, err
	}
	return result, nil
}

func init() {

	(&FfiConverterTypeEventListener{}).register()
	(&FfiConverterTypeLogStream{}).register()
}

type FfiConverteruint8 struct{}

var FfiConverteruint8INSTANCE = FfiConverteruint8{}

func (FfiConverteruint8) lower(value uint8) C.uint8_t {
	return C.uint8_t(value)
}

func (FfiConverteruint8) write(writer io.Writer, value uint8) error {
	return writeUint8(writer, value)
}

func (FfiConverteruint8) lift(value C.uint8_t) uint8 {
	return uint8(value)
}

func (FfiConverteruint8) read(reader io.Reader) (uint8, error) {
	return readUint8(reader)
}

type FfiDestroyeruint8 struct{}

func (FfiDestroyeruint8) destroy(_ uint8) {}

type FfiConverteruint16 struct{}

var FfiConverteruint16INSTANCE = FfiConverteruint16{}

func (FfiConverteruint16) lower(value uint16) C.uint16_t {
	return C.uint16_t(value)
}

func (FfiConverteruint16) write(writer io.Writer, value uint16) error {
	return writeUint16(writer, value)
}

func (FfiConverteruint16) lift(value C.uint16_t) uint16 {
	return uint16(value)
}

func (FfiConverteruint16) read(reader io.Reader) (uint16, error) {
	return readUint16(reader)
}

type FfiDestroyeruint16 struct{}

func (FfiDestroyeruint16) destroy(_ uint16) {}

type FfiConverteruint32 struct{}

var FfiConverteruint32INSTANCE = FfiConverteruint32{}

func (FfiConverteruint32) lower(value uint32) C.uint32_t {
	return C.uint32_t(value)
}

func (FfiConverteruint32) write(writer io.Writer, value uint32) error {
	return writeUint32(writer, value)
}

func (FfiConverteruint32) lift(value C.uint32_t) uint32 {
	return uint32(value)
}

func (FfiConverteruint32) read(reader io.Reader) (uint32, error) {
	return readUint32(reader)
}

type FfiDestroyeruint32 struct{}

func (FfiDestroyeruint32) destroy(_ uint32) {}

type FfiConverterint32 struct{}

var FfiConverterint32INSTANCE = FfiConverterint32{}

func (FfiConverterint32) lower(value int32) C.int32_t {
	return C.int32_t(value)
}

func (FfiConverterint32) write(writer io.Writer, value int32) error {
	return writeInt32(writer, value)
}

func (FfiConverterint32) lift(value C.int32_t) int32 {
	return int32(value)
}

func (FfiConverterint32) read(reader io.Reader) (int32, error) {
	return readInt32(reader)
}

type FfiDestroyerint32 struct{}

func (FfiDestroyerint32) destroy(_ int32) {}

type FfiConverteruint64 struct{}

var FfiConverteruint64INSTANCE = FfiConverteruint64{}

func (FfiConverteruint64) lower(value uint64) C.uint64_t {
	return C.uint64_t(value)
}

func (FfiConverteruint64) write(writer io.Writer, value uint64) error {
	return writeUint64(writer, value)
}

func (FfiConverteruint64) lift(value C.uint64_t) uint64 {
	return uint64(value)
}

func (FfiConverteruint64) read(reader io.Reader) (uint64, error) {
	return readUint64(reader)
}

type FfiDestroyeruint64 struct{}

func (FfiDestroyeruint64) destroy(_ uint64) {}

type FfiConverterint64 struct{}

var FfiConverterint64INSTANCE = FfiConverterint64{}

func (FfiConverterint64) lower(value int64) C.int64_t {
	return C.int64_t(value)
}

func (FfiConverterint64) write(writer io.Writer, value int64) error {
	return writeInt64(writer, value)
}

func (FfiConverterint64) lift(value C.int64_t) int64 {
	return int64(value)
}

func (FfiConverterint64) read(reader io.Reader) (int64, error) {
	return readInt64(reader)
}

type FfiDestroyerint64 struct{}

func (FfiDestroyerint64) destroy(_ int64) {}

type FfiConverterfloat64 struct{}

var FfiConverterfloat64INSTANCE = FfiConverterfloat64{}

func (FfiConverterfloat64) lower(value float64) C.double {
	return C.double(value)
}

func (FfiConverterfloat64) write(writer io.Writer, value float64) error {
	return writeFloat64(writer, value)
}

func (FfiConverterfloat64) lift(value C.double) float64 {
	return float64(value)
}

func (FfiConverterfloat64) read(reader io.Reader) (float64, error) {
	return readFloat64(reader)
}

type FfiDestroyerfloat64 struct{}

func (FfiDestroyerfloat64) destroy(_ float64) {}

type FfiConverterbool struct{}

var FfiConverterboolINSTANCE = FfiConverterbool{}

func (FfiConverterbool) lower(value bool) C.int8_t {
	if value {
		return C.int8_t(1)
	}
	return C.int8_t(0)
}

func (FfiConverterbool) write(writer io.Writer, value bool) error {
	if value {
		return writeInt8(writer, 1)
	} else {
		return writeInt8(writer, 0)
	}
}

func (FfiConverterbool) lift(value C.int8_t) bool {
	return value != 0
}

func (FfiConverterbool) read(reader io.Reader) (bool, error) {
	readValue, err := readInt8(reader)
	if err != nil {
		var _uniffiDefaultValue bool
		return _uniffiDefaultValue, err
	}
	return readValue != 0, nil
}

type FfiDestroyerbool struct{}

func (FfiDestroyerbool) destroy(_ bool) {}

type FfiConverterstring struct{}

var FfiConverterstringINSTANCE = FfiConverterstring{}

func (FfiConverterstring) lift(cRustBuf C.RustBuffer) (string, error) {
	reader := fromCRustBuffer(cRustBuf).asReader()
	b, err := io.ReadAll(reader)
	if err != nil {
		var _uniffiDefaultValue string
		return _uniffiDefaultValue, fmt.Errorf("reading reader: %w", err)
	}
	return string(b), nil
}

func (FfiConverterstring) read(reader io.Reader) (string, error) {
	var _uniffiDefaultValue string
	length, err := readInt32(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	buffer := make([]byte, length)
	read_length, err := reader.Read(buffer)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	if read_length != int(length) {
		return _uniffiDefaultValue, fmt.Errorf("bad read length when reading string, expected %d, read %d", length, read_length)
	}
	return string(buffer), nil
}

func (FfiConverterstring) lower(value string) C.RustBuffer {
	return stringToCRustBuffer(value)
}

func (FfiConverterstring) write(writer io.Writer, value string) error {
	if len(value) > math.MaxInt32 {
		return fmt.Errorf("String is too large to fit into Int32")
	}

	if err := writeInt32(writer, int32(len(value))); err != nil {
		return err
	}
	write_length, err := io.WriteString(writer, value)
	if err != nil {
		return err
	}
	if write_length != len(value) {
		return fmt.Errorf("bad write length when writing string, expected %d, written %d", len(value), write_length)
	}
	return nil
}

type FfiDestroyerstring struct{}

func (FfiDestroyerstring) destroy(_ string) {}

// Below is an implementation of synchronization requirements outlined in the link.
// https://github.com/mozilla/uniffi-rs/blob/0dc031132d9493ca812c3af6e7dd60ad2ea95bf0/uniffi_bindgen/src/bindings/kotlin/templates/ObjectRuntime.kt#L31

type FfiObject struct {
	pointer      unsafe.Pointer
	callCounter  atomic.Int64
	freeFunction func(unsafe.Pointer, *C.RustCallStatus)
	destroyed    atomic.Bool
}

func newFfiObject(pointer unsafe.Pointer, freeFunction func(unsafe.Pointer, *C.RustCallStatus)) FfiObject {
	return FfiObject{
		pointer:      pointer,
		freeFunction: freeFunction,
	}
}

func (ffiObject *FfiObject) incrementPointer(debugName string) (unsafe.Pointer, error) {
	for {
		counter := ffiObject.callCounter.Load()
		if counter <= -1 {
			return nil, fmt.Errorf("%v object has already been destroyed", debugName)
		}
		if counter == math.MaxInt64 {
			return nil, fmt.Errorf("%v object call counter would overflow", debugName)
		} 
		if ffiObject.callCounter.CompareAndSwap(counter, counter+1) {
			break
		}
	}

	return ffiObject.pointer, nil
}

func (ffiObject *FfiObject) decrementPointer() {
	if ffiObject.callCounter.Add(-1) == -1 {
		ffiObject.freeRustArcPtr()
	}
}

func (ffiObject *FfiObject) destroy() {
	if ffiObject.destroyed.CompareAndSwap(false, true) {
		if ffiObject.callCounter.Add(-1) == -1 {
			ffiObject.freeRustArcPtr()
		}
	}
}

func (ffiObject *FfiObject) freeRustArcPtr() {
	rustCall(func(status *C.RustCallStatus) int32 {
		ffiObject.freeFunction(ffiObject.pointer, status)
		return 0
	})
}

type BlockingBreezServices struct {
	ffiObject FfiObject
}

func (_self *BlockingBreezServices) Disconnect() error {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) bool {
		C.breez_sdk_d634_BlockingBreezServices_disconnect(
			_pointer, _uniffiStatus)
		return false
	})
	return _uniffiErr

}
func (_self *BlockingBreezServices) SendPayment(bolt11 string, amountSats *uint64) (Payment, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_send_payment(
			_pointer, FfiConverterstringINSTANCE.lower(bolt11), FfiConverterOptionaluint64INSTANCE.lower(amountSats), _uniffiStatus)
	})
	var _uniffiDefaultValue Payment
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterTypePaymentINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) SendSpontaneousPayment(nodeId string, amountSats uint64) (Payment, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_send_spontaneous_payment(
			_pointer, FfiConverterstringINSTANCE.lower(nodeId), FfiConverteruint64INSTANCE.lower(amountSats), _uniffiStatus)
	})
	var _uniffiDefaultValue Payment
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterTypePaymentINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) ReceivePayment(reqData ReceivePaymentRequest) (ReceivePaymentResponse, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_receive_payment(
			_pointer, FfiConverterTypeReceivePaymentRequestINSTANCE.lower(reqData), _uniffiStatus)
	})
	var _uniffiDefaultValue ReceivePaymentResponse
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterTypeReceivePaymentResponseINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) PayLnurl(reqData LnUrlPayRequestData, amountSats uint64, comment *string) (LnUrlPayResult, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_pay_lnurl(
			_pointer, FfiConverterTypeLnUrlPayRequestDataINSTANCE.lower(reqData), FfiConverteruint64INSTANCE.lower(amountSats), FfiConverterOptionalstringINSTANCE.lower(comment), _uniffiStatus)
	})
	var _uniffiDefaultValue LnUrlPayResult
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterTypeLnUrlPayResultINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) WithdrawLnurl(reqData LnUrlWithdrawRequestData, amountSats uint64, description *string) (LnUrlCallbackStatus, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_withdraw_lnurl(
			_pointer, FfiConverterTypeLnUrlWithdrawRequestDataINSTANCE.lower(reqData), FfiConverteruint64INSTANCE.lower(amountSats), FfiConverterOptionalstringINSTANCE.lower(description), _uniffiStatus)
	})
	var _uniffiDefaultValue LnUrlCallbackStatus
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterTypeLnUrlCallbackStatusINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) LnurlAuth(reqData LnUrlAuthRequestData) (LnUrlCallbackStatus, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_lnurl_auth(
			_pointer, FfiConverterTypeLnUrlAuthRequestDataINSTANCE.lower(reqData), _uniffiStatus)
	})
	var _uniffiDefaultValue LnUrlCallbackStatus
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterTypeLnUrlCallbackStatusINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) NodeInfo() (NodeState, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_node_info(
			_pointer, _uniffiStatus)
	})
	var _uniffiDefaultValue NodeState
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterTypeNodeStateINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) SignMessage(request SignMessageRequest) (SignMessageResponse, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_sign_message(
			_pointer, FfiConverterTypeSignMessageRequestINSTANCE.lower(request), _uniffiStatus)
	})
	var _uniffiDefaultValue SignMessageResponse
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterTypeSignMessageResponseINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) CheckMessage(request CheckMessageRequest) (CheckMessageResponse, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_check_message(
			_pointer, FfiConverterTypeCheckMessageRequestINSTANCE.lower(request), _uniffiStatus)
	})
	var _uniffiDefaultValue CheckMessageResponse
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterTypeCheckMessageResponseINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) BackupStatus() (BackupStatus, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_backup_status(
			_pointer, _uniffiStatus)
	})
	var _uniffiDefaultValue BackupStatus
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterTypeBackupStatusINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) Backup() error {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) bool {
		C.breez_sdk_d634_BlockingBreezServices_backup(
			_pointer, _uniffiStatus)
		return false
	})
	return _uniffiErr

}
func (_self *BlockingBreezServices) PaymentByHash(hash string) (*Payment, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_payment_by_hash(
			_pointer, FfiConverterstringINSTANCE.lower(hash), _uniffiStatus)
	})
	var _uniffiDefaultValue *Payment
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterOptionalTypePaymentINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) ListPayments(filter PaymentTypeFilter, fromTimestamp *int64, toTimestamp *int64) ([]Payment, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_list_payments(
			_pointer, FfiConverterTypePaymentTypeFilterINSTANCE.lower(filter), FfiConverterOptionalint64INSTANCE.lower(fromTimestamp), FfiConverterOptionalint64INSTANCE.lower(toTimestamp), _uniffiStatus)
	})
	var _uniffiDefaultValue []Payment
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterSequenceTypePaymentINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) Sweep(toAddress string, feeRateSatsPerVbyte uint64) error {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) bool {
		C.breez_sdk_d634_BlockingBreezServices_sweep(
			_pointer, FfiConverterstringINSTANCE.lower(toAddress), FfiConverteruint64INSTANCE.lower(feeRateSatsPerVbyte), _uniffiStatus)
		return false
	})
	return _uniffiErr

}
func (_self *BlockingBreezServices) FetchFiatRates() ([]Rate, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_fetch_fiat_rates(
			_pointer, _uniffiStatus)
	})
	var _uniffiDefaultValue []Rate
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterSequenceTypeRateINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) ListFiatCurrencies() ([]FiatCurrency, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_list_fiat_currencies(
			_pointer, _uniffiStatus)
	})
	var _uniffiDefaultValue []FiatCurrency
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterSequenceTypeFiatCurrencyINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) ListLsps() ([]LspInformation, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_list_lsps(
			_pointer, _uniffiStatus)
	})
	var _uniffiDefaultValue []LspInformation
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterSequenceTypeLspInformationINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) ConnectLsp(lspId string) error {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) bool {
		C.breez_sdk_d634_BlockingBreezServices_connect_lsp(
			_pointer, FfiConverterstringINSTANCE.lower(lspId), _uniffiStatus)
		return false
	})
	return _uniffiErr

}
func (_self *BlockingBreezServices) FetchLspInfo(lspId string) (*LspInformation, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_fetch_lsp_info(
			_pointer, FfiConverterstringINSTANCE.lower(lspId), _uniffiStatus)
	})
	var _uniffiDefaultValue *LspInformation
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterOptionalTypeLspInformationINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) OpenChannelFee(req OpenChannelFeeRequest) (OpenChannelFeeResponse, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_open_channel_fee(
			_pointer, FfiConverterTypeOpenChannelFeeRequestINSTANCE.lower(req), _uniffiStatus)
	})
	var _uniffiDefaultValue OpenChannelFeeResponse
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterTypeOpenChannelFeeResponseINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) LspId() (*string, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_lsp_id(
			_pointer, _uniffiStatus)
	})
	var _uniffiDefaultValue *string
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterOptionalstringINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) LspInfo() (LspInformation, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_lsp_info(
			_pointer, _uniffiStatus)
	})
	var _uniffiDefaultValue LspInformation
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterTypeLspInformationINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) CloseLspChannels() error {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) bool {
		C.breez_sdk_d634_BlockingBreezServices_close_lsp_channels(
			_pointer, _uniffiStatus)
		return false
	})
	return _uniffiErr

}
func (_self *BlockingBreezServices) ReceiveOnchain(req ReceiveOnchainRequest) (SwapInfo, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_receive_onchain(
			_pointer, FfiConverterTypeReceiveOnchainRequestINSTANCE.lower(req), _uniffiStatus)
	})
	var _uniffiDefaultValue SwapInfo
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterTypeSwapInfoINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) InProgressSwap() (*SwapInfo, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_in_progress_swap(
			_pointer, _uniffiStatus)
	})
	var _uniffiDefaultValue *SwapInfo
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterOptionalTypeSwapInfoINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) ListRefundables() ([]SwapInfo, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_list_refundables(
			_pointer, _uniffiStatus)
	})
	var _uniffiDefaultValue []SwapInfo
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterSequenceTypeSwapInfoINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) Refund(swapAddress string, toAddress string, satPerVbyte uint32) (string, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_refund(
			_pointer, FfiConverterstringINSTANCE.lower(swapAddress), FfiConverterstringINSTANCE.lower(toAddress), FfiConverteruint32INSTANCE.lower(satPerVbyte), _uniffiStatus)
	})
	var _uniffiDefaultValue string
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterstringINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) FetchReverseSwapFees(req ReverseSwapFeesRequest) (ReverseSwapPairInfo, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_fetch_reverse_swap_fees(
			_pointer, FfiConverterTypeReverseSwapFeesRequestINSTANCE.lower(req), _uniffiStatus)
	})
	var _uniffiDefaultValue ReverseSwapPairInfo
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterTypeReverseSwapPairInfoINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) InProgressReverseSwaps() ([]ReverseSwapInfo, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_in_progress_reverse_swaps(
			_pointer, _uniffiStatus)
	})
	var _uniffiDefaultValue []ReverseSwapInfo
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterSequenceTypeReverseSwapInfoINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) SendOnchain(amountSat uint64, onchainRecipientAddress string, pairHash string, satPerVbyte uint64) (ReverseSwapInfo, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_send_onchain(
			_pointer, FfiConverteruint64INSTANCE.lower(amountSat), FfiConverterstringINSTANCE.lower(onchainRecipientAddress), FfiConverterstringINSTANCE.lower(pairHash), FfiConverteruint64INSTANCE.lower(satPerVbyte), _uniffiStatus)
	})
	var _uniffiDefaultValue ReverseSwapInfo
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterTypeReverseSwapInfoINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) ExecuteDevCommand(command string) (string, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_execute_dev_command(
			_pointer, FfiConverterstringINSTANCE.lower(command), _uniffiStatus)
	})
	var _uniffiDefaultValue string
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterstringINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) Sync() error {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) bool {
		C.breez_sdk_d634_BlockingBreezServices_sync(
			_pointer, _uniffiStatus)
		return false
	})
	return _uniffiErr

}
func (_self *BlockingBreezServices) RecommendedFees() (RecommendedFees, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_recommended_fees(
			_pointer, _uniffiStatus)
	})
	var _uniffiDefaultValue RecommendedFees
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterTypeRecommendedFeesINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}
func (_self *BlockingBreezServices) BuyBitcoin(req BuyBitcoinRequest) (BuyBitcoinResponse, error) {
	_pointer, _ := _self.ffiObject.incrementPointer("*BlockingBreezServices")
	defer _self.ffiObject.decrementPointer()

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_BlockingBreezServices_buy_bitcoin(
			_pointer, FfiConverterTypeBuyBitcoinRequestINSTANCE.lower(req), _uniffiStatus)
	})
	var _uniffiDefaultValue BuyBitcoinResponse
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterTypeBuyBitcoinResponseINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}

func (object *BlockingBreezServices) Destroy() {
	runtime.SetFinalizer(object, nil)
	object.ffiObject.destroy()
}

type FfiConverterBlockingBreezServices struct{}

var FfiConverterBlockingBreezServicesINSTANCE = FfiConverterBlockingBreezServices{}

func (c FfiConverterBlockingBreezServices) lift(pointer unsafe.Pointer) (*BlockingBreezServices, error) {
	result := &BlockingBreezServices{
		newFfiObject(
			pointer,
			func(pointer unsafe.Pointer, status *C.RustCallStatus) {
				C.ffi_breez_sdk_d634_BlockingBreezServices_object_free(pointer, status)
			}),
	}
	runtime.SetFinalizer(result, (*BlockingBreezServices).Destroy)
	return result, nil
}

func (c FfiConverterBlockingBreezServices) read(reader io.Reader) (*BlockingBreezServices, error) {
	readValue, err := readUint64(reader)
	if err != nil {
		var _uniffiDefaultValue *BlockingBreezServices
		return _uniffiDefaultValue, err
	}
	return c.lift(unsafe.Pointer(uintptr(readValue)))
}

func (c FfiConverterBlockingBreezServices) lower(value *BlockingBreezServices) unsafe.Pointer {
	// TODO: this is bad - all synchronization from ObjectRuntime.go is discarded here,
	// because the pointer will be decremented immediately after this function returns,
	// and someone will be left holding onto a non-locked pointer.
	pointer, err := value.ffiObject.incrementPointer("*BlockingBreezServices")
	if err != nil {
		defer value.ffiObject.decrementPointer()
	}
	return pointer
}

func (c FfiConverterBlockingBreezServices) write(writer io.Writer, value *BlockingBreezServices) error {
	return writeUint64(writer, uint64(uintptr(c.lower(value))))
}

type FfiDestroyerBlockingBreezServices struct{}

func (FfiDestroyerBlockingBreezServices) destroy(value *BlockingBreezServices) {
	value.Destroy()
}

type AesSuccessActionDataDecrypted struct {
	Description string
	Plaintext   string
}

func (r *AesSuccessActionDataDecrypted) Destroy() {
	FfiDestroyerstring{}.destroy(r.Description)
	FfiDestroyerstring{}.destroy(r.Plaintext)
}

type FfiConverterTypeAesSuccessActionDataDecrypted struct{}

var FfiConverterTypeAesSuccessActionDataDecryptedINSTANCE = FfiConverterTypeAesSuccessActionDataDecrypted{}

func (c FfiConverterTypeAesSuccessActionDataDecrypted) lift(cRustBuf C.RustBuffer) (AesSuccessActionDataDecrypted, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[AesSuccessActionDataDecrypted](c, rustBuffer)
}

func (c FfiConverterTypeAesSuccessActionDataDecrypted) read(reader io.Reader) (AesSuccessActionDataDecrypted, error) {
	var _uniffiDefaultValue AesSuccessActionDataDecrypted
	_description, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_plaintext, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return AesSuccessActionDataDecrypted{
		Description: _description,
		Plaintext:   _plaintext,
	}, nil
}

func (c FfiConverterTypeAesSuccessActionDataDecrypted) lower(value AesSuccessActionDataDecrypted) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[AesSuccessActionDataDecrypted](c, value)
	return _loweredValue
}

func (c FfiConverterTypeAesSuccessActionDataDecrypted) write(writer io.Writer, value AesSuccessActionDataDecrypted) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Description); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.Plaintext); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeAesSuccessActionDataDecrypted struct{}

func (FfiDestroyerTypeAesSuccessActionDataDecrypted) destroy(value AesSuccessActionDataDecrypted) {
	value.Destroy()
}

type BackupFailedData struct {
	Error string
}

func (r *BackupFailedData) Destroy() {
	FfiDestroyerstring{}.destroy(r.Error)
}

type FfiConverterTypeBackupFailedData struct{}

var FfiConverterTypeBackupFailedDataINSTANCE = FfiConverterTypeBackupFailedData{}

func (c FfiConverterTypeBackupFailedData) lift(cRustBuf C.RustBuffer) (BackupFailedData, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[BackupFailedData](c, rustBuffer)
}

func (c FfiConverterTypeBackupFailedData) read(reader io.Reader) (BackupFailedData, error) {
	var _uniffiDefaultValue BackupFailedData
	_error, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return BackupFailedData{
		Error: _error,
	}, nil
}

func (c FfiConverterTypeBackupFailedData) lower(value BackupFailedData) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[BackupFailedData](c, value)
	return _loweredValue
}

func (c FfiConverterTypeBackupFailedData) write(writer io.Writer, value BackupFailedData) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Error); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeBackupFailedData struct{}

func (FfiDestroyerTypeBackupFailedData) destroy(value BackupFailedData) {
	value.Destroy()
}

type BackupStatus struct {
	BackedUp       bool
	LastBackupTime *uint64
}

func (r *BackupStatus) Destroy() {
	FfiDestroyerbool{}.destroy(r.BackedUp)
	FfiDestroyerOptionaluint64{}.destroy(r.LastBackupTime)
}

type FfiConverterTypeBackupStatus struct{}

var FfiConverterTypeBackupStatusINSTANCE = FfiConverterTypeBackupStatus{}

func (c FfiConverterTypeBackupStatus) lift(cRustBuf C.RustBuffer) (BackupStatus, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[BackupStatus](c, rustBuffer)
}

func (c FfiConverterTypeBackupStatus) read(reader io.Reader) (BackupStatus, error) {
	var _uniffiDefaultValue BackupStatus
	_backedUp, err := FfiConverterboolINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_lastBackupTime, err := FfiConverterOptionaluint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return BackupStatus{
		BackedUp:       _backedUp,
		LastBackupTime: _lastBackupTime,
	}, nil
}

func (c FfiConverterTypeBackupStatus) lower(value BackupStatus) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[BackupStatus](c, value)
	return _loweredValue
}

func (c FfiConverterTypeBackupStatus) write(writer io.Writer, value BackupStatus) error {
	if err := FfiConverterboolINSTANCE.write(writer, value.BackedUp); err != nil {
		return err
	}
	if err := FfiConverterOptionaluint64INSTANCE.write(writer, value.LastBackupTime); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeBackupStatus struct{}

func (FfiDestroyerTypeBackupStatus) destroy(value BackupStatus) {
	value.Destroy()
}

type BitcoinAddressData struct {
	Address   string
	Network   Network
	AmountSat *uint64
	Label     *string
	Message   *string
}

func (r *BitcoinAddressData) Destroy() {
	FfiDestroyerstring{}.destroy(r.Address)
	FfiDestroyerTypeNetwork{}.destroy(r.Network)
	FfiDestroyerOptionaluint64{}.destroy(r.AmountSat)
	FfiDestroyerOptionalstring{}.destroy(r.Label)
	FfiDestroyerOptionalstring{}.destroy(r.Message)
}

type FfiConverterTypeBitcoinAddressData struct{}

var FfiConverterTypeBitcoinAddressDataINSTANCE = FfiConverterTypeBitcoinAddressData{}

func (c FfiConverterTypeBitcoinAddressData) lift(cRustBuf C.RustBuffer) (BitcoinAddressData, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[BitcoinAddressData](c, rustBuffer)
}

func (c FfiConverterTypeBitcoinAddressData) read(reader io.Reader) (BitcoinAddressData, error) {
	var _uniffiDefaultValue BitcoinAddressData
	_address, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_network, err := FfiConverterTypeNetworkINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_amountSat, err := FfiConverterOptionaluint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_label, err := FfiConverterOptionalstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_message, err := FfiConverterOptionalstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return BitcoinAddressData{
		Address:   _address,
		Network:   _network,
		AmountSat: _amountSat,
		Label:     _label,
		Message:   _message,
	}, nil
}

func (c FfiConverterTypeBitcoinAddressData) lower(value BitcoinAddressData) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[BitcoinAddressData](c, value)
	return _loweredValue
}

func (c FfiConverterTypeBitcoinAddressData) write(writer io.Writer, value BitcoinAddressData) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Address); err != nil {
		return err
	}
	if err := FfiConverterTypeNetworkINSTANCE.write(writer, value.Network); err != nil {
		return err
	}
	if err := FfiConverterOptionaluint64INSTANCE.write(writer, value.AmountSat); err != nil {
		return err
	}
	if err := FfiConverterOptionalstringINSTANCE.write(writer, value.Label); err != nil {
		return err
	}
	if err := FfiConverterOptionalstringINSTANCE.write(writer, value.Message); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeBitcoinAddressData struct{}

func (FfiDestroyerTypeBitcoinAddressData) destroy(value BitcoinAddressData) {
	value.Destroy()
}

type BuyBitcoinRequest struct {
	Provider         BuyBitcoinProvider
	OpeningFeeParams *OpeningFeeParams
}

func (r *BuyBitcoinRequest) Destroy() {
	FfiDestroyerTypeBuyBitcoinProvider{}.destroy(r.Provider)
	FfiDestroyerOptionalTypeOpeningFeeParams{}.destroy(r.OpeningFeeParams)
}

type FfiConverterTypeBuyBitcoinRequest struct{}

var FfiConverterTypeBuyBitcoinRequestINSTANCE = FfiConverterTypeBuyBitcoinRequest{}

func (c FfiConverterTypeBuyBitcoinRequest) lift(cRustBuf C.RustBuffer) (BuyBitcoinRequest, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[BuyBitcoinRequest](c, rustBuffer)
}

func (c FfiConverterTypeBuyBitcoinRequest) read(reader io.Reader) (BuyBitcoinRequest, error) {
	var _uniffiDefaultValue BuyBitcoinRequest
	_provider, err := FfiConverterTypeBuyBitcoinProviderINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_openingFeeParams, err := FfiConverterOptionalTypeOpeningFeeParamsINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return BuyBitcoinRequest{
		Provider:         _provider,
		OpeningFeeParams: _openingFeeParams,
	}, nil
}

func (c FfiConverterTypeBuyBitcoinRequest) lower(value BuyBitcoinRequest) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[BuyBitcoinRequest](c, value)
	return _loweredValue
}

func (c FfiConverterTypeBuyBitcoinRequest) write(writer io.Writer, value BuyBitcoinRequest) error {
	if err := FfiConverterTypeBuyBitcoinProviderINSTANCE.write(writer, value.Provider); err != nil {
		return err
	}
	if err := FfiConverterOptionalTypeOpeningFeeParamsINSTANCE.write(writer, value.OpeningFeeParams); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeBuyBitcoinRequest struct{}

func (FfiDestroyerTypeBuyBitcoinRequest) destroy(value BuyBitcoinRequest) {
	value.Destroy()
}

type BuyBitcoinResponse struct {
	Url              string
	OpeningFeeParams *OpeningFeeParams
}

func (r *BuyBitcoinResponse) Destroy() {
	FfiDestroyerstring{}.destroy(r.Url)
	FfiDestroyerOptionalTypeOpeningFeeParams{}.destroy(r.OpeningFeeParams)
}

type FfiConverterTypeBuyBitcoinResponse struct{}

var FfiConverterTypeBuyBitcoinResponseINSTANCE = FfiConverterTypeBuyBitcoinResponse{}

func (c FfiConverterTypeBuyBitcoinResponse) lift(cRustBuf C.RustBuffer) (BuyBitcoinResponse, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[BuyBitcoinResponse](c, rustBuffer)
}

func (c FfiConverterTypeBuyBitcoinResponse) read(reader io.Reader) (BuyBitcoinResponse, error) {
	var _uniffiDefaultValue BuyBitcoinResponse
	_url, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_openingFeeParams, err := FfiConverterOptionalTypeOpeningFeeParamsINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return BuyBitcoinResponse{
		Url:              _url,
		OpeningFeeParams: _openingFeeParams,
	}, nil
}

func (c FfiConverterTypeBuyBitcoinResponse) lower(value BuyBitcoinResponse) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[BuyBitcoinResponse](c, value)
	return _loweredValue
}

func (c FfiConverterTypeBuyBitcoinResponse) write(writer io.Writer, value BuyBitcoinResponse) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Url); err != nil {
		return err
	}
	if err := FfiConverterOptionalTypeOpeningFeeParamsINSTANCE.write(writer, value.OpeningFeeParams); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeBuyBitcoinResponse struct{}

func (FfiDestroyerTypeBuyBitcoinResponse) destroy(value BuyBitcoinResponse) {
	value.Destroy()
}

type CheckMessageRequest struct {
	Message   string
	Pubkey    string
	Signature string
}

func (r *CheckMessageRequest) Destroy() {
	FfiDestroyerstring{}.destroy(r.Message)
	FfiDestroyerstring{}.destroy(r.Pubkey)
	FfiDestroyerstring{}.destroy(r.Signature)
}

type FfiConverterTypeCheckMessageRequest struct{}

var FfiConverterTypeCheckMessageRequestINSTANCE = FfiConverterTypeCheckMessageRequest{}

func (c FfiConverterTypeCheckMessageRequest) lift(cRustBuf C.RustBuffer) (CheckMessageRequest, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[CheckMessageRequest](c, rustBuffer)
}

func (c FfiConverterTypeCheckMessageRequest) read(reader io.Reader) (CheckMessageRequest, error) {
	var _uniffiDefaultValue CheckMessageRequest
	_message, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_pubkey, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_signature, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return CheckMessageRequest{
		Message:   _message,
		Pubkey:    _pubkey,
		Signature: _signature,
	}, nil
}

func (c FfiConverterTypeCheckMessageRequest) lower(value CheckMessageRequest) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[CheckMessageRequest](c, value)
	return _loweredValue
}

func (c FfiConverterTypeCheckMessageRequest) write(writer io.Writer, value CheckMessageRequest) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Message); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.Pubkey); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.Signature); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeCheckMessageRequest struct{}

func (FfiDestroyerTypeCheckMessageRequest) destroy(value CheckMessageRequest) {
	value.Destroy()
}

type CheckMessageResponse struct {
	IsValid bool
}

func (r *CheckMessageResponse) Destroy() {
	FfiDestroyerbool{}.destroy(r.IsValid)
}

type FfiConverterTypeCheckMessageResponse struct{}

var FfiConverterTypeCheckMessageResponseINSTANCE = FfiConverterTypeCheckMessageResponse{}

func (c FfiConverterTypeCheckMessageResponse) lift(cRustBuf C.RustBuffer) (CheckMessageResponse, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[CheckMessageResponse](c, rustBuffer)
}

func (c FfiConverterTypeCheckMessageResponse) read(reader io.Reader) (CheckMessageResponse, error) {
	var _uniffiDefaultValue CheckMessageResponse
	_isValid, err := FfiConverterboolINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return CheckMessageResponse{
		IsValid: _isValid,
	}, nil
}

func (c FfiConverterTypeCheckMessageResponse) lower(value CheckMessageResponse) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[CheckMessageResponse](c, value)
	return _loweredValue
}

func (c FfiConverterTypeCheckMessageResponse) write(writer io.Writer, value CheckMessageResponse) error {
	if err := FfiConverterboolINSTANCE.write(writer, value.IsValid); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeCheckMessageResponse struct{}

func (FfiDestroyerTypeCheckMessageResponse) destroy(value CheckMessageResponse) {
	value.Destroy()
}

type ClosedChannelPaymentDetails struct {
	ShortChannelId string
	State          ChannelState
	FundingTxid    string
}

func (r *ClosedChannelPaymentDetails) Destroy() {
	FfiDestroyerstring{}.destroy(r.ShortChannelId)
	FfiDestroyerTypeChannelState{}.destroy(r.State)
	FfiDestroyerstring{}.destroy(r.FundingTxid)
}

type FfiConverterTypeClosedChannelPaymentDetails struct{}

var FfiConverterTypeClosedChannelPaymentDetailsINSTANCE = FfiConverterTypeClosedChannelPaymentDetails{}

func (c FfiConverterTypeClosedChannelPaymentDetails) lift(cRustBuf C.RustBuffer) (ClosedChannelPaymentDetails, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[ClosedChannelPaymentDetails](c, rustBuffer)
}

func (c FfiConverterTypeClosedChannelPaymentDetails) read(reader io.Reader) (ClosedChannelPaymentDetails, error) {
	var _uniffiDefaultValue ClosedChannelPaymentDetails
	_shortChannelId, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_state, err := FfiConverterTypeChannelStateINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_fundingTxid, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return ClosedChannelPaymentDetails{
		ShortChannelId: _shortChannelId,
		State:          _state,
		FundingTxid:    _fundingTxid,
	}, nil
}

func (c FfiConverterTypeClosedChannelPaymentDetails) lower(value ClosedChannelPaymentDetails) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[ClosedChannelPaymentDetails](c, value)
	return _loweredValue
}

func (c FfiConverterTypeClosedChannelPaymentDetails) write(writer io.Writer, value ClosedChannelPaymentDetails) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.ShortChannelId); err != nil {
		return err
	}
	if err := FfiConverterTypeChannelStateINSTANCE.write(writer, value.State); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.FundingTxid); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeClosedChannelPaymentDetails struct{}

func (FfiDestroyerTypeClosedChannelPaymentDetails) destroy(value ClosedChannelPaymentDetails) {
	value.Destroy()
}

type Config struct {
	Breezserver       string
	MempoolspaceUrl   string
	WorkingDir        string
	Network           Network
	PaymentTimeoutSec uint32
	DefaultLspId      *string
	ApiKey            *string
	MaxfeePercent     float64
	NodeConfig        NodeConfig
}

func (r *Config) Destroy() {
	FfiDestroyerstring{}.destroy(r.Breezserver)
	FfiDestroyerstring{}.destroy(r.MempoolspaceUrl)
	FfiDestroyerstring{}.destroy(r.WorkingDir)
	FfiDestroyerTypeNetwork{}.destroy(r.Network)
	FfiDestroyeruint32{}.destroy(r.PaymentTimeoutSec)
	FfiDestroyerOptionalstring{}.destroy(r.DefaultLspId)
	FfiDestroyerOptionalstring{}.destroy(r.ApiKey)
	FfiDestroyerfloat64{}.destroy(r.MaxfeePercent)
	FfiDestroyerTypeNodeConfig{}.destroy(r.NodeConfig)
}

type FfiConverterTypeConfig struct{}

var FfiConverterTypeConfigINSTANCE = FfiConverterTypeConfig{}

func (c FfiConverterTypeConfig) lift(cRustBuf C.RustBuffer) (Config, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[Config](c, rustBuffer)
}

func (c FfiConverterTypeConfig) read(reader io.Reader) (Config, error) {
	var _uniffiDefaultValue Config
	_breezserver, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_mempoolspaceUrl, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_workingDir, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_network, err := FfiConverterTypeNetworkINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_paymentTimeoutSec, err := FfiConverteruint32INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_defaultLspId, err := FfiConverterOptionalstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_apiKey, err := FfiConverterOptionalstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_maxfeePercent, err := FfiConverterfloat64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_nodeConfig, err := FfiConverterTypeNodeConfigINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return Config{
		Breezserver:       _breezserver,
		MempoolspaceUrl:   _mempoolspaceUrl,
		WorkingDir:        _workingDir,
		Network:           _network,
		PaymentTimeoutSec: _paymentTimeoutSec,
		DefaultLspId:      _defaultLspId,
		ApiKey:            _apiKey,
		MaxfeePercent:     _maxfeePercent,
		NodeConfig:        _nodeConfig,
	}, nil
}

func (c FfiConverterTypeConfig) lower(value Config) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[Config](c, value)
	return _loweredValue
}

func (c FfiConverterTypeConfig) write(writer io.Writer, value Config) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Breezserver); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.MempoolspaceUrl); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.WorkingDir); err != nil {
		return err
	}
	if err := FfiConverterTypeNetworkINSTANCE.write(writer, value.Network); err != nil {
		return err
	}
	if err := FfiConverteruint32INSTANCE.write(writer, value.PaymentTimeoutSec); err != nil {
		return err
	}
	if err := FfiConverterOptionalstringINSTANCE.write(writer, value.DefaultLspId); err != nil {
		return err
	}
	if err := FfiConverterOptionalstringINSTANCE.write(writer, value.ApiKey); err != nil {
		return err
	}
	if err := FfiConverterfloat64INSTANCE.write(writer, value.MaxfeePercent); err != nil {
		return err
	}
	if err := FfiConverterTypeNodeConfigINSTANCE.write(writer, value.NodeConfig); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeConfig struct{}

func (FfiDestroyerTypeConfig) destroy(value Config) {
	value.Destroy()
}

type CurrencyInfo struct {
	Name            string
	FractionSize    uint32
	Spacing         *uint32
	Symbol          *Symbol
	UniqSymbol      *Symbol
	LocalizedName   *[]LocalizedName
	LocaleOverrides *[]LocaleOverrides
}

func (r *CurrencyInfo) Destroy() {
	FfiDestroyerstring{}.destroy(r.Name)
	FfiDestroyeruint32{}.destroy(r.FractionSize)
	FfiDestroyerOptionaluint32{}.destroy(r.Spacing)
	FfiDestroyerOptionalTypeSymbol{}.destroy(r.Symbol)
	FfiDestroyerOptionalTypeSymbol{}.destroy(r.UniqSymbol)
	FfiDestroyerOptionalSequenceTypeLocalizedName{}.destroy(r.LocalizedName)
	FfiDestroyerOptionalSequenceTypeLocaleOverrides{}.destroy(r.LocaleOverrides)
}

type FfiConverterTypeCurrencyInfo struct{}

var FfiConverterTypeCurrencyInfoINSTANCE = FfiConverterTypeCurrencyInfo{}

func (c FfiConverterTypeCurrencyInfo) lift(cRustBuf C.RustBuffer) (CurrencyInfo, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[CurrencyInfo](c, rustBuffer)
}

func (c FfiConverterTypeCurrencyInfo) read(reader io.Reader) (CurrencyInfo, error) {
	var _uniffiDefaultValue CurrencyInfo
	_name, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_fractionSize, err := FfiConverteruint32INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_spacing, err := FfiConverterOptionaluint32INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_symbol, err := FfiConverterOptionalTypeSymbolINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_uniqSymbol, err := FfiConverterOptionalTypeSymbolINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_localizedName, err := FfiConverterOptionalSequenceTypeLocalizedNameINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_localeOverrides, err := FfiConverterOptionalSequenceTypeLocaleOverridesINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return CurrencyInfo{
		Name:            _name,
		FractionSize:    _fractionSize,
		Spacing:         _spacing,
		Symbol:          _symbol,
		UniqSymbol:      _uniqSymbol,
		LocalizedName:   _localizedName,
		LocaleOverrides: _localeOverrides,
	}, nil
}

func (c FfiConverterTypeCurrencyInfo) lower(value CurrencyInfo) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[CurrencyInfo](c, value)
	return _loweredValue
}

func (c FfiConverterTypeCurrencyInfo) write(writer io.Writer, value CurrencyInfo) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Name); err != nil {
		return err
	}
	if err := FfiConverteruint32INSTANCE.write(writer, value.FractionSize); err != nil {
		return err
	}
	if err := FfiConverterOptionaluint32INSTANCE.write(writer, value.Spacing); err != nil {
		return err
	}
	if err := FfiConverterOptionalTypeSymbolINSTANCE.write(writer, value.Symbol); err != nil {
		return err
	}
	if err := FfiConverterOptionalTypeSymbolINSTANCE.write(writer, value.UniqSymbol); err != nil {
		return err
	}
	if err := FfiConverterOptionalSequenceTypeLocalizedNameINSTANCE.write(writer, value.LocalizedName); err != nil {
		return err
	}
	if err := FfiConverterOptionalSequenceTypeLocaleOverridesINSTANCE.write(writer, value.LocaleOverrides); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeCurrencyInfo struct{}

func (FfiDestroyerTypeCurrencyInfo) destroy(value CurrencyInfo) {
	value.Destroy()
}

type FiatCurrency struct {
	Id   string
	Info CurrencyInfo
}

func (r *FiatCurrency) Destroy() {
	FfiDestroyerstring{}.destroy(r.Id)
	FfiDestroyerTypeCurrencyInfo{}.destroy(r.Info)
}

type FfiConverterTypeFiatCurrency struct{}

var FfiConverterTypeFiatCurrencyINSTANCE = FfiConverterTypeFiatCurrency{}

func (c FfiConverterTypeFiatCurrency) lift(cRustBuf C.RustBuffer) (FiatCurrency, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[FiatCurrency](c, rustBuffer)
}

func (c FfiConverterTypeFiatCurrency) read(reader io.Reader) (FiatCurrency, error) {
	var _uniffiDefaultValue FiatCurrency
	_id, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_info, err := FfiConverterTypeCurrencyInfoINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return FiatCurrency{
		Id:   _id,
		Info: _info,
	}, nil
}

func (c FfiConverterTypeFiatCurrency) lower(value FiatCurrency) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[FiatCurrency](c, value)
	return _loweredValue
}

func (c FfiConverterTypeFiatCurrency) write(writer io.Writer, value FiatCurrency) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Id); err != nil {
		return err
	}
	if err := FfiConverterTypeCurrencyInfoINSTANCE.write(writer, value.Info); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeFiatCurrency struct{}

func (FfiDestroyerTypeFiatCurrency) destroy(value FiatCurrency) {
	value.Destroy()
}

type GreenlightCredentials struct {
	DeviceKey  []uint8
	DeviceCert []uint8
}

func (r *GreenlightCredentials) Destroy() {
	FfiDestroyerSequenceuint8{}.destroy(r.DeviceKey)
	FfiDestroyerSequenceuint8{}.destroy(r.DeviceCert)
}

type FfiConverterTypeGreenlightCredentials struct{}

var FfiConverterTypeGreenlightCredentialsINSTANCE = FfiConverterTypeGreenlightCredentials{}

func (c FfiConverterTypeGreenlightCredentials) lift(cRustBuf C.RustBuffer) (GreenlightCredentials, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[GreenlightCredentials](c, rustBuffer)
}

func (c FfiConverterTypeGreenlightCredentials) read(reader io.Reader) (GreenlightCredentials, error) {
	var _uniffiDefaultValue GreenlightCredentials
	_deviceKey, err := FfiConverterSequenceuint8INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_deviceCert, err := FfiConverterSequenceuint8INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return GreenlightCredentials{
		DeviceKey:  _deviceKey,
		DeviceCert: _deviceCert,
	}, nil
}

func (c FfiConverterTypeGreenlightCredentials) lower(value GreenlightCredentials) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[GreenlightCredentials](c, value)
	return _loweredValue
}

func (c FfiConverterTypeGreenlightCredentials) write(writer io.Writer, value GreenlightCredentials) error {
	if err := FfiConverterSequenceuint8INSTANCE.write(writer, value.DeviceKey); err != nil {
		return err
	}
	if err := FfiConverterSequenceuint8INSTANCE.write(writer, value.DeviceCert); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeGreenlightCredentials struct{}

func (FfiDestroyerTypeGreenlightCredentials) destroy(value GreenlightCredentials) {
	value.Destroy()
}

type GreenlightNodeConfig struct {
	PartnerCredentials *GreenlightCredentials
	InviteCode         *string
}

func (r *GreenlightNodeConfig) Destroy() {
	FfiDestroyerOptionalTypeGreenlightCredentials{}.destroy(r.PartnerCredentials)
	FfiDestroyerOptionalstring{}.destroy(r.InviteCode)
}

type FfiConverterTypeGreenlightNodeConfig struct{}

var FfiConverterTypeGreenlightNodeConfigINSTANCE = FfiConverterTypeGreenlightNodeConfig{}

func (c FfiConverterTypeGreenlightNodeConfig) lift(cRustBuf C.RustBuffer) (GreenlightNodeConfig, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[GreenlightNodeConfig](c, rustBuffer)
}

func (c FfiConverterTypeGreenlightNodeConfig) read(reader io.Reader) (GreenlightNodeConfig, error) {
	var _uniffiDefaultValue GreenlightNodeConfig
	_partnerCredentials, err := FfiConverterOptionalTypeGreenlightCredentialsINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_inviteCode, err := FfiConverterOptionalstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return GreenlightNodeConfig{
		PartnerCredentials: _partnerCredentials,
		InviteCode:         _inviteCode,
	}, nil
}

func (c FfiConverterTypeGreenlightNodeConfig) lower(value GreenlightNodeConfig) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[GreenlightNodeConfig](c, value)
	return _loweredValue
}

func (c FfiConverterTypeGreenlightNodeConfig) write(writer io.Writer, value GreenlightNodeConfig) error {
	if err := FfiConverterOptionalTypeGreenlightCredentialsINSTANCE.write(writer, value.PartnerCredentials); err != nil {
		return err
	}
	if err := FfiConverterOptionalstringINSTANCE.write(writer, value.InviteCode); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeGreenlightNodeConfig struct{}

func (FfiDestroyerTypeGreenlightNodeConfig) destroy(value GreenlightNodeConfig) {
	value.Destroy()
}

type InvoicePaidDetails struct {
	PaymentHash string
	Bolt11      string
}

func (r *InvoicePaidDetails) Destroy() {
	FfiDestroyerstring{}.destroy(r.PaymentHash)
	FfiDestroyerstring{}.destroy(r.Bolt11)
}

type FfiConverterTypeInvoicePaidDetails struct{}

var FfiConverterTypeInvoicePaidDetailsINSTANCE = FfiConverterTypeInvoicePaidDetails{}

func (c FfiConverterTypeInvoicePaidDetails) lift(cRustBuf C.RustBuffer) (InvoicePaidDetails, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[InvoicePaidDetails](c, rustBuffer)
}

func (c FfiConverterTypeInvoicePaidDetails) read(reader io.Reader) (InvoicePaidDetails, error) {
	var _uniffiDefaultValue InvoicePaidDetails
	_paymentHash, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_bolt11, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return InvoicePaidDetails{
		PaymentHash: _paymentHash,
		Bolt11:      _bolt11,
	}, nil
}

func (c FfiConverterTypeInvoicePaidDetails) lower(value InvoicePaidDetails) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[InvoicePaidDetails](c, value)
	return _loweredValue
}

func (c FfiConverterTypeInvoicePaidDetails) write(writer io.Writer, value InvoicePaidDetails) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.PaymentHash); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.Bolt11); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeInvoicePaidDetails struct{}

func (FfiDestroyerTypeInvoicePaidDetails) destroy(value InvoicePaidDetails) {
	value.Destroy()
}

type LnInvoice struct {
	Bolt11          string
	PayeePubkey     string
	PaymentHash     string
	Description     *string
	DescriptionHash *string
	AmountMsat      *uint64
	Timestamp       uint64
	Expiry          uint64
	RoutingHints    []RouteHint
	PaymentSecret   []uint8
}

func (r *LnInvoice) Destroy() {
	FfiDestroyerstring{}.destroy(r.Bolt11)
	FfiDestroyerstring{}.destroy(r.PayeePubkey)
	FfiDestroyerstring{}.destroy(r.PaymentHash)
	FfiDestroyerOptionalstring{}.destroy(r.Description)
	FfiDestroyerOptionalstring{}.destroy(r.DescriptionHash)
	FfiDestroyerOptionaluint64{}.destroy(r.AmountMsat)
	FfiDestroyeruint64{}.destroy(r.Timestamp)
	FfiDestroyeruint64{}.destroy(r.Expiry)
	FfiDestroyerSequenceTypeRouteHint{}.destroy(r.RoutingHints)
	FfiDestroyerSequenceuint8{}.destroy(r.PaymentSecret)
}

type FfiConverterTypeLnInvoice struct{}

var FfiConverterTypeLnInvoiceINSTANCE = FfiConverterTypeLnInvoice{}

func (c FfiConverterTypeLnInvoice) lift(cRustBuf C.RustBuffer) (LnInvoice, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[LnInvoice](c, rustBuffer)
}

func (c FfiConverterTypeLnInvoice) read(reader io.Reader) (LnInvoice, error) {
	var _uniffiDefaultValue LnInvoice
	_bolt11, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_payeePubkey, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_paymentHash, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_description, err := FfiConverterOptionalstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_descriptionHash, err := FfiConverterOptionalstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_amountMsat, err := FfiConverterOptionaluint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_timestamp, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_expiry, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_routingHints, err := FfiConverterSequenceTypeRouteHintINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_paymentSecret, err := FfiConverterSequenceuint8INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return LnInvoice{
		Bolt11:          _bolt11,
		PayeePubkey:     _payeePubkey,
		PaymentHash:     _paymentHash,
		Description:     _description,
		DescriptionHash: _descriptionHash,
		AmountMsat:      _amountMsat,
		Timestamp:       _timestamp,
		Expiry:          _expiry,
		RoutingHints:    _routingHints,
		PaymentSecret:   _paymentSecret,
	}, nil
}

func (c FfiConverterTypeLnInvoice) lower(value LnInvoice) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[LnInvoice](c, value)
	return _loweredValue
}

func (c FfiConverterTypeLnInvoice) write(writer io.Writer, value LnInvoice) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Bolt11); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.PayeePubkey); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.PaymentHash); err != nil {
		return err
	}
	if err := FfiConverterOptionalstringINSTANCE.write(writer, value.Description); err != nil {
		return err
	}
	if err := FfiConverterOptionalstringINSTANCE.write(writer, value.DescriptionHash); err != nil {
		return err
	}
	if err := FfiConverterOptionaluint64INSTANCE.write(writer, value.AmountMsat); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.Timestamp); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.Expiry); err != nil {
		return err
	}
	if err := FfiConverterSequenceTypeRouteHintINSTANCE.write(writer, value.RoutingHints); err != nil {
		return err
	}
	if err := FfiConverterSequenceuint8INSTANCE.write(writer, value.PaymentSecret); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeLnInvoice struct{}

func (FfiDestroyerTypeLnInvoice) destroy(value LnInvoice) {
	value.Destroy()
}

type LnPaymentDetails struct {
	PaymentHash        string
	Label              string
	DestinationPubkey  string
	PaymentPreimage    string
	Keysend            bool
	Bolt11             string
	LnurlSuccessAction *SuccessActionProcessed
	LnurlMetadata      *string
	LnAddress          *string
}

func (r *LnPaymentDetails) Destroy() {
	FfiDestroyerstring{}.destroy(r.PaymentHash)
	FfiDestroyerstring{}.destroy(r.Label)
	FfiDestroyerstring{}.destroy(r.DestinationPubkey)
	FfiDestroyerstring{}.destroy(r.PaymentPreimage)
	FfiDestroyerbool{}.destroy(r.Keysend)
	FfiDestroyerstring{}.destroy(r.Bolt11)
	FfiDestroyerOptionalTypeSuccessActionProcessed{}.destroy(r.LnurlSuccessAction)
	FfiDestroyerOptionalstring{}.destroy(r.LnurlMetadata)
	FfiDestroyerOptionalstring{}.destroy(r.LnAddress)
}

type FfiConverterTypeLnPaymentDetails struct{}

var FfiConverterTypeLnPaymentDetailsINSTANCE = FfiConverterTypeLnPaymentDetails{}

func (c FfiConverterTypeLnPaymentDetails) lift(cRustBuf C.RustBuffer) (LnPaymentDetails, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[LnPaymentDetails](c, rustBuffer)
}

func (c FfiConverterTypeLnPaymentDetails) read(reader io.Reader) (LnPaymentDetails, error) {
	var _uniffiDefaultValue LnPaymentDetails
	_paymentHash, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_label, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_destinationPubkey, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_paymentPreimage, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_keysend, err := FfiConverterboolINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_bolt11, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_lnurlSuccessAction, err := FfiConverterOptionalTypeSuccessActionProcessedINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_lnurlMetadata, err := FfiConverterOptionalstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_lnAddress, err := FfiConverterOptionalstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return LnPaymentDetails{
		PaymentHash:        _paymentHash,
		Label:              _label,
		DestinationPubkey:  _destinationPubkey,
		PaymentPreimage:    _paymentPreimage,
		Keysend:            _keysend,
		Bolt11:             _bolt11,
		LnurlSuccessAction: _lnurlSuccessAction,
		LnurlMetadata:      _lnurlMetadata,
		LnAddress:          _lnAddress,
	}, nil
}

func (c FfiConverterTypeLnPaymentDetails) lower(value LnPaymentDetails) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[LnPaymentDetails](c, value)
	return _loweredValue
}

func (c FfiConverterTypeLnPaymentDetails) write(writer io.Writer, value LnPaymentDetails) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.PaymentHash); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.Label); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.DestinationPubkey); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.PaymentPreimage); err != nil {
		return err
	}
	if err := FfiConverterboolINSTANCE.write(writer, value.Keysend); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.Bolt11); err != nil {
		return err
	}
	if err := FfiConverterOptionalTypeSuccessActionProcessedINSTANCE.write(writer, value.LnurlSuccessAction); err != nil {
		return err
	}
	if err := FfiConverterOptionalstringINSTANCE.write(writer, value.LnurlMetadata); err != nil {
		return err
	}
	if err := FfiConverterOptionalstringINSTANCE.write(writer, value.LnAddress); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeLnPaymentDetails struct{}

func (FfiDestroyerTypeLnPaymentDetails) destroy(value LnPaymentDetails) {
	value.Destroy()
}

type LnUrlAuthRequestData struct {
	K1     string
	Action *string
	Domain string
	Url    string
}

func (r *LnUrlAuthRequestData) Destroy() {
	FfiDestroyerstring{}.destroy(r.K1)
	FfiDestroyerOptionalstring{}.destroy(r.Action)
	FfiDestroyerstring{}.destroy(r.Domain)
	FfiDestroyerstring{}.destroy(r.Url)
}

type FfiConverterTypeLnUrlAuthRequestData struct{}

var FfiConverterTypeLnUrlAuthRequestDataINSTANCE = FfiConverterTypeLnUrlAuthRequestData{}

func (c FfiConverterTypeLnUrlAuthRequestData) lift(cRustBuf C.RustBuffer) (LnUrlAuthRequestData, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[LnUrlAuthRequestData](c, rustBuffer)
}

func (c FfiConverterTypeLnUrlAuthRequestData) read(reader io.Reader) (LnUrlAuthRequestData, error) {
	var _uniffiDefaultValue LnUrlAuthRequestData
	_k1, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_action, err := FfiConverterOptionalstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_domain, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_url, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return LnUrlAuthRequestData{
		K1:     _k1,
		Action: _action,
		Domain: _domain,
		Url:    _url,
	}, nil
}

func (c FfiConverterTypeLnUrlAuthRequestData) lower(value LnUrlAuthRequestData) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[LnUrlAuthRequestData](c, value)
	return _loweredValue
}

func (c FfiConverterTypeLnUrlAuthRequestData) write(writer io.Writer, value LnUrlAuthRequestData) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.K1); err != nil {
		return err
	}
	if err := FfiConverterOptionalstringINSTANCE.write(writer, value.Action); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.Domain); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.Url); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeLnUrlAuthRequestData struct{}

func (FfiDestroyerTypeLnUrlAuthRequestData) destroy(value LnUrlAuthRequestData) {
	value.Destroy()
}

type LnUrlErrorData struct {
	Reason string
}

func (r *LnUrlErrorData) Destroy() {
	FfiDestroyerstring{}.destroy(r.Reason)
}

type FfiConverterTypeLnUrlErrorData struct{}

var FfiConverterTypeLnUrlErrorDataINSTANCE = FfiConverterTypeLnUrlErrorData{}

func (c FfiConverterTypeLnUrlErrorData) lift(cRustBuf C.RustBuffer) (LnUrlErrorData, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[LnUrlErrorData](c, rustBuffer)
}

func (c FfiConverterTypeLnUrlErrorData) read(reader io.Reader) (LnUrlErrorData, error) {
	var _uniffiDefaultValue LnUrlErrorData
	_reason, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return LnUrlErrorData{
		Reason: _reason,
	}, nil
}

func (c FfiConverterTypeLnUrlErrorData) lower(value LnUrlErrorData) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[LnUrlErrorData](c, value)
	return _loweredValue
}

func (c FfiConverterTypeLnUrlErrorData) write(writer io.Writer, value LnUrlErrorData) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Reason); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeLnUrlErrorData struct{}

func (FfiDestroyerTypeLnUrlErrorData) destroy(value LnUrlErrorData) {
	value.Destroy()
}

type LnUrlPayRequestData struct {
	Callback       string
	MinSendable    uint64
	MaxSendable    uint64
	MetadataStr    string
	CommentAllowed uint16
	Domain         string
	LnAddress      *string
}

func (r *LnUrlPayRequestData) Destroy() {
	FfiDestroyerstring{}.destroy(r.Callback)
	FfiDestroyeruint64{}.destroy(r.MinSendable)
	FfiDestroyeruint64{}.destroy(r.MaxSendable)
	FfiDestroyerstring{}.destroy(r.MetadataStr)
	FfiDestroyeruint16{}.destroy(r.CommentAllowed)
	FfiDestroyerstring{}.destroy(r.Domain)
	FfiDestroyerOptionalstring{}.destroy(r.LnAddress)
}

type FfiConverterTypeLnUrlPayRequestData struct{}

var FfiConverterTypeLnUrlPayRequestDataINSTANCE = FfiConverterTypeLnUrlPayRequestData{}

func (c FfiConverterTypeLnUrlPayRequestData) lift(cRustBuf C.RustBuffer) (LnUrlPayRequestData, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[LnUrlPayRequestData](c, rustBuffer)
}

func (c FfiConverterTypeLnUrlPayRequestData) read(reader io.Reader) (LnUrlPayRequestData, error) {
	var _uniffiDefaultValue LnUrlPayRequestData
	_callback, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_minSendable, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_maxSendable, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_metadataStr, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_commentAllowed, err := FfiConverteruint16INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_domain, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_lnAddress, err := FfiConverterOptionalstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return LnUrlPayRequestData{
		Callback:       _callback,
		MinSendable:    _minSendable,
		MaxSendable:    _maxSendable,
		MetadataStr:    _metadataStr,
		CommentAllowed: _commentAllowed,
		Domain:         _domain,
		LnAddress:      _lnAddress,
	}, nil
}

func (c FfiConverterTypeLnUrlPayRequestData) lower(value LnUrlPayRequestData) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[LnUrlPayRequestData](c, value)
	return _loweredValue
}

func (c FfiConverterTypeLnUrlPayRequestData) write(writer io.Writer, value LnUrlPayRequestData) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Callback); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.MinSendable); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.MaxSendable); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.MetadataStr); err != nil {
		return err
	}
	if err := FfiConverteruint16INSTANCE.write(writer, value.CommentAllowed); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.Domain); err != nil {
		return err
	}
	if err := FfiConverterOptionalstringINSTANCE.write(writer, value.LnAddress); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeLnUrlPayRequestData struct{}

func (FfiDestroyerTypeLnUrlPayRequestData) destroy(value LnUrlPayRequestData) {
	value.Destroy()
}

type LnUrlWithdrawRequestData struct {
	Callback           string
	K1                 string
	DefaultDescription string
	MinWithdrawable    uint64
	MaxWithdrawable    uint64
}

func (r *LnUrlWithdrawRequestData) Destroy() {
	FfiDestroyerstring{}.destroy(r.Callback)
	FfiDestroyerstring{}.destroy(r.K1)
	FfiDestroyerstring{}.destroy(r.DefaultDescription)
	FfiDestroyeruint64{}.destroy(r.MinWithdrawable)
	FfiDestroyeruint64{}.destroy(r.MaxWithdrawable)
}

type FfiConverterTypeLnUrlWithdrawRequestData struct{}

var FfiConverterTypeLnUrlWithdrawRequestDataINSTANCE = FfiConverterTypeLnUrlWithdrawRequestData{}

func (c FfiConverterTypeLnUrlWithdrawRequestData) lift(cRustBuf C.RustBuffer) (LnUrlWithdrawRequestData, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[LnUrlWithdrawRequestData](c, rustBuffer)
}

func (c FfiConverterTypeLnUrlWithdrawRequestData) read(reader io.Reader) (LnUrlWithdrawRequestData, error) {
	var _uniffiDefaultValue LnUrlWithdrawRequestData
	_callback, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_k1, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_defaultDescription, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_minWithdrawable, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_maxWithdrawable, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return LnUrlWithdrawRequestData{
		Callback:           _callback,
		K1:                 _k1,
		DefaultDescription: _defaultDescription,
		MinWithdrawable:    _minWithdrawable,
		MaxWithdrawable:    _maxWithdrawable,
	}, nil
}

func (c FfiConverterTypeLnUrlWithdrawRequestData) lower(value LnUrlWithdrawRequestData) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[LnUrlWithdrawRequestData](c, value)
	return _loweredValue
}

func (c FfiConverterTypeLnUrlWithdrawRequestData) write(writer io.Writer, value LnUrlWithdrawRequestData) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Callback); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.K1); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.DefaultDescription); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.MinWithdrawable); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.MaxWithdrawable); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeLnUrlWithdrawRequestData struct{}

func (FfiDestroyerTypeLnUrlWithdrawRequestData) destroy(value LnUrlWithdrawRequestData) {
	value.Destroy()
}

type LocaleOverrides struct {
	Locale  string
	Spacing *uint32
	Symbol  Symbol
}

func (r *LocaleOverrides) Destroy() {
	FfiDestroyerstring{}.destroy(r.Locale)
	FfiDestroyerOptionaluint32{}.destroy(r.Spacing)
	FfiDestroyerTypeSymbol{}.destroy(r.Symbol)
}

type FfiConverterTypeLocaleOverrides struct{}

var FfiConverterTypeLocaleOverridesINSTANCE = FfiConverterTypeLocaleOverrides{}

func (c FfiConverterTypeLocaleOverrides) lift(cRustBuf C.RustBuffer) (LocaleOverrides, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[LocaleOverrides](c, rustBuffer)
}

func (c FfiConverterTypeLocaleOverrides) read(reader io.Reader) (LocaleOverrides, error) {
	var _uniffiDefaultValue LocaleOverrides
	_locale, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_spacing, err := FfiConverterOptionaluint32INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_symbol, err := FfiConverterTypeSymbolINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return LocaleOverrides{
		Locale:  _locale,
		Spacing: _spacing,
		Symbol:  _symbol,
	}, nil
}

func (c FfiConverterTypeLocaleOverrides) lower(value LocaleOverrides) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[LocaleOverrides](c, value)
	return _loweredValue
}

func (c FfiConverterTypeLocaleOverrides) write(writer io.Writer, value LocaleOverrides) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Locale); err != nil {
		return err
	}
	if err := FfiConverterOptionaluint32INSTANCE.write(writer, value.Spacing); err != nil {
		return err
	}
	if err := FfiConverterTypeSymbolINSTANCE.write(writer, value.Symbol); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeLocaleOverrides struct{}

func (FfiDestroyerTypeLocaleOverrides) destroy(value LocaleOverrides) {
	value.Destroy()
}

type LocalizedName struct {
	Locale string
	Name   string
}

func (r *LocalizedName) Destroy() {
	FfiDestroyerstring{}.destroy(r.Locale)
	FfiDestroyerstring{}.destroy(r.Name)
}

type FfiConverterTypeLocalizedName struct{}

var FfiConverterTypeLocalizedNameINSTANCE = FfiConverterTypeLocalizedName{}

func (c FfiConverterTypeLocalizedName) lift(cRustBuf C.RustBuffer) (LocalizedName, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[LocalizedName](c, rustBuffer)
}

func (c FfiConverterTypeLocalizedName) read(reader io.Reader) (LocalizedName, error) {
	var _uniffiDefaultValue LocalizedName
	_locale, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_name, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return LocalizedName{
		Locale: _locale,
		Name:   _name,
	}, nil
}

func (c FfiConverterTypeLocalizedName) lower(value LocalizedName) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[LocalizedName](c, value)
	return _loweredValue
}

func (c FfiConverterTypeLocalizedName) write(writer io.Writer, value LocalizedName) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Locale); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.Name); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeLocalizedName struct{}

func (FfiDestroyerTypeLocalizedName) destroy(value LocalizedName) {
	value.Destroy()
}

type LogEntry struct {
	Line  string
	Level string
}

func (r *LogEntry) Destroy() {
	FfiDestroyerstring{}.destroy(r.Line)
	FfiDestroyerstring{}.destroy(r.Level)
}

type FfiConverterTypeLogEntry struct{}

var FfiConverterTypeLogEntryINSTANCE = FfiConverterTypeLogEntry{}

func (c FfiConverterTypeLogEntry) lift(cRustBuf C.RustBuffer) (LogEntry, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[LogEntry](c, rustBuffer)
}

func (c FfiConverterTypeLogEntry) read(reader io.Reader) (LogEntry, error) {
	var _uniffiDefaultValue LogEntry
	_line, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_level, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return LogEntry{
		Line:  _line,
		Level: _level,
	}, nil
}

func (c FfiConverterTypeLogEntry) lower(value LogEntry) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[LogEntry](c, value)
	return _loweredValue
}

func (c FfiConverterTypeLogEntry) write(writer io.Writer, value LogEntry) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Line); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.Level); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeLogEntry struct{}

func (FfiDestroyerTypeLogEntry) destroy(value LogEntry) {
	value.Destroy()
}

type LspInformation struct {
	Id                   string
	Name                 string
	WidgetUrl            string
	Pubkey               string
	Host                 string
	ChannelCapacity      int64
	TargetConf           int32
	BaseFeeMsat          int64
	FeeRate              float64
	TimeLockDelta        uint32
	MinHtlcMsat          int64
	LspPubkey            []uint8
	OpeningFeeParamsList OpeningFeeParamsMenu
}

func (r *LspInformation) Destroy() {
	FfiDestroyerstring{}.destroy(r.Id)
	FfiDestroyerstring{}.destroy(r.Name)
	FfiDestroyerstring{}.destroy(r.WidgetUrl)
	FfiDestroyerstring{}.destroy(r.Pubkey)
	FfiDestroyerstring{}.destroy(r.Host)
	FfiDestroyerint64{}.destroy(r.ChannelCapacity)
	FfiDestroyerint32{}.destroy(r.TargetConf)
	FfiDestroyerint64{}.destroy(r.BaseFeeMsat)
	FfiDestroyerfloat64{}.destroy(r.FeeRate)
	FfiDestroyeruint32{}.destroy(r.TimeLockDelta)
	FfiDestroyerint64{}.destroy(r.MinHtlcMsat)
	FfiDestroyerSequenceuint8{}.destroy(r.LspPubkey)
	FfiDestroyerTypeOpeningFeeParamsMenu{}.destroy(r.OpeningFeeParamsList)
}

type FfiConverterTypeLspInformation struct{}

var FfiConverterTypeLspInformationINSTANCE = FfiConverterTypeLspInformation{}

func (c FfiConverterTypeLspInformation) lift(cRustBuf C.RustBuffer) (LspInformation, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[LspInformation](c, rustBuffer)
}

func (c FfiConverterTypeLspInformation) read(reader io.Reader) (LspInformation, error) {
	var _uniffiDefaultValue LspInformation
	_id, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_name, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_widgetUrl, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_pubkey, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_host, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_channelCapacity, err := FfiConverterint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_targetConf, err := FfiConverterint32INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_baseFeeMsat, err := FfiConverterint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_feeRate, err := FfiConverterfloat64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_timeLockDelta, err := FfiConverteruint32INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_minHtlcMsat, err := FfiConverterint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_lspPubkey, err := FfiConverterSequenceuint8INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_openingFeeParamsList, err := FfiConverterTypeOpeningFeeParamsMenuINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return LspInformation{
		Id:                   _id,
		Name:                 _name,
		WidgetUrl:            _widgetUrl,
		Pubkey:               _pubkey,
		Host:                 _host,
		ChannelCapacity:      _channelCapacity,
		TargetConf:           _targetConf,
		BaseFeeMsat:          _baseFeeMsat,
		FeeRate:              _feeRate,
		TimeLockDelta:        _timeLockDelta,
		MinHtlcMsat:          _minHtlcMsat,
		LspPubkey:            _lspPubkey,
		OpeningFeeParamsList: _openingFeeParamsList,
	}, nil
}

func (c FfiConverterTypeLspInformation) lower(value LspInformation) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[LspInformation](c, value)
	return _loweredValue
}

func (c FfiConverterTypeLspInformation) write(writer io.Writer, value LspInformation) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Id); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.Name); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.WidgetUrl); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.Pubkey); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.Host); err != nil {
		return err
	}
	if err := FfiConverterint64INSTANCE.write(writer, value.ChannelCapacity); err != nil {
		return err
	}
	if err := FfiConverterint32INSTANCE.write(writer, value.TargetConf); err != nil {
		return err
	}
	if err := FfiConverterint64INSTANCE.write(writer, value.BaseFeeMsat); err != nil {
		return err
	}
	if err := FfiConverterfloat64INSTANCE.write(writer, value.FeeRate); err != nil {
		return err
	}
	if err := FfiConverteruint32INSTANCE.write(writer, value.TimeLockDelta); err != nil {
		return err
	}
	if err := FfiConverterint64INSTANCE.write(writer, value.MinHtlcMsat); err != nil {
		return err
	}
	if err := FfiConverterSequenceuint8INSTANCE.write(writer, value.LspPubkey); err != nil {
		return err
	}
	if err := FfiConverterTypeOpeningFeeParamsMenuINSTANCE.write(writer, value.OpeningFeeParamsList); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeLspInformation struct{}

func (FfiDestroyerTypeLspInformation) destroy(value LspInformation) {
	value.Destroy()
}

type MessageSuccessActionData struct {
	Message string
}

func (r *MessageSuccessActionData) Destroy() {
	FfiDestroyerstring{}.destroy(r.Message)
}

type FfiConverterTypeMessageSuccessActionData struct{}

var FfiConverterTypeMessageSuccessActionDataINSTANCE = FfiConverterTypeMessageSuccessActionData{}

func (c FfiConverterTypeMessageSuccessActionData) lift(cRustBuf C.RustBuffer) (MessageSuccessActionData, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[MessageSuccessActionData](c, rustBuffer)
}

func (c FfiConverterTypeMessageSuccessActionData) read(reader io.Reader) (MessageSuccessActionData, error) {
	var _uniffiDefaultValue MessageSuccessActionData
	_message, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return MessageSuccessActionData{
		Message: _message,
	}, nil
}

func (c FfiConverterTypeMessageSuccessActionData) lower(value MessageSuccessActionData) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[MessageSuccessActionData](c, value)
	return _loweredValue
}

func (c FfiConverterTypeMessageSuccessActionData) write(writer io.Writer, value MessageSuccessActionData) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Message); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeMessageSuccessActionData struct{}

func (FfiDestroyerTypeMessageSuccessActionData) destroy(value MessageSuccessActionData) {
	value.Destroy()
}

type MetadataItem struct {
	Key   string
	Value string
}

func (r *MetadataItem) Destroy() {
	FfiDestroyerstring{}.destroy(r.Key)
	FfiDestroyerstring{}.destroy(r.Value)
}

type FfiConverterTypeMetadataItem struct{}

var FfiConverterTypeMetadataItemINSTANCE = FfiConverterTypeMetadataItem{}

func (c FfiConverterTypeMetadataItem) lift(cRustBuf C.RustBuffer) (MetadataItem, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[MetadataItem](c, rustBuffer)
}

func (c FfiConverterTypeMetadataItem) read(reader io.Reader) (MetadataItem, error) {
	var _uniffiDefaultValue MetadataItem
	_key, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_value, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return MetadataItem{
		Key:   _key,
		Value: _value,
	}, nil
}

func (c FfiConverterTypeMetadataItem) lower(value MetadataItem) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[MetadataItem](c, value)
	return _loweredValue
}

func (c FfiConverterTypeMetadataItem) write(writer io.Writer, value MetadataItem) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Key); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.Value); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeMetadataItem struct{}

func (FfiDestroyerTypeMetadataItem) destroy(value MetadataItem) {
	value.Destroy()
}

type NodeState struct {
	Id                         string
	BlockHeight                uint32
	ChannelsBalanceMsat        uint64
	OnchainBalanceMsat         uint64
	Utxos                      []UnspentTransactionOutput
	MaxPayableMsat             uint64
	MaxReceivableMsat          uint64
	MaxSinglePaymentAmountMsat uint64
	MaxChanReserveMsats        uint64
	ConnectedPeers             []string
	InboundLiquidityMsats      uint64
}

func (r *NodeState) Destroy() {
	FfiDestroyerstring{}.destroy(r.Id)
	FfiDestroyeruint32{}.destroy(r.BlockHeight)
	FfiDestroyeruint64{}.destroy(r.ChannelsBalanceMsat)
	FfiDestroyeruint64{}.destroy(r.OnchainBalanceMsat)
	FfiDestroyerSequenceTypeUnspentTransactionOutput{}.destroy(r.Utxos)
	FfiDestroyeruint64{}.destroy(r.MaxPayableMsat)
	FfiDestroyeruint64{}.destroy(r.MaxReceivableMsat)
	FfiDestroyeruint64{}.destroy(r.MaxSinglePaymentAmountMsat)
	FfiDestroyeruint64{}.destroy(r.MaxChanReserveMsats)
	FfiDestroyerSequencestring{}.destroy(r.ConnectedPeers)
	FfiDestroyeruint64{}.destroy(r.InboundLiquidityMsats)
}

type FfiConverterTypeNodeState struct{}

var FfiConverterTypeNodeStateINSTANCE = FfiConverterTypeNodeState{}

func (c FfiConverterTypeNodeState) lift(cRustBuf C.RustBuffer) (NodeState, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[NodeState](c, rustBuffer)
}

func (c FfiConverterTypeNodeState) read(reader io.Reader) (NodeState, error) {
	var _uniffiDefaultValue NodeState
	_id, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_blockHeight, err := FfiConverteruint32INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_channelsBalanceMsat, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_onchainBalanceMsat, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_utxos, err := FfiConverterSequenceTypeUnspentTransactionOutputINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_maxPayableMsat, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_maxReceivableMsat, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_maxSinglePaymentAmountMsat, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_maxChanReserveMsats, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_connectedPeers, err := FfiConverterSequencestringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_inboundLiquidityMsats, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return NodeState{
		Id:                         _id,
		BlockHeight:                _blockHeight,
		ChannelsBalanceMsat:        _channelsBalanceMsat,
		OnchainBalanceMsat:         _onchainBalanceMsat,
		Utxos:                      _utxos,
		MaxPayableMsat:             _maxPayableMsat,
		MaxReceivableMsat:          _maxReceivableMsat,
		MaxSinglePaymentAmountMsat: _maxSinglePaymentAmountMsat,
		MaxChanReserveMsats:        _maxChanReserveMsats,
		ConnectedPeers:             _connectedPeers,
		InboundLiquidityMsats:      _inboundLiquidityMsats,
	}, nil
}

func (c FfiConverterTypeNodeState) lower(value NodeState) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[NodeState](c, value)
	return _loweredValue
}

func (c FfiConverterTypeNodeState) write(writer io.Writer, value NodeState) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Id); err != nil {
		return err
	}
	if err := FfiConverteruint32INSTANCE.write(writer, value.BlockHeight); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.ChannelsBalanceMsat); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.OnchainBalanceMsat); err != nil {
		return err
	}
	if err := FfiConverterSequenceTypeUnspentTransactionOutputINSTANCE.write(writer, value.Utxos); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.MaxPayableMsat); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.MaxReceivableMsat); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.MaxSinglePaymentAmountMsat); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.MaxChanReserveMsats); err != nil {
		return err
	}
	if err := FfiConverterSequencestringINSTANCE.write(writer, value.ConnectedPeers); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.InboundLiquidityMsats); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeNodeState struct{}

func (FfiDestroyerTypeNodeState) destroy(value NodeState) {
	value.Destroy()
}

type OpenChannelFeeRequest struct {
	AmountMsat uint64
	Expiry     *uint32
}

func (r *OpenChannelFeeRequest) Destroy() {
	FfiDestroyeruint64{}.destroy(r.AmountMsat)
	FfiDestroyerOptionaluint32{}.destroy(r.Expiry)
}

type FfiConverterTypeOpenChannelFeeRequest struct{}

var FfiConverterTypeOpenChannelFeeRequestINSTANCE = FfiConverterTypeOpenChannelFeeRequest{}

func (c FfiConverterTypeOpenChannelFeeRequest) lift(cRustBuf C.RustBuffer) (OpenChannelFeeRequest, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[OpenChannelFeeRequest](c, rustBuffer)
}

func (c FfiConverterTypeOpenChannelFeeRequest) read(reader io.Reader) (OpenChannelFeeRequest, error) {
	var _uniffiDefaultValue OpenChannelFeeRequest
	_amountMsat, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_expiry, err := FfiConverterOptionaluint32INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return OpenChannelFeeRequest{
		AmountMsat: _amountMsat,
		Expiry:     _expiry,
	}, nil
}

func (c FfiConverterTypeOpenChannelFeeRequest) lower(value OpenChannelFeeRequest) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[OpenChannelFeeRequest](c, value)
	return _loweredValue
}

func (c FfiConverterTypeOpenChannelFeeRequest) write(writer io.Writer, value OpenChannelFeeRequest) error {
	if err := FfiConverteruint64INSTANCE.write(writer, value.AmountMsat); err != nil {
		return err
	}
	if err := FfiConverterOptionaluint32INSTANCE.write(writer, value.Expiry); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeOpenChannelFeeRequest struct{}

func (FfiDestroyerTypeOpenChannelFeeRequest) destroy(value OpenChannelFeeRequest) {
	value.Destroy()
}

type OpenChannelFeeResponse struct {
	FeeMsat       uint64
	UsedFeeParams *OpeningFeeParams
}

func (r *OpenChannelFeeResponse) Destroy() {
	FfiDestroyeruint64{}.destroy(r.FeeMsat)
	FfiDestroyerOptionalTypeOpeningFeeParams{}.destroy(r.UsedFeeParams)
}

type FfiConverterTypeOpenChannelFeeResponse struct{}

var FfiConverterTypeOpenChannelFeeResponseINSTANCE = FfiConverterTypeOpenChannelFeeResponse{}

func (c FfiConverterTypeOpenChannelFeeResponse) lift(cRustBuf C.RustBuffer) (OpenChannelFeeResponse, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[OpenChannelFeeResponse](c, rustBuffer)
}

func (c FfiConverterTypeOpenChannelFeeResponse) read(reader io.Reader) (OpenChannelFeeResponse, error) {
	var _uniffiDefaultValue OpenChannelFeeResponse
	_feeMsat, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_usedFeeParams, err := FfiConverterOptionalTypeOpeningFeeParamsINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return OpenChannelFeeResponse{
		FeeMsat:       _feeMsat,
		UsedFeeParams: _usedFeeParams,
	}, nil
}

func (c FfiConverterTypeOpenChannelFeeResponse) lower(value OpenChannelFeeResponse) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[OpenChannelFeeResponse](c, value)
	return _loweredValue
}

func (c FfiConverterTypeOpenChannelFeeResponse) write(writer io.Writer, value OpenChannelFeeResponse) error {
	if err := FfiConverteruint64INSTANCE.write(writer, value.FeeMsat); err != nil {
		return err
	}
	if err := FfiConverterOptionalTypeOpeningFeeParamsINSTANCE.write(writer, value.UsedFeeParams); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeOpenChannelFeeResponse struct{}

func (FfiDestroyerTypeOpenChannelFeeResponse) destroy(value OpenChannelFeeResponse) {
	value.Destroy()
}

type OpeningFeeParams struct {
	MinMsat              uint64
	Proportional         uint32
	ValidUntil           string
	MaxIdleTime          uint32
	MaxClientToSelfDelay uint32
	Promise              string
}

func (r *OpeningFeeParams) Destroy() {
	FfiDestroyeruint64{}.destroy(r.MinMsat)
	FfiDestroyeruint32{}.destroy(r.Proportional)
	FfiDestroyerstring{}.destroy(r.ValidUntil)
	FfiDestroyeruint32{}.destroy(r.MaxIdleTime)
	FfiDestroyeruint32{}.destroy(r.MaxClientToSelfDelay)
	FfiDestroyerstring{}.destroy(r.Promise)
}

type FfiConverterTypeOpeningFeeParams struct{}

var FfiConverterTypeOpeningFeeParamsINSTANCE = FfiConverterTypeOpeningFeeParams{}

func (c FfiConverterTypeOpeningFeeParams) lift(cRustBuf C.RustBuffer) (OpeningFeeParams, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[OpeningFeeParams](c, rustBuffer)
}

func (c FfiConverterTypeOpeningFeeParams) read(reader io.Reader) (OpeningFeeParams, error) {
	var _uniffiDefaultValue OpeningFeeParams
	_minMsat, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_proportional, err := FfiConverteruint32INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_validUntil, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_maxIdleTime, err := FfiConverteruint32INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_maxClientToSelfDelay, err := FfiConverteruint32INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_promise, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return OpeningFeeParams{
		MinMsat:              _minMsat,
		Proportional:         _proportional,
		ValidUntil:           _validUntil,
		MaxIdleTime:          _maxIdleTime,
		MaxClientToSelfDelay: _maxClientToSelfDelay,
		Promise:              _promise,
	}, nil
}

func (c FfiConverterTypeOpeningFeeParams) lower(value OpeningFeeParams) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[OpeningFeeParams](c, value)
	return _loweredValue
}

func (c FfiConverterTypeOpeningFeeParams) write(writer io.Writer, value OpeningFeeParams) error {
	if err := FfiConverteruint64INSTANCE.write(writer, value.MinMsat); err != nil {
		return err
	}
	if err := FfiConverteruint32INSTANCE.write(writer, value.Proportional); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.ValidUntil); err != nil {
		return err
	}
	if err := FfiConverteruint32INSTANCE.write(writer, value.MaxIdleTime); err != nil {
		return err
	}
	if err := FfiConverteruint32INSTANCE.write(writer, value.MaxClientToSelfDelay); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.Promise); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeOpeningFeeParams struct{}

func (FfiDestroyerTypeOpeningFeeParams) destroy(value OpeningFeeParams) {
	value.Destroy()
}

type OpeningFeeParamsMenu struct {
	Values []OpeningFeeParams
}

func (r *OpeningFeeParamsMenu) Destroy() {
	FfiDestroyerSequenceTypeOpeningFeeParams{}.destroy(r.Values)
}

type FfiConverterTypeOpeningFeeParamsMenu struct{}

var FfiConverterTypeOpeningFeeParamsMenuINSTANCE = FfiConverterTypeOpeningFeeParamsMenu{}

func (c FfiConverterTypeOpeningFeeParamsMenu) lift(cRustBuf C.RustBuffer) (OpeningFeeParamsMenu, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[OpeningFeeParamsMenu](c, rustBuffer)
}

func (c FfiConverterTypeOpeningFeeParamsMenu) read(reader io.Reader) (OpeningFeeParamsMenu, error) {
	var _uniffiDefaultValue OpeningFeeParamsMenu
	_values, err := FfiConverterSequenceTypeOpeningFeeParamsINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return OpeningFeeParamsMenu{
		Values: _values,
	}, nil
}

func (c FfiConverterTypeOpeningFeeParamsMenu) lower(value OpeningFeeParamsMenu) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[OpeningFeeParamsMenu](c, value)
	return _loweredValue
}

func (c FfiConverterTypeOpeningFeeParamsMenu) write(writer io.Writer, value OpeningFeeParamsMenu) error {
	if err := FfiConverterSequenceTypeOpeningFeeParamsINSTANCE.write(writer, value.Values); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeOpeningFeeParamsMenu struct{}

func (FfiDestroyerTypeOpeningFeeParamsMenu) destroy(value OpeningFeeParamsMenu) {
	value.Destroy()
}

type Payment struct {
	Id          string
	PaymentType PaymentType
	PaymentTime int64
	AmountMsat  uint64
	FeeMsat     uint64
	Pending     bool
	Description *string
	Details     PaymentDetails
}

func (r *Payment) Destroy() {
	FfiDestroyerstring{}.destroy(r.Id)
	FfiDestroyerTypePaymentType{}.destroy(r.PaymentType)
	FfiDestroyerint64{}.destroy(r.PaymentTime)
	FfiDestroyeruint64{}.destroy(r.AmountMsat)
	FfiDestroyeruint64{}.destroy(r.FeeMsat)
	FfiDestroyerbool{}.destroy(r.Pending)
	FfiDestroyerOptionalstring{}.destroy(r.Description)
	FfiDestroyerTypePaymentDetails{}.destroy(r.Details)
}

type FfiConverterTypePayment struct{}

var FfiConverterTypePaymentINSTANCE = FfiConverterTypePayment{}

func (c FfiConverterTypePayment) lift(cRustBuf C.RustBuffer) (Payment, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[Payment](c, rustBuffer)
}

func (c FfiConverterTypePayment) read(reader io.Reader) (Payment, error) {
	var _uniffiDefaultValue Payment
	_id, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_paymentType, err := FfiConverterTypePaymentTypeINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_paymentTime, err := FfiConverterint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_amountMsat, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_feeMsat, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_pending, err := FfiConverterboolINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_description, err := FfiConverterOptionalstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_details, err := FfiConverterTypePaymentDetailsINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return Payment{
		Id:          _id,
		PaymentType: _paymentType,
		PaymentTime: _paymentTime,
		AmountMsat:  _amountMsat,
		FeeMsat:     _feeMsat,
		Pending:     _pending,
		Description: _description,
		Details:     _details,
	}, nil
}

func (c FfiConverterTypePayment) lower(value Payment) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[Payment](c, value)
	return _loweredValue
}

func (c FfiConverterTypePayment) write(writer io.Writer, value Payment) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Id); err != nil {
		return err
	}
	if err := FfiConverterTypePaymentTypeINSTANCE.write(writer, value.PaymentType); err != nil {
		return err
	}
	if err := FfiConverterint64INSTANCE.write(writer, value.PaymentTime); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.AmountMsat); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.FeeMsat); err != nil {
		return err
	}
	if err := FfiConverterboolINSTANCE.write(writer, value.Pending); err != nil {
		return err
	}
	if err := FfiConverterOptionalstringINSTANCE.write(writer, value.Description); err != nil {
		return err
	}
	if err := FfiConverterTypePaymentDetailsINSTANCE.write(writer, value.Details); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypePayment struct{}

func (FfiDestroyerTypePayment) destroy(value Payment) {
	value.Destroy()
}

type PaymentFailedData struct {
	Error   string
	NodeId  string
	Invoice *LnInvoice
}

func (r *PaymentFailedData) Destroy() {
	FfiDestroyerstring{}.destroy(r.Error)
	FfiDestroyerstring{}.destroy(r.NodeId)
	FfiDestroyerOptionalTypeLnInvoice{}.destroy(r.Invoice)
}

type FfiConverterTypePaymentFailedData struct{}

var FfiConverterTypePaymentFailedDataINSTANCE = FfiConverterTypePaymentFailedData{}

func (c FfiConverterTypePaymentFailedData) lift(cRustBuf C.RustBuffer) (PaymentFailedData, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[PaymentFailedData](c, rustBuffer)
}

func (c FfiConverterTypePaymentFailedData) read(reader io.Reader) (PaymentFailedData, error) {
	var _uniffiDefaultValue PaymentFailedData
	_error, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_nodeId, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_invoice, err := FfiConverterOptionalTypeLnInvoiceINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return PaymentFailedData{
		Error:   _error,
		NodeId:  _nodeId,
		Invoice: _invoice,
	}, nil
}

func (c FfiConverterTypePaymentFailedData) lower(value PaymentFailedData) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[PaymentFailedData](c, value)
	return _loweredValue
}

func (c FfiConverterTypePaymentFailedData) write(writer io.Writer, value PaymentFailedData) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Error); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.NodeId); err != nil {
		return err
	}
	if err := FfiConverterOptionalTypeLnInvoiceINSTANCE.write(writer, value.Invoice); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypePaymentFailedData struct{}

func (FfiDestroyerTypePaymentFailedData) destroy(value PaymentFailedData) {
	value.Destroy()
}

type Rate struct {
	Coin  string
	Value float64
}

func (r *Rate) Destroy() {
	FfiDestroyerstring{}.destroy(r.Coin)
	FfiDestroyerfloat64{}.destroy(r.Value)
}

type FfiConverterTypeRate struct{}

var FfiConverterTypeRateINSTANCE = FfiConverterTypeRate{}

func (c FfiConverterTypeRate) lift(cRustBuf C.RustBuffer) (Rate, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[Rate](c, rustBuffer)
}

func (c FfiConverterTypeRate) read(reader io.Reader) (Rate, error) {
	var _uniffiDefaultValue Rate
	_coin, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_value, err := FfiConverterfloat64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return Rate{
		Coin:  _coin,
		Value: _value,
	}, nil
}

func (c FfiConverterTypeRate) lower(value Rate) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[Rate](c, value)
	return _loweredValue
}

func (c FfiConverterTypeRate) write(writer io.Writer, value Rate) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Coin); err != nil {
		return err
	}
	if err := FfiConverterfloat64INSTANCE.write(writer, value.Value); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeRate struct{}

func (FfiDestroyerTypeRate) destroy(value Rate) {
	value.Destroy()
}

type ReceiveOnchainRequest struct {
	OpeningFeeParams *OpeningFeeParams
}

func (r *ReceiveOnchainRequest) Destroy() {
	FfiDestroyerOptionalTypeOpeningFeeParams{}.destroy(r.OpeningFeeParams)
}

type FfiConverterTypeReceiveOnchainRequest struct{}

var FfiConverterTypeReceiveOnchainRequestINSTANCE = FfiConverterTypeReceiveOnchainRequest{}

func (c FfiConverterTypeReceiveOnchainRequest) lift(cRustBuf C.RustBuffer) (ReceiveOnchainRequest, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[ReceiveOnchainRequest](c, rustBuffer)
}

func (c FfiConverterTypeReceiveOnchainRequest) read(reader io.Reader) (ReceiveOnchainRequest, error) {
	var _uniffiDefaultValue ReceiveOnchainRequest
	_openingFeeParams, err := FfiConverterOptionalTypeOpeningFeeParamsINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return ReceiveOnchainRequest{
		OpeningFeeParams: _openingFeeParams,
	}, nil
}

func (c FfiConverterTypeReceiveOnchainRequest) lower(value ReceiveOnchainRequest) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[ReceiveOnchainRequest](c, value)
	return _loweredValue
}

func (c FfiConverterTypeReceiveOnchainRequest) write(writer io.Writer, value ReceiveOnchainRequest) error {
	if err := FfiConverterOptionalTypeOpeningFeeParamsINSTANCE.write(writer, value.OpeningFeeParams); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeReceiveOnchainRequest struct{}

func (FfiDestroyerTypeReceiveOnchainRequest) destroy(value ReceiveOnchainRequest) {
	value.Destroy()
}

type ReceivePaymentRequest struct {
	AmountSats         uint64
	Description        string
	Preimage           *[]uint8
	OpeningFeeParams   *OpeningFeeParams
	UseDescriptionHash *bool
	Expiry             *uint32
	Cltv               *uint32
}

func (r *ReceivePaymentRequest) Destroy() {
	FfiDestroyeruint64{}.destroy(r.AmountSats)
	FfiDestroyerstring{}.destroy(r.Description)
	FfiDestroyerOptionalSequenceuint8{}.destroy(r.Preimage)
	FfiDestroyerOptionalTypeOpeningFeeParams{}.destroy(r.OpeningFeeParams)
	FfiDestroyerOptionalbool{}.destroy(r.UseDescriptionHash)
	FfiDestroyerOptionaluint32{}.destroy(r.Expiry)
	FfiDestroyerOptionaluint32{}.destroy(r.Cltv)
}

type FfiConverterTypeReceivePaymentRequest struct{}

var FfiConverterTypeReceivePaymentRequestINSTANCE = FfiConverterTypeReceivePaymentRequest{}

func (c FfiConverterTypeReceivePaymentRequest) lift(cRustBuf C.RustBuffer) (ReceivePaymentRequest, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[ReceivePaymentRequest](c, rustBuffer)
}

func (c FfiConverterTypeReceivePaymentRequest) read(reader io.Reader) (ReceivePaymentRequest, error) {
	var _uniffiDefaultValue ReceivePaymentRequest
	_amountSats, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_description, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_preimage, err := FfiConverterOptionalSequenceuint8INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_openingFeeParams, err := FfiConverterOptionalTypeOpeningFeeParamsINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_useDescriptionHash, err := FfiConverterOptionalboolINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_expiry, err := FfiConverterOptionaluint32INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_cltv, err := FfiConverterOptionaluint32INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return ReceivePaymentRequest{
		AmountSats:         _amountSats,
		Description:        _description,
		Preimage:           _preimage,
		OpeningFeeParams:   _openingFeeParams,
		UseDescriptionHash: _useDescriptionHash,
		Expiry:             _expiry,
		Cltv:               _cltv,
	}, nil
}

func (c FfiConverterTypeReceivePaymentRequest) lower(value ReceivePaymentRequest) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[ReceivePaymentRequest](c, value)
	return _loweredValue
}

func (c FfiConverterTypeReceivePaymentRequest) write(writer io.Writer, value ReceivePaymentRequest) error {
	if err := FfiConverteruint64INSTANCE.write(writer, value.AmountSats); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.Description); err != nil {
		return err
	}
	if err := FfiConverterOptionalSequenceuint8INSTANCE.write(writer, value.Preimage); err != nil {
		return err
	}
	if err := FfiConverterOptionalTypeOpeningFeeParamsINSTANCE.write(writer, value.OpeningFeeParams); err != nil {
		return err
	}
	if err := FfiConverterOptionalboolINSTANCE.write(writer, value.UseDescriptionHash); err != nil {
		return err
	}
	if err := FfiConverterOptionaluint32INSTANCE.write(writer, value.Expiry); err != nil {
		return err
	}
	if err := FfiConverterOptionaluint32INSTANCE.write(writer, value.Cltv); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeReceivePaymentRequest struct{}

func (FfiDestroyerTypeReceivePaymentRequest) destroy(value ReceivePaymentRequest) {
	value.Destroy()
}

type ReceivePaymentResponse struct {
	LnInvoice        LnInvoice
	OpeningFeeParams *OpeningFeeParams
	OpeningFeeMsat   *uint64
}

func (r *ReceivePaymentResponse) Destroy() {
	FfiDestroyerTypeLnInvoice{}.destroy(r.LnInvoice)
	FfiDestroyerOptionalTypeOpeningFeeParams{}.destroy(r.OpeningFeeParams)
	FfiDestroyerOptionaluint64{}.destroy(r.OpeningFeeMsat)
}

type FfiConverterTypeReceivePaymentResponse struct{}

var FfiConverterTypeReceivePaymentResponseINSTANCE = FfiConverterTypeReceivePaymentResponse{}

func (c FfiConverterTypeReceivePaymentResponse) lift(cRustBuf C.RustBuffer) (ReceivePaymentResponse, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[ReceivePaymentResponse](c, rustBuffer)
}

func (c FfiConverterTypeReceivePaymentResponse) read(reader io.Reader) (ReceivePaymentResponse, error) {
	var _uniffiDefaultValue ReceivePaymentResponse
	_lnInvoice, err := FfiConverterTypeLnInvoiceINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_openingFeeParams, err := FfiConverterOptionalTypeOpeningFeeParamsINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_openingFeeMsat, err := FfiConverterOptionaluint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return ReceivePaymentResponse{
		LnInvoice:        _lnInvoice,
		OpeningFeeParams: _openingFeeParams,
		OpeningFeeMsat:   _openingFeeMsat,
	}, nil
}

func (c FfiConverterTypeReceivePaymentResponse) lower(value ReceivePaymentResponse) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[ReceivePaymentResponse](c, value)
	return _loweredValue
}

func (c FfiConverterTypeReceivePaymentResponse) write(writer io.Writer, value ReceivePaymentResponse) error {
	if err := FfiConverterTypeLnInvoiceINSTANCE.write(writer, value.LnInvoice); err != nil {
		return err
	}
	if err := FfiConverterOptionalTypeOpeningFeeParamsINSTANCE.write(writer, value.OpeningFeeParams); err != nil {
		return err
	}
	if err := FfiConverterOptionaluint64INSTANCE.write(writer, value.OpeningFeeMsat); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeReceivePaymentResponse struct{}

func (FfiDestroyerTypeReceivePaymentResponse) destroy(value ReceivePaymentResponse) {
	value.Destroy()
}

type RecommendedFees struct {
	FastestFee  uint64
	HalfHourFee uint64
	HourFee     uint64
	EconomyFee  uint64
	MinimumFee  uint64
}

func (r *RecommendedFees) Destroy() {
	FfiDestroyeruint64{}.destroy(r.FastestFee)
	FfiDestroyeruint64{}.destroy(r.HalfHourFee)
	FfiDestroyeruint64{}.destroy(r.HourFee)
	FfiDestroyeruint64{}.destroy(r.EconomyFee)
	FfiDestroyeruint64{}.destroy(r.MinimumFee)
}

type FfiConverterTypeRecommendedFees struct{}

var FfiConverterTypeRecommendedFeesINSTANCE = FfiConverterTypeRecommendedFees{}

func (c FfiConverterTypeRecommendedFees) lift(cRustBuf C.RustBuffer) (RecommendedFees, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[RecommendedFees](c, rustBuffer)
}

func (c FfiConverterTypeRecommendedFees) read(reader io.Reader) (RecommendedFees, error) {
	var _uniffiDefaultValue RecommendedFees
	_fastestFee, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_halfHourFee, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_hourFee, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_economyFee, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_minimumFee, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return RecommendedFees{
		FastestFee:  _fastestFee,
		HalfHourFee: _halfHourFee,
		HourFee:     _hourFee,
		EconomyFee:  _economyFee,
		MinimumFee:  _minimumFee,
	}, nil
}

func (c FfiConverterTypeRecommendedFees) lower(value RecommendedFees) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[RecommendedFees](c, value)
	return _loweredValue
}

func (c FfiConverterTypeRecommendedFees) write(writer io.Writer, value RecommendedFees) error {
	if err := FfiConverteruint64INSTANCE.write(writer, value.FastestFee); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.HalfHourFee); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.HourFee); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.EconomyFee); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.MinimumFee); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeRecommendedFees struct{}

func (FfiDestroyerTypeRecommendedFees) destroy(value RecommendedFees) {
	value.Destroy()
}

type ReverseSwapFeesRequest struct {
	SendAmountSat *uint64
}

func (r *ReverseSwapFeesRequest) Destroy() {
	FfiDestroyerOptionaluint64{}.destroy(r.SendAmountSat)
}

type FfiConverterTypeReverseSwapFeesRequest struct{}

var FfiConverterTypeReverseSwapFeesRequestINSTANCE = FfiConverterTypeReverseSwapFeesRequest{}

func (c FfiConverterTypeReverseSwapFeesRequest) lift(cRustBuf C.RustBuffer) (ReverseSwapFeesRequest, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[ReverseSwapFeesRequest](c, rustBuffer)
}

func (c FfiConverterTypeReverseSwapFeesRequest) read(reader io.Reader) (ReverseSwapFeesRequest, error) {
	var _uniffiDefaultValue ReverseSwapFeesRequest
	_sendAmountSat, err := FfiConverterOptionaluint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return ReverseSwapFeesRequest{
		SendAmountSat: _sendAmountSat,
	}, nil
}

func (c FfiConverterTypeReverseSwapFeesRequest) lower(value ReverseSwapFeesRequest) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[ReverseSwapFeesRequest](c, value)
	return _loweredValue
}

func (c FfiConverterTypeReverseSwapFeesRequest) write(writer io.Writer, value ReverseSwapFeesRequest) error {
	if err := FfiConverterOptionaluint64INSTANCE.write(writer, value.SendAmountSat); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeReverseSwapFeesRequest struct{}

func (FfiDestroyerTypeReverseSwapFeesRequest) destroy(value ReverseSwapFeesRequest) {
	value.Destroy()
}

type ReverseSwapInfo struct {
	Id               string
	ClaimPubkey      string
	OnchainAmountSat uint64
	Status           ReverseSwapStatus
}

func (r *ReverseSwapInfo) Destroy() {
	FfiDestroyerstring{}.destroy(r.Id)
	FfiDestroyerstring{}.destroy(r.ClaimPubkey)
	FfiDestroyeruint64{}.destroy(r.OnchainAmountSat)
	FfiDestroyerTypeReverseSwapStatus{}.destroy(r.Status)
}

type FfiConverterTypeReverseSwapInfo struct{}

var FfiConverterTypeReverseSwapInfoINSTANCE = FfiConverterTypeReverseSwapInfo{}

func (c FfiConverterTypeReverseSwapInfo) lift(cRustBuf C.RustBuffer) (ReverseSwapInfo, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[ReverseSwapInfo](c, rustBuffer)
}

func (c FfiConverterTypeReverseSwapInfo) read(reader io.Reader) (ReverseSwapInfo, error) {
	var _uniffiDefaultValue ReverseSwapInfo
	_id, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_claimPubkey, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_onchainAmountSat, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_status, err := FfiConverterTypeReverseSwapStatusINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return ReverseSwapInfo{
		Id:               _id,
		ClaimPubkey:      _claimPubkey,
		OnchainAmountSat: _onchainAmountSat,
		Status:           _status,
	}, nil
}

func (c FfiConverterTypeReverseSwapInfo) lower(value ReverseSwapInfo) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[ReverseSwapInfo](c, value)
	return _loweredValue
}

func (c FfiConverterTypeReverseSwapInfo) write(writer io.Writer, value ReverseSwapInfo) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Id); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.ClaimPubkey); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.OnchainAmountSat); err != nil {
		return err
	}
	if err := FfiConverterTypeReverseSwapStatusINSTANCE.write(writer, value.Status); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeReverseSwapInfo struct{}

func (FfiDestroyerTypeReverseSwapInfo) destroy(value ReverseSwapInfo) {
	value.Destroy()
}

type ReverseSwapPairInfo struct {
	Min                uint64
	Max                uint64
	FeesHash           string
	FeesPercentage     float64
	FeesLockup         uint64
	FeesClaim          uint64
	TotalEstimatedFees *uint64
}

func (r *ReverseSwapPairInfo) Destroy() {
	FfiDestroyeruint64{}.destroy(r.Min)
	FfiDestroyeruint64{}.destroy(r.Max)
	FfiDestroyerstring{}.destroy(r.FeesHash)
	FfiDestroyerfloat64{}.destroy(r.FeesPercentage)
	FfiDestroyeruint64{}.destroy(r.FeesLockup)
	FfiDestroyeruint64{}.destroy(r.FeesClaim)
	FfiDestroyerOptionaluint64{}.destroy(r.TotalEstimatedFees)
}

type FfiConverterTypeReverseSwapPairInfo struct{}

var FfiConverterTypeReverseSwapPairInfoINSTANCE = FfiConverterTypeReverseSwapPairInfo{}

func (c FfiConverterTypeReverseSwapPairInfo) lift(cRustBuf C.RustBuffer) (ReverseSwapPairInfo, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[ReverseSwapPairInfo](c, rustBuffer)
}

func (c FfiConverterTypeReverseSwapPairInfo) read(reader io.Reader) (ReverseSwapPairInfo, error) {
	var _uniffiDefaultValue ReverseSwapPairInfo
	_min, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_max, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_feesHash, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_feesPercentage, err := FfiConverterfloat64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_feesLockup, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_feesClaim, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_totalEstimatedFees, err := FfiConverterOptionaluint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return ReverseSwapPairInfo{
		Min:                _min,
		Max:                _max,
		FeesHash:           _feesHash,
		FeesPercentage:     _feesPercentage,
		FeesLockup:         _feesLockup,
		FeesClaim:          _feesClaim,
		TotalEstimatedFees: _totalEstimatedFees,
	}, nil
}

func (c FfiConverterTypeReverseSwapPairInfo) lower(value ReverseSwapPairInfo) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[ReverseSwapPairInfo](c, value)
	return _loweredValue
}

func (c FfiConverterTypeReverseSwapPairInfo) write(writer io.Writer, value ReverseSwapPairInfo) error {
	if err := FfiConverteruint64INSTANCE.write(writer, value.Min); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.Max); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.FeesHash); err != nil {
		return err
	}
	if err := FfiConverterfloat64INSTANCE.write(writer, value.FeesPercentage); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.FeesLockup); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.FeesClaim); err != nil {
		return err
	}
	if err := FfiConverterOptionaluint64INSTANCE.write(writer, value.TotalEstimatedFees); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeReverseSwapPairInfo struct{}

func (FfiDestroyerTypeReverseSwapPairInfo) destroy(value ReverseSwapPairInfo) {
	value.Destroy()
}

type RouteHint struct {
	Hops []RouteHintHop
}

func (r *RouteHint) Destroy() {
	FfiDestroyerSequenceTypeRouteHintHop{}.destroy(r.Hops)
}

type FfiConverterTypeRouteHint struct{}

var FfiConverterTypeRouteHintINSTANCE = FfiConverterTypeRouteHint{}

func (c FfiConverterTypeRouteHint) lift(cRustBuf C.RustBuffer) (RouteHint, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[RouteHint](c, rustBuffer)
}

func (c FfiConverterTypeRouteHint) read(reader io.Reader) (RouteHint, error) {
	var _uniffiDefaultValue RouteHint
	_hops, err := FfiConverterSequenceTypeRouteHintHopINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return RouteHint{
		Hops: _hops,
	}, nil
}

func (c FfiConverterTypeRouteHint) lower(value RouteHint) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[RouteHint](c, value)
	return _loweredValue
}

func (c FfiConverterTypeRouteHint) write(writer io.Writer, value RouteHint) error {
	if err := FfiConverterSequenceTypeRouteHintHopINSTANCE.write(writer, value.Hops); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeRouteHint struct{}

func (FfiDestroyerTypeRouteHint) destroy(value RouteHint) {
	value.Destroy()
}

type RouteHintHop struct {
	SrcNodeId                  string
	ShortChannelId             uint64
	FeesBaseMsat               uint32
	FeesProportionalMillionths uint32
	CltvExpiryDelta            uint64
	HtlcMinimumMsat            *uint64
	HtlcMaximumMsat            *uint64
}

func (r *RouteHintHop) Destroy() {
	FfiDestroyerstring{}.destroy(r.SrcNodeId)
	FfiDestroyeruint64{}.destroy(r.ShortChannelId)
	FfiDestroyeruint32{}.destroy(r.FeesBaseMsat)
	FfiDestroyeruint32{}.destroy(r.FeesProportionalMillionths)
	FfiDestroyeruint64{}.destroy(r.CltvExpiryDelta)
	FfiDestroyerOptionaluint64{}.destroy(r.HtlcMinimumMsat)
	FfiDestroyerOptionaluint64{}.destroy(r.HtlcMaximumMsat)
}

type FfiConverterTypeRouteHintHop struct{}

var FfiConverterTypeRouteHintHopINSTANCE = FfiConverterTypeRouteHintHop{}

func (c FfiConverterTypeRouteHintHop) lift(cRustBuf C.RustBuffer) (RouteHintHop, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[RouteHintHop](c, rustBuffer)
}

func (c FfiConverterTypeRouteHintHop) read(reader io.Reader) (RouteHintHop, error) {
	var _uniffiDefaultValue RouteHintHop
	_srcNodeId, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_shortChannelId, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_feesBaseMsat, err := FfiConverteruint32INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_feesProportionalMillionths, err := FfiConverteruint32INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_cltvExpiryDelta, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_htlcMinimumMsat, err := FfiConverterOptionaluint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_htlcMaximumMsat, err := FfiConverterOptionaluint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return RouteHintHop{
		SrcNodeId:                  _srcNodeId,
		ShortChannelId:             _shortChannelId,
		FeesBaseMsat:               _feesBaseMsat,
		FeesProportionalMillionths: _feesProportionalMillionths,
		CltvExpiryDelta:            _cltvExpiryDelta,
		HtlcMinimumMsat:            _htlcMinimumMsat,
		HtlcMaximumMsat:            _htlcMaximumMsat,
	}, nil
}

func (c FfiConverterTypeRouteHintHop) lower(value RouteHintHop) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[RouteHintHop](c, value)
	return _loweredValue
}

func (c FfiConverterTypeRouteHintHop) write(writer io.Writer, value RouteHintHop) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.SrcNodeId); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.ShortChannelId); err != nil {
		return err
	}
	if err := FfiConverteruint32INSTANCE.write(writer, value.FeesBaseMsat); err != nil {
		return err
	}
	if err := FfiConverteruint32INSTANCE.write(writer, value.FeesProportionalMillionths); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.CltvExpiryDelta); err != nil {
		return err
	}
	if err := FfiConverterOptionaluint64INSTANCE.write(writer, value.HtlcMinimumMsat); err != nil {
		return err
	}
	if err := FfiConverterOptionaluint64INSTANCE.write(writer, value.HtlcMaximumMsat); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeRouteHintHop struct{}

func (FfiDestroyerTypeRouteHintHop) destroy(value RouteHintHop) {
	value.Destroy()
}

type SignMessageRequest struct {
	Message string
}

func (r *SignMessageRequest) Destroy() {
	FfiDestroyerstring{}.destroy(r.Message)
}

type FfiConverterTypeSignMessageRequest struct{}

var FfiConverterTypeSignMessageRequestINSTANCE = FfiConverterTypeSignMessageRequest{}

func (c FfiConverterTypeSignMessageRequest) lift(cRustBuf C.RustBuffer) (SignMessageRequest, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[SignMessageRequest](c, rustBuffer)
}

func (c FfiConverterTypeSignMessageRequest) read(reader io.Reader) (SignMessageRequest, error) {
	var _uniffiDefaultValue SignMessageRequest
	_message, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return SignMessageRequest{
		Message: _message,
	}, nil
}

func (c FfiConverterTypeSignMessageRequest) lower(value SignMessageRequest) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[SignMessageRequest](c, value)
	return _loweredValue
}

func (c FfiConverterTypeSignMessageRequest) write(writer io.Writer, value SignMessageRequest) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Message); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeSignMessageRequest struct{}

func (FfiDestroyerTypeSignMessageRequest) destroy(value SignMessageRequest) {
	value.Destroy()
}

type SignMessageResponse struct {
	Signature string
}

func (r *SignMessageResponse) Destroy() {
	FfiDestroyerstring{}.destroy(r.Signature)
}

type FfiConverterTypeSignMessageResponse struct{}

var FfiConverterTypeSignMessageResponseINSTANCE = FfiConverterTypeSignMessageResponse{}

func (c FfiConverterTypeSignMessageResponse) lift(cRustBuf C.RustBuffer) (SignMessageResponse, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[SignMessageResponse](c, rustBuffer)
}

func (c FfiConverterTypeSignMessageResponse) read(reader io.Reader) (SignMessageResponse, error) {
	var _uniffiDefaultValue SignMessageResponse
	_signature, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return SignMessageResponse{
		Signature: _signature,
	}, nil
}

func (c FfiConverterTypeSignMessageResponse) lower(value SignMessageResponse) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[SignMessageResponse](c, value)
	return _loweredValue
}

func (c FfiConverterTypeSignMessageResponse) write(writer io.Writer, value SignMessageResponse) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Signature); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeSignMessageResponse struct{}

func (FfiDestroyerTypeSignMessageResponse) destroy(value SignMessageResponse) {
	value.Destroy()
}

type SwapInfo struct {
	BitcoinAddress     string
	CreatedAt          int64
	LockHeight         int64
	PaymentHash        []uint8
	Preimage           []uint8
	PrivateKey         []uint8
	PublicKey          []uint8
	SwapperPublicKey   []uint8
	Script             []uint8
	Bolt11             *string
	PaidSats           uint64
	UnconfirmedSats    uint64
	ConfirmedSats      uint64
	Status             SwapStatus
	RefundTxIds        []string
	UnconfirmedTxIds   []string
	ConfirmedTxIds     []string
	MinAllowedDeposit  int64
	MaxAllowedDeposit  int64
	LastRedeemError    *string
	ChannelOpeningFees *OpeningFeeParams
}

func (r *SwapInfo) Destroy() {
	FfiDestroyerstring{}.destroy(r.BitcoinAddress)
	FfiDestroyerint64{}.destroy(r.CreatedAt)
	FfiDestroyerint64{}.destroy(r.LockHeight)
	FfiDestroyerSequenceuint8{}.destroy(r.PaymentHash)
	FfiDestroyerSequenceuint8{}.destroy(r.Preimage)
	FfiDestroyerSequenceuint8{}.destroy(r.PrivateKey)
	FfiDestroyerSequenceuint8{}.destroy(r.PublicKey)
	FfiDestroyerSequenceuint8{}.destroy(r.SwapperPublicKey)
	FfiDestroyerSequenceuint8{}.destroy(r.Script)
	FfiDestroyerOptionalstring{}.destroy(r.Bolt11)
	FfiDestroyeruint64{}.destroy(r.PaidSats)
	FfiDestroyeruint64{}.destroy(r.UnconfirmedSats)
	FfiDestroyeruint64{}.destroy(r.ConfirmedSats)
	FfiDestroyerTypeSwapStatus{}.destroy(r.Status)
	FfiDestroyerSequencestring{}.destroy(r.RefundTxIds)
	FfiDestroyerSequencestring{}.destroy(r.UnconfirmedTxIds)
	FfiDestroyerSequencestring{}.destroy(r.ConfirmedTxIds)
	FfiDestroyerint64{}.destroy(r.MinAllowedDeposit)
	FfiDestroyerint64{}.destroy(r.MaxAllowedDeposit)
	FfiDestroyerOptionalstring{}.destroy(r.LastRedeemError)
	FfiDestroyerOptionalTypeOpeningFeeParams{}.destroy(r.ChannelOpeningFees)
}

type FfiConverterTypeSwapInfo struct{}

var FfiConverterTypeSwapInfoINSTANCE = FfiConverterTypeSwapInfo{}

func (c FfiConverterTypeSwapInfo) lift(cRustBuf C.RustBuffer) (SwapInfo, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[SwapInfo](c, rustBuffer)
}

func (c FfiConverterTypeSwapInfo) read(reader io.Reader) (SwapInfo, error) {
	var _uniffiDefaultValue SwapInfo
	_bitcoinAddress, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_createdAt, err := FfiConverterint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_lockHeight, err := FfiConverterint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_paymentHash, err := FfiConverterSequenceuint8INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_preimage, err := FfiConverterSequenceuint8INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_privateKey, err := FfiConverterSequenceuint8INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_publicKey, err := FfiConverterSequenceuint8INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_swapperPublicKey, err := FfiConverterSequenceuint8INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_script, err := FfiConverterSequenceuint8INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_bolt11, err := FfiConverterOptionalstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_paidSats, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_unconfirmedSats, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_confirmedSats, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_status, err := FfiConverterTypeSwapStatusINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_refundTxIds, err := FfiConverterSequencestringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_unconfirmedTxIds, err := FfiConverterSequencestringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_confirmedTxIds, err := FfiConverterSequencestringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_minAllowedDeposit, err := FfiConverterint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_maxAllowedDeposit, err := FfiConverterint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_lastRedeemError, err := FfiConverterOptionalstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_channelOpeningFees, err := FfiConverterOptionalTypeOpeningFeeParamsINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return SwapInfo{
		BitcoinAddress:     _bitcoinAddress,
		CreatedAt:          _createdAt,
		LockHeight:         _lockHeight,
		PaymentHash:        _paymentHash,
		Preimage:           _preimage,
		PrivateKey:         _privateKey,
		PublicKey:          _publicKey,
		SwapperPublicKey:   _swapperPublicKey,
		Script:             _script,
		Bolt11:             _bolt11,
		PaidSats:           _paidSats,
		UnconfirmedSats:    _unconfirmedSats,
		ConfirmedSats:      _confirmedSats,
		Status:             _status,
		RefundTxIds:        _refundTxIds,
		UnconfirmedTxIds:   _unconfirmedTxIds,
		ConfirmedTxIds:     _confirmedTxIds,
		MinAllowedDeposit:  _minAllowedDeposit,
		MaxAllowedDeposit:  _maxAllowedDeposit,
		LastRedeemError:    _lastRedeemError,
		ChannelOpeningFees: _channelOpeningFees,
	}, nil
}

func (c FfiConverterTypeSwapInfo) lower(value SwapInfo) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[SwapInfo](c, value)
	return _loweredValue
}

func (c FfiConverterTypeSwapInfo) write(writer io.Writer, value SwapInfo) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.BitcoinAddress); err != nil {
		return err
	}
	if err := FfiConverterint64INSTANCE.write(writer, value.CreatedAt); err != nil {
		return err
	}
	if err := FfiConverterint64INSTANCE.write(writer, value.LockHeight); err != nil {
		return err
	}
	if err := FfiConverterSequenceuint8INSTANCE.write(writer, value.PaymentHash); err != nil {
		return err
	}
	if err := FfiConverterSequenceuint8INSTANCE.write(writer, value.Preimage); err != nil {
		return err
	}
	if err := FfiConverterSequenceuint8INSTANCE.write(writer, value.PrivateKey); err != nil {
		return err
	}
	if err := FfiConverterSequenceuint8INSTANCE.write(writer, value.PublicKey); err != nil {
		return err
	}
	if err := FfiConverterSequenceuint8INSTANCE.write(writer, value.SwapperPublicKey); err != nil {
		return err
	}
	if err := FfiConverterSequenceuint8INSTANCE.write(writer, value.Script); err != nil {
		return err
	}
	if err := FfiConverterOptionalstringINSTANCE.write(writer, value.Bolt11); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.PaidSats); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.UnconfirmedSats); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.ConfirmedSats); err != nil {
		return err
	}
	if err := FfiConverterTypeSwapStatusINSTANCE.write(writer, value.Status); err != nil {
		return err
	}
	if err := FfiConverterSequencestringINSTANCE.write(writer, value.RefundTxIds); err != nil {
		return err
	}
	if err := FfiConverterSequencestringINSTANCE.write(writer, value.UnconfirmedTxIds); err != nil {
		return err
	}
	if err := FfiConverterSequencestringINSTANCE.write(writer, value.ConfirmedTxIds); err != nil {
		return err
	}
	if err := FfiConverterint64INSTANCE.write(writer, value.MinAllowedDeposit); err != nil {
		return err
	}
	if err := FfiConverterint64INSTANCE.write(writer, value.MaxAllowedDeposit); err != nil {
		return err
	}
	if err := FfiConverterOptionalstringINSTANCE.write(writer, value.LastRedeemError); err != nil {
		return err
	}
	if err := FfiConverterOptionalTypeOpeningFeeParamsINSTANCE.write(writer, value.ChannelOpeningFees); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeSwapInfo struct{}

func (FfiDestroyerTypeSwapInfo) destroy(value SwapInfo) {
	value.Destroy()
}

type Symbol struct {
	Grapheme *string
	Template *string
	Rtl      *bool
	Position *uint32
}

func (r *Symbol) Destroy() {
	FfiDestroyerOptionalstring{}.destroy(r.Grapheme)
	FfiDestroyerOptionalstring{}.destroy(r.Template)
	FfiDestroyerOptionalbool{}.destroy(r.Rtl)
	FfiDestroyerOptionaluint32{}.destroy(r.Position)
}

type FfiConverterTypeSymbol struct{}

var FfiConverterTypeSymbolINSTANCE = FfiConverterTypeSymbol{}

func (c FfiConverterTypeSymbol) lift(cRustBuf C.RustBuffer) (Symbol, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[Symbol](c, rustBuffer)
}

func (c FfiConverterTypeSymbol) read(reader io.Reader) (Symbol, error) {
	var _uniffiDefaultValue Symbol
	_grapheme, err := FfiConverterOptionalstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_template, err := FfiConverterOptionalstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_rtl, err := FfiConverterOptionalboolINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_position, err := FfiConverterOptionaluint32INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return Symbol{
		Grapheme: _grapheme,
		Template: _template,
		Rtl:      _rtl,
		Position: _position,
	}, nil
}

func (c FfiConverterTypeSymbol) lower(value Symbol) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[Symbol](c, value)
	return _loweredValue
}

func (c FfiConverterTypeSymbol) write(writer io.Writer, value Symbol) error {
	if err := FfiConverterOptionalstringINSTANCE.write(writer, value.Grapheme); err != nil {
		return err
	}
	if err := FfiConverterOptionalstringINSTANCE.write(writer, value.Template); err != nil {
		return err
	}
	if err := FfiConverterOptionalboolINSTANCE.write(writer, value.Rtl); err != nil {
		return err
	}
	if err := FfiConverterOptionaluint32INSTANCE.write(writer, value.Position); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeSymbol struct{}

func (FfiDestroyerTypeSymbol) destroy(value Symbol) {
	value.Destroy()
}

type UnspentTransactionOutput struct {
	Txid               []uint8
	Outnum             uint32
	AmountMillisatoshi uint64
	Address            string
	Reserved           bool
	ReservedToBlock    uint32
}

func (r *UnspentTransactionOutput) Destroy() {
	FfiDestroyerSequenceuint8{}.destroy(r.Txid)
	FfiDestroyeruint32{}.destroy(r.Outnum)
	FfiDestroyeruint64{}.destroy(r.AmountMillisatoshi)
	FfiDestroyerstring{}.destroy(r.Address)
	FfiDestroyerbool{}.destroy(r.Reserved)
	FfiDestroyeruint32{}.destroy(r.ReservedToBlock)
}

type FfiConverterTypeUnspentTransactionOutput struct{}

var FfiConverterTypeUnspentTransactionOutputINSTANCE = FfiConverterTypeUnspentTransactionOutput{}

func (c FfiConverterTypeUnspentTransactionOutput) lift(cRustBuf C.RustBuffer) (UnspentTransactionOutput, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[UnspentTransactionOutput](c, rustBuffer)
}

func (c FfiConverterTypeUnspentTransactionOutput) read(reader io.Reader) (UnspentTransactionOutput, error) {
	var _uniffiDefaultValue UnspentTransactionOutput
	_txid, err := FfiConverterSequenceuint8INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_outnum, err := FfiConverteruint32INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_amountMillisatoshi, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_address, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_reserved, err := FfiConverterboolINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_reservedToBlock, err := FfiConverteruint32INSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return UnspentTransactionOutput{
		Txid:               _txid,
		Outnum:             _outnum,
		AmountMillisatoshi: _amountMillisatoshi,
		Address:            _address,
		Reserved:           _reserved,
		ReservedToBlock:    _reservedToBlock,
	}, nil
}

func (c FfiConverterTypeUnspentTransactionOutput) lower(value UnspentTransactionOutput) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[UnspentTransactionOutput](c, value)
	return _loweredValue
}

func (c FfiConverterTypeUnspentTransactionOutput) write(writer io.Writer, value UnspentTransactionOutput) error {
	if err := FfiConverterSequenceuint8INSTANCE.write(writer, value.Txid); err != nil {
		return err
	}
	if err := FfiConverteruint32INSTANCE.write(writer, value.Outnum); err != nil {
		return err
	}
	if err := FfiConverteruint64INSTANCE.write(writer, value.AmountMillisatoshi); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.Address); err != nil {
		return err
	}
	if err := FfiConverterboolINSTANCE.write(writer, value.Reserved); err != nil {
		return err
	}
	if err := FfiConverteruint32INSTANCE.write(writer, value.ReservedToBlock); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeUnspentTransactionOutput struct{}

func (FfiDestroyerTypeUnspentTransactionOutput) destroy(value UnspentTransactionOutput) {
	value.Destroy()
}

type UrlSuccessActionData struct {
	Description string
	Url         string
}

func (r *UrlSuccessActionData) Destroy() {
	FfiDestroyerstring{}.destroy(r.Description)
	FfiDestroyerstring{}.destroy(r.Url)
}

type FfiConverterTypeUrlSuccessActionData struct{}

var FfiConverterTypeUrlSuccessActionDataINSTANCE = FfiConverterTypeUrlSuccessActionData{}

func (c FfiConverterTypeUrlSuccessActionData) lift(cRustBuf C.RustBuffer) (UrlSuccessActionData, error) {
	rustBuffer := fromCRustBuffer(cRustBuf)
	return liftFromRustBuffer[UrlSuccessActionData](c, rustBuffer)
}

func (c FfiConverterTypeUrlSuccessActionData) read(reader io.Reader) (UrlSuccessActionData, error) {
	var _uniffiDefaultValue UrlSuccessActionData
	_description, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	_url, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	return UrlSuccessActionData{
		Description: _description,
		Url:         _url,
	}, nil
}

func (c FfiConverterTypeUrlSuccessActionData) lower(value UrlSuccessActionData) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[UrlSuccessActionData](c, value)
	return _loweredValue
}

func (c FfiConverterTypeUrlSuccessActionData) write(writer io.Writer, value UrlSuccessActionData) error {
	if err := FfiConverterstringINSTANCE.write(writer, value.Description); err != nil {
		return err
	}
	if err := FfiConverterstringINSTANCE.write(writer, value.Url); err != nil {
		return err
	}
	return nil
}

type FfiDestroyerTypeUrlSuccessActionData struct{}

func (FfiDestroyerTypeUrlSuccessActionData) destroy(value UrlSuccessActionData) {
	value.Destroy()
}

type BreezEvent interface {
	Destroy()
}
type BreezEventNewBlock struct {
	Block uint32
}

func (e BreezEventNewBlock) Destroy() {
	FfiDestroyeruint32{}.destroy(e.Block)
}

type BreezEventInvoicePaid struct {
	Details InvoicePaidDetails
}

func (e BreezEventInvoicePaid) Destroy() {
	FfiDestroyerTypeInvoicePaidDetails{}.destroy(e.Details)
}

type BreezEventSynced struct {
}

func (e BreezEventSynced) Destroy() {
}

type BreezEventPaymentSucceed struct {
	Details Payment
}

func (e BreezEventPaymentSucceed) Destroy() {
	FfiDestroyerTypePayment{}.destroy(e.Details)
}

type BreezEventPaymentFailed struct {
	Details PaymentFailedData
}

func (e BreezEventPaymentFailed) Destroy() {
	FfiDestroyerTypePaymentFailedData{}.destroy(e.Details)
}

type BreezEventBackupStarted struct {
}

func (e BreezEventBackupStarted) Destroy() {
}

type BreezEventBackupSucceeded struct {
}

func (e BreezEventBackupSucceeded) Destroy() {
}

type BreezEventBackupFailed struct {
	Details BackupFailedData
}

func (e BreezEventBackupFailed) Destroy() {
	FfiDestroyerTypeBackupFailedData{}.destroy(e.Details)
}

type FfiConverterTypeBreezEvent struct{}

var FfiConverterTypeBreezEventINSTANCE = FfiConverterTypeBreezEvent{}

func (c FfiConverterTypeBreezEvent) lift(cRustBuf C.RustBuffer) (BreezEvent, error) {
	return liftFromRustBuffer[BreezEvent](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterTypeBreezEvent) lower(value BreezEvent) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[BreezEvent](c, value)
	return _loweredValue
}
func (FfiConverterTypeBreezEvent) read(reader io.Reader) (BreezEvent, error) {
	var _uniffiDefaultValue BreezEvent
	id, err := readInt32(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	switch id {
	case 1:
		_block, err := FfiConverteruint32INSTANCE.read(reader)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return BreezEventNewBlock{
			Block: _block,
		}, nil
	case 2:
		_details, err := FfiConverterTypeInvoicePaidDetailsINSTANCE.read(reader)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return BreezEventInvoicePaid{
			Details: _details,
		}, nil
	case 3:
		return BreezEventSynced{}, nil
	case 4:
		_details, err := FfiConverterTypePaymentINSTANCE.read(reader)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return BreezEventPaymentSucceed{
			Details: _details,
		}, nil
	case 5:
		_details, err := FfiConverterTypePaymentFailedDataINSTANCE.read(reader)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return BreezEventPaymentFailed{
			Details: _details,
		}, nil
	case 6:
		return BreezEventBackupStarted{}, nil
	case 7:
		return BreezEventBackupSucceeded{}, nil
	case 8:
		_details, err := FfiConverterTypeBackupFailedDataINSTANCE.read(reader)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return BreezEventBackupFailed{
			Details: _details,
		}, nil
	default:
		return nil, fmt.Errorf("invalid enum value %v in FfiConverterTypeBreezEvent.read()", id)
	}
}

func (FfiConverterTypeBreezEvent) write(writer io.Writer, value BreezEvent) error {
	switch variant_value := value.(type) {
	case BreezEventNewBlock:
		if err := writeInt32(writer, 1); err != nil {
			return err
		}
		if err := FfiConverteruint32INSTANCE.write(writer, variant_value.Block); err != nil {
			return err
		}
	case BreezEventInvoicePaid:
		if err := writeInt32(writer, 2); err != nil {
			return err
		}
		if err := FfiConverterTypeInvoicePaidDetailsINSTANCE.write(writer, variant_value.Details); err != nil {
			return err
		}
	case BreezEventSynced:
		if err := writeInt32(writer, 3); err != nil {
			return err
		}
	case BreezEventPaymentSucceed:
		if err := writeInt32(writer, 4); err != nil {
			return err
		}
		if err := FfiConverterTypePaymentINSTANCE.write(writer, variant_value.Details); err != nil {
			return err
		}
	case BreezEventPaymentFailed:
		if err := writeInt32(writer, 5); err != nil {
			return err
		}
		if err := FfiConverterTypePaymentFailedDataINSTANCE.write(writer, variant_value.Details); err != nil {
			return err
		}
	case BreezEventBackupStarted:
		if err := writeInt32(writer, 6); err != nil {
			return err
		}
	case BreezEventBackupSucceeded:
		if err := writeInt32(writer, 7); err != nil {
			return err
		}
	case BreezEventBackupFailed:
		if err := writeInt32(writer, 8); err != nil {
			return err
		}
		if err := FfiConverterTypeBackupFailedDataINSTANCE.write(writer, variant_value.Details); err != nil {
			return err
		}
	default:
		_ = variant_value
		return fmt.Errorf(fmt.Sprintf("invalid enum value `%v` in FfiConverterTypeBreezEvent.write", value))
	}
	return nil
}

type FfiDestroyerTypeBreezEvent struct{}

func (FfiDestroyerTypeBreezEvent) destroy(value BreezEvent) {
	value.Destroy()
}

type BuyBitcoinProvider uint

const (
	BuyBitcoinProviderMoonpay BuyBitcoinProvider = 1
)

type FfiConverterTypeBuyBitcoinProvider struct{}

var FfiConverterTypeBuyBitcoinProviderINSTANCE = FfiConverterTypeBuyBitcoinProvider{}

func (c FfiConverterTypeBuyBitcoinProvider) lift(cRustBuf C.RustBuffer) (BuyBitcoinProvider, error) {
	return liftFromRustBuffer[BuyBitcoinProvider](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterTypeBuyBitcoinProvider) lower(value BuyBitcoinProvider) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[BuyBitcoinProvider](c, value)
	return _loweredValue
}
func (FfiConverterTypeBuyBitcoinProvider) read(reader io.Reader) (BuyBitcoinProvider, error) {
	id, err := readInt32(reader)
	if err != nil {
		var _uniffiDefaultValue BuyBitcoinProvider
		return _uniffiDefaultValue, err
	}
	return BuyBitcoinProvider(id), nil
}

func (FfiConverterTypeBuyBitcoinProvider) write(writer io.Writer, value BuyBitcoinProvider) error {
	return writeInt32(writer, int32(value))
}

type FfiDestroyerTypeBuyBitcoinProvider struct{}

func (FfiDestroyerTypeBuyBitcoinProvider) destroy(value BuyBitcoinProvider) {
}

type ChannelState uint

const (
	ChannelStatePendingOpen  ChannelState = 1
	ChannelStateOpened       ChannelState = 2
	ChannelStatePendingClose ChannelState = 3
	ChannelStateClosed       ChannelState = 4
)

type FfiConverterTypeChannelState struct{}

var FfiConverterTypeChannelStateINSTANCE = FfiConverterTypeChannelState{}

func (c FfiConverterTypeChannelState) lift(cRustBuf C.RustBuffer) (ChannelState, error) {
	return liftFromRustBuffer[ChannelState](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterTypeChannelState) lower(value ChannelState) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[ChannelState](c, value)
	return _loweredValue
}
func (FfiConverterTypeChannelState) read(reader io.Reader) (ChannelState, error) {
	id, err := readInt32(reader)
	if err != nil {
		var _uniffiDefaultValue ChannelState
		return _uniffiDefaultValue, err
	}
	return ChannelState(id), nil
}

func (FfiConverterTypeChannelState) write(writer io.Writer, value ChannelState) error {
	return writeInt32(writer, int32(value))
}

type FfiDestroyerTypeChannelState struct{}

func (FfiDestroyerTypeChannelState) destroy(value ChannelState) {
}

type EnvironmentType uint

const (
	EnvironmentTypeProduction EnvironmentType = 1
	EnvironmentTypeStaging    EnvironmentType = 2
)

type FfiConverterTypeEnvironmentType struct{}

var FfiConverterTypeEnvironmentTypeINSTANCE = FfiConverterTypeEnvironmentType{}

func (c FfiConverterTypeEnvironmentType) lift(cRustBuf C.RustBuffer) (EnvironmentType, error) {
	return liftFromRustBuffer[EnvironmentType](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterTypeEnvironmentType) lower(value EnvironmentType) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[EnvironmentType](c, value)
	return _loweredValue
}
func (FfiConverterTypeEnvironmentType) read(reader io.Reader) (EnvironmentType, error) {
	id, err := readInt32(reader)
	if err != nil {
		var _uniffiDefaultValue EnvironmentType
		return _uniffiDefaultValue, err
	}
	return EnvironmentType(id), nil
}

func (FfiConverterTypeEnvironmentType) write(writer io.Writer, value EnvironmentType) error {
	return writeInt32(writer, int32(value))
}

type FfiDestroyerTypeEnvironmentType struct{}

func (FfiDestroyerTypeEnvironmentType) destroy(value EnvironmentType) {
}

type FeeratePreset uint

const (
	FeeratePresetRegular  FeeratePreset = 1
	FeeratePresetEconomy  FeeratePreset = 2
	FeeratePresetPriority FeeratePreset = 3
)

type FfiConverterTypeFeeratePreset struct{}

var FfiConverterTypeFeeratePresetINSTANCE = FfiConverterTypeFeeratePreset{}

func (c FfiConverterTypeFeeratePreset) lift(cRustBuf C.RustBuffer) (FeeratePreset, error) {
	return liftFromRustBuffer[FeeratePreset](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterTypeFeeratePreset) lower(value FeeratePreset) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[FeeratePreset](c, value)
	return _loweredValue
}
func (FfiConverterTypeFeeratePreset) read(reader io.Reader) (FeeratePreset, error) {
	id, err := readInt32(reader)
	if err != nil {
		var _uniffiDefaultValue FeeratePreset
		return _uniffiDefaultValue, err
	}
	return FeeratePreset(id), nil
}

func (FfiConverterTypeFeeratePreset) write(writer io.Writer, value FeeratePreset) error {
	return writeInt32(writer, int32(value))
}

type FfiDestroyerTypeFeeratePreset struct{}

func (FfiDestroyerTypeFeeratePreset) destroy(value FeeratePreset) {
}

type InputType interface {
	Destroy()
}
type InputTypeBitcoinAddress struct {
	Address BitcoinAddressData
}

func (e InputTypeBitcoinAddress) Destroy() {
	FfiDestroyerTypeBitcoinAddressData{}.destroy(e.Address)
}

type InputTypeBolt11 struct {
	Invoice LnInvoice
}

func (e InputTypeBolt11) Destroy() {
	FfiDestroyerTypeLnInvoice{}.destroy(e.Invoice)
}

type InputTypeNodeId struct {
	NodeId string
}

func (e InputTypeNodeId) Destroy() {
	FfiDestroyerstring{}.destroy(e.NodeId)
}

type InputTypeUrl struct {
	Url string
}

func (e InputTypeUrl) Destroy() {
	FfiDestroyerstring{}.destroy(e.Url)
}

type InputTypeLnUrlPay struct {
	Data LnUrlPayRequestData
}

func (e InputTypeLnUrlPay) Destroy() {
	FfiDestroyerTypeLnUrlPayRequestData{}.destroy(e.Data)
}

type InputTypeLnUrlWithdraw struct {
	Data LnUrlWithdrawRequestData
}

func (e InputTypeLnUrlWithdraw) Destroy() {
	FfiDestroyerTypeLnUrlWithdrawRequestData{}.destroy(e.Data)
}

type InputTypeLnUrlAuth struct {
	Data LnUrlAuthRequestData
}

func (e InputTypeLnUrlAuth) Destroy() {
	FfiDestroyerTypeLnUrlAuthRequestData{}.destroy(e.Data)
}

type InputTypeLnUrlError struct {
	Data LnUrlErrorData
}

func (e InputTypeLnUrlError) Destroy() {
	FfiDestroyerTypeLnUrlErrorData{}.destroy(e.Data)
}

type FfiConverterTypeInputType struct{}

var FfiConverterTypeInputTypeINSTANCE = FfiConverterTypeInputType{}

func (c FfiConverterTypeInputType) lift(cRustBuf C.RustBuffer) (InputType, error) {
	return liftFromRustBuffer[InputType](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterTypeInputType) lower(value InputType) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[InputType](c, value)
	return _loweredValue
}
func (FfiConverterTypeInputType) read(reader io.Reader) (InputType, error) {
	var _uniffiDefaultValue InputType
	id, err := readInt32(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	switch id {
	case 1:
		_address, err := FfiConverterTypeBitcoinAddressDataINSTANCE.read(reader)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return InputTypeBitcoinAddress{
			Address: _address,
		}, nil
	case 2:
		_invoice, err := FfiConverterTypeLnInvoiceINSTANCE.read(reader)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return InputTypeBolt11{
			Invoice: _invoice,
		}, nil
	case 3:
		_nodeId, err := FfiConverterstringINSTANCE.read(reader)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return InputTypeNodeId{
			NodeId: _nodeId,
		}, nil
	case 4:
		_url, err := FfiConverterstringINSTANCE.read(reader)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return InputTypeUrl{
			Url: _url,
		}, nil
	case 5:
		_data, err := FfiConverterTypeLnUrlPayRequestDataINSTANCE.read(reader)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return InputTypeLnUrlPay{
			Data: _data,
		}, nil
	case 6:
		_data, err := FfiConverterTypeLnUrlWithdrawRequestDataINSTANCE.read(reader)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return InputTypeLnUrlWithdraw{
			Data: _data,
		}, nil
	case 7:
		_data, err := FfiConverterTypeLnUrlAuthRequestDataINSTANCE.read(reader)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return InputTypeLnUrlAuth{
			Data: _data,
		}, nil
	case 8:
		_data, err := FfiConverterTypeLnUrlErrorDataINSTANCE.read(reader)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return InputTypeLnUrlError{
			Data: _data,
		}, nil
	default:
		return nil, fmt.Errorf("invalid enum value %v in FfiConverterTypeInputType.read()", id)
	}
}

func (FfiConverterTypeInputType) write(writer io.Writer, value InputType) error {
	switch variant_value := value.(type) {
	case InputTypeBitcoinAddress:
		if err := writeInt32(writer, 1); err != nil {
			return err
		}
		if err := FfiConverterTypeBitcoinAddressDataINSTANCE.write(writer, variant_value.Address); err != nil {
			return err
		}
	case InputTypeBolt11:
		if err := writeInt32(writer, 2); err != nil {
			return err
		}
		if err := FfiConverterTypeLnInvoiceINSTANCE.write(writer, variant_value.Invoice); err != nil {
			return err
		}
	case InputTypeNodeId:
		if err := writeInt32(writer, 3); err != nil {
			return err
		}
		if err := FfiConverterstringINSTANCE.write(writer, variant_value.NodeId); err != nil {
			return err
		}
	case InputTypeUrl:
		if err := writeInt32(writer, 4); err != nil {
			return err
		}
		if err := FfiConverterstringINSTANCE.write(writer, variant_value.Url); err != nil {
			return err
		}
	case InputTypeLnUrlPay:
		if err := writeInt32(writer, 5); err != nil {
			return err
		}
		if err := FfiConverterTypeLnUrlPayRequestDataINSTANCE.write(writer, variant_value.Data); err != nil {
			return err
		}
	case InputTypeLnUrlWithdraw:
		if err := writeInt32(writer, 6); err != nil {
			return err
		}
		if err := FfiConverterTypeLnUrlWithdrawRequestDataINSTANCE.write(writer, variant_value.Data); err != nil {
			return err
		}
	case InputTypeLnUrlAuth:
		if err := writeInt32(writer, 7); err != nil {
			return err
		}
		if err := FfiConverterTypeLnUrlAuthRequestDataINSTANCE.write(writer, variant_value.Data); err != nil {
			return err
		}
	case InputTypeLnUrlError:
		if err := writeInt32(writer, 8); err != nil {
			return err
		}
		if err := FfiConverterTypeLnUrlErrorDataINSTANCE.write(writer, variant_value.Data); err != nil {
			return err
		}
	default:
		_ = variant_value
		return fmt.Errorf(fmt.Sprintf("invalid enum value `%v` in FfiConverterTypeInputType.write", value))
	}
	return nil
}

type FfiDestroyerTypeInputType struct{}

func (FfiDestroyerTypeInputType) destroy(value InputType) {
	value.Destroy()
}

type LnUrlCallbackStatus interface {
	Destroy()
}
type LnUrlCallbackStatusOk struct {
}

func (e LnUrlCallbackStatusOk) Destroy() {
}

type LnUrlCallbackStatusErrorStatus struct {
	Data LnUrlErrorData
}

func (e LnUrlCallbackStatusErrorStatus) Destroy() {
	FfiDestroyerTypeLnUrlErrorData{}.destroy(e.Data)
}

type FfiConverterTypeLnUrlCallbackStatus struct{}

var FfiConverterTypeLnUrlCallbackStatusINSTANCE = FfiConverterTypeLnUrlCallbackStatus{}

func (c FfiConverterTypeLnUrlCallbackStatus) lift(cRustBuf C.RustBuffer) (LnUrlCallbackStatus, error) {
	return liftFromRustBuffer[LnUrlCallbackStatus](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterTypeLnUrlCallbackStatus) lower(value LnUrlCallbackStatus) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[LnUrlCallbackStatus](c, value)
	return _loweredValue
}
func (FfiConverterTypeLnUrlCallbackStatus) read(reader io.Reader) (LnUrlCallbackStatus, error) {
	var _uniffiDefaultValue LnUrlCallbackStatus
	id, err := readInt32(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	switch id {
	case 1:
		return LnUrlCallbackStatusOk{}, nil
	case 2:
		_data, err := FfiConverterTypeLnUrlErrorDataINSTANCE.read(reader)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return LnUrlCallbackStatusErrorStatus{
			Data: _data,
		}, nil
	default:
		return nil, fmt.Errorf("invalid enum value %v in FfiConverterTypeLnUrlCallbackStatus.read()", id)
	}
}

func (FfiConverterTypeLnUrlCallbackStatus) write(writer io.Writer, value LnUrlCallbackStatus) error {
	switch variant_value := value.(type) {
	case LnUrlCallbackStatusOk:
		if err := writeInt32(writer, 1); err != nil {
			return err
		}
	case LnUrlCallbackStatusErrorStatus:
		if err := writeInt32(writer, 2); err != nil {
			return err
		}
		if err := FfiConverterTypeLnUrlErrorDataINSTANCE.write(writer, variant_value.Data); err != nil {
			return err
		}
	default:
		_ = variant_value
		return fmt.Errorf(fmt.Sprintf("invalid enum value `%v` in FfiConverterTypeLnUrlCallbackStatus.write", value))
	}
	return nil
}

type FfiDestroyerTypeLnUrlCallbackStatus struct{}

func (FfiDestroyerTypeLnUrlCallbackStatus) destroy(value LnUrlCallbackStatus) {
	value.Destroy()
}

type LnUrlPayResult interface {
	Destroy()
}
type LnUrlPayResultEndpointSuccess struct {
	Data *SuccessActionProcessed
}

func (e LnUrlPayResultEndpointSuccess) Destroy() {
	FfiDestroyerOptionalTypeSuccessActionProcessed{}.destroy(e.Data)
}

type LnUrlPayResultEndpointError struct {
	Data LnUrlErrorData
}

func (e LnUrlPayResultEndpointError) Destroy() {
	FfiDestroyerTypeLnUrlErrorData{}.destroy(e.Data)
}

type FfiConverterTypeLnUrlPayResult struct{}

var FfiConverterTypeLnUrlPayResultINSTANCE = FfiConverterTypeLnUrlPayResult{}

func (c FfiConverterTypeLnUrlPayResult) lift(cRustBuf C.RustBuffer) (LnUrlPayResult, error) {
	return liftFromRustBuffer[LnUrlPayResult](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterTypeLnUrlPayResult) lower(value LnUrlPayResult) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[LnUrlPayResult](c, value)
	return _loweredValue
}
func (FfiConverterTypeLnUrlPayResult) read(reader io.Reader) (LnUrlPayResult, error) {
	var _uniffiDefaultValue LnUrlPayResult
	id, err := readInt32(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	switch id {
	case 1:
		_data, err := FfiConverterOptionalTypeSuccessActionProcessedINSTANCE.read(reader)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return LnUrlPayResultEndpointSuccess{
			Data: _data,
		}, nil
	case 2:
		_data, err := FfiConverterTypeLnUrlErrorDataINSTANCE.read(reader)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return LnUrlPayResultEndpointError{
			Data: _data,
		}, nil
	default:
		return nil, fmt.Errorf("invalid enum value %v in FfiConverterTypeLnUrlPayResult.read()", id)
	}
}

func (FfiConverterTypeLnUrlPayResult) write(writer io.Writer, value LnUrlPayResult) error {
	switch variant_value := value.(type) {
	case LnUrlPayResultEndpointSuccess:
		if err := writeInt32(writer, 1); err != nil {
			return err
		}
		if err := FfiConverterOptionalTypeSuccessActionProcessedINSTANCE.write(writer, variant_value.Data); err != nil {
			return err
		}
	case LnUrlPayResultEndpointError:
		if err := writeInt32(writer, 2); err != nil {
			return err
		}
		if err := FfiConverterTypeLnUrlErrorDataINSTANCE.write(writer, variant_value.Data); err != nil {
			return err
		}
	default:
		_ = variant_value
		return fmt.Errorf(fmt.Sprintf("invalid enum value `%v` in FfiConverterTypeLnUrlPayResult.write", value))
	}
	return nil
}

type FfiDestroyerTypeLnUrlPayResult struct{}

func (FfiDestroyerTypeLnUrlPayResult) destroy(value LnUrlPayResult) {
	value.Destroy()
}

type Network uint

const (
	NetworkBitcoin Network = 1
	NetworkTestnet Network = 2
	NetworkSignet  Network = 3
	NetworkRegtest Network = 4
)

type FfiConverterTypeNetwork struct{}

var FfiConverterTypeNetworkINSTANCE = FfiConverterTypeNetwork{}

func (c FfiConverterTypeNetwork) lift(cRustBuf C.RustBuffer) (Network, error) {
	return liftFromRustBuffer[Network](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterTypeNetwork) lower(value Network) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[Network](c, value)
	return _loweredValue
}
func (FfiConverterTypeNetwork) read(reader io.Reader) (Network, error) {
	id, err := readInt32(reader)
	if err != nil {
		var _uniffiDefaultValue Network
		return _uniffiDefaultValue, err
	}
	return Network(id), nil
}

func (FfiConverterTypeNetwork) write(writer io.Writer, value Network) error {
	return writeInt32(writer, int32(value))
}

type FfiDestroyerTypeNetwork struct{}

func (FfiDestroyerTypeNetwork) destroy(value Network) {
}

type NodeConfig interface {
	Destroy()
}
type NodeConfigGreenlight struct {
	Config GreenlightNodeConfig
}

func (e NodeConfigGreenlight) Destroy() {
	FfiDestroyerTypeGreenlightNodeConfig{}.destroy(e.Config)
}

type FfiConverterTypeNodeConfig struct{}

var FfiConverterTypeNodeConfigINSTANCE = FfiConverterTypeNodeConfig{}

func (c FfiConverterTypeNodeConfig) lift(cRustBuf C.RustBuffer) (NodeConfig, error) {
	return liftFromRustBuffer[NodeConfig](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterTypeNodeConfig) lower(value NodeConfig) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[NodeConfig](c, value)
	return _loweredValue
}
func (FfiConverterTypeNodeConfig) read(reader io.Reader) (NodeConfig, error) {
	var _uniffiDefaultValue NodeConfig
	id, err := readInt32(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	switch id {
	case 1:
		_config, err := FfiConverterTypeGreenlightNodeConfigINSTANCE.read(reader)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return NodeConfigGreenlight{
			Config: _config,
		}, nil
	default:
		return nil, fmt.Errorf("invalid enum value %v in FfiConverterTypeNodeConfig.read()", id)
	}
}

func (FfiConverterTypeNodeConfig) write(writer io.Writer, value NodeConfig) error {
	switch variant_value := value.(type) {
	case NodeConfigGreenlight:
		if err := writeInt32(writer, 1); err != nil {
			return err
		}
		if err := FfiConverterTypeGreenlightNodeConfigINSTANCE.write(writer, variant_value.Config); err != nil {
			return err
		}
	default:
		_ = variant_value
		return fmt.Errorf(fmt.Sprintf("invalid enum value `%v` in FfiConverterTypeNodeConfig.write", value))
	}
	return nil
}

type FfiDestroyerTypeNodeConfig struct{}

func (FfiDestroyerTypeNodeConfig) destroy(value NodeConfig) {
	value.Destroy()
}

type PaymentDetails interface {
	Destroy()
}
type PaymentDetailsLn struct {
	Data LnPaymentDetails
}

func (e PaymentDetailsLn) Destroy() {
	FfiDestroyerTypeLnPaymentDetails{}.destroy(e.Data)
}

type PaymentDetailsClosedChannel struct {
	Data ClosedChannelPaymentDetails
}

func (e PaymentDetailsClosedChannel) Destroy() {
	FfiDestroyerTypeClosedChannelPaymentDetails{}.destroy(e.Data)
}

type FfiConverterTypePaymentDetails struct{}

var FfiConverterTypePaymentDetailsINSTANCE = FfiConverterTypePaymentDetails{}

func (c FfiConverterTypePaymentDetails) lift(cRustBuf C.RustBuffer) (PaymentDetails, error) {
	return liftFromRustBuffer[PaymentDetails](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterTypePaymentDetails) lower(value PaymentDetails) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[PaymentDetails](c, value)
	return _loweredValue
}
func (FfiConverterTypePaymentDetails) read(reader io.Reader) (PaymentDetails, error) {
	var _uniffiDefaultValue PaymentDetails
	id, err := readInt32(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	switch id {
	case 1:
		_data, err := FfiConverterTypeLnPaymentDetailsINSTANCE.read(reader)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return PaymentDetailsLn{
			Data: _data,
		}, nil
	case 2:
		_data, err := FfiConverterTypeClosedChannelPaymentDetailsINSTANCE.read(reader)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return PaymentDetailsClosedChannel{
			Data: _data,
		}, nil
	default:
		return nil, fmt.Errorf("invalid enum value %v in FfiConverterTypePaymentDetails.read()", id)
	}
}

func (FfiConverterTypePaymentDetails) write(writer io.Writer, value PaymentDetails) error {
	switch variant_value := value.(type) {
	case PaymentDetailsLn:
		if err := writeInt32(writer, 1); err != nil {
			return err
		}
		if err := FfiConverterTypeLnPaymentDetailsINSTANCE.write(writer, variant_value.Data); err != nil {
			return err
		}
	case PaymentDetailsClosedChannel:
		if err := writeInt32(writer, 2); err != nil {
			return err
		}
		if err := FfiConverterTypeClosedChannelPaymentDetailsINSTANCE.write(writer, variant_value.Data); err != nil {
			return err
		}
	default:
		_ = variant_value
		return fmt.Errorf(fmt.Sprintf("invalid enum value `%v` in FfiConverterTypePaymentDetails.write", value))
	}
	return nil
}

type FfiDestroyerTypePaymentDetails struct{}

func (FfiDestroyerTypePaymentDetails) destroy(value PaymentDetails) {
	value.Destroy()
}

type PaymentType uint

const (
	PaymentTypeSent          PaymentType = 1
	PaymentTypeReceived      PaymentType = 2
	PaymentTypeClosedChannel PaymentType = 3
)

type FfiConverterTypePaymentType struct{}

var FfiConverterTypePaymentTypeINSTANCE = FfiConverterTypePaymentType{}

func (c FfiConverterTypePaymentType) lift(cRustBuf C.RustBuffer) (PaymentType, error) {
	return liftFromRustBuffer[PaymentType](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterTypePaymentType) lower(value PaymentType) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[PaymentType](c, value)
	return _loweredValue
}
func (FfiConverterTypePaymentType) read(reader io.Reader) (PaymentType, error) {
	id, err := readInt32(reader)
	if err != nil {
		var _uniffiDefaultValue PaymentType
		return _uniffiDefaultValue, err
	}
	return PaymentType(id), nil
}

func (FfiConverterTypePaymentType) write(writer io.Writer, value PaymentType) error {
	return writeInt32(writer, int32(value))
}

type FfiDestroyerTypePaymentType struct{}

func (FfiDestroyerTypePaymentType) destroy(value PaymentType) {
}

type PaymentTypeFilter uint

const (
	PaymentTypeFilterSent     PaymentTypeFilter = 1
	PaymentTypeFilterReceived PaymentTypeFilter = 2
	PaymentTypeFilterAll      PaymentTypeFilter = 3
)

type FfiConverterTypePaymentTypeFilter struct{}

var FfiConverterTypePaymentTypeFilterINSTANCE = FfiConverterTypePaymentTypeFilter{}

func (c FfiConverterTypePaymentTypeFilter) lift(cRustBuf C.RustBuffer) (PaymentTypeFilter, error) {
	return liftFromRustBuffer[PaymentTypeFilter](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterTypePaymentTypeFilter) lower(value PaymentTypeFilter) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[PaymentTypeFilter](c, value)
	return _loweredValue
}
func (FfiConverterTypePaymentTypeFilter) read(reader io.Reader) (PaymentTypeFilter, error) {
	id, err := readInt32(reader)
	if err != nil {
		var _uniffiDefaultValue PaymentTypeFilter
		return _uniffiDefaultValue, err
	}
	return PaymentTypeFilter(id), nil
}

func (FfiConverterTypePaymentTypeFilter) write(writer io.Writer, value PaymentTypeFilter) error {
	return writeInt32(writer, int32(value))
}

type FfiDestroyerTypePaymentTypeFilter struct{}

func (FfiDestroyerTypePaymentTypeFilter) destroy(value PaymentTypeFilter) {
}

type ReverseSwapStatus uint

const (
	ReverseSwapStatusInitial            ReverseSwapStatus = 1
	ReverseSwapStatusInProgress         ReverseSwapStatus = 2
	ReverseSwapStatusCancelled          ReverseSwapStatus = 3
	ReverseSwapStatusCompletedSeen      ReverseSwapStatus = 4
	ReverseSwapStatusCompletedConfirmed ReverseSwapStatus = 5
)

type FfiConverterTypeReverseSwapStatus struct{}

var FfiConverterTypeReverseSwapStatusINSTANCE = FfiConverterTypeReverseSwapStatus{}

func (c FfiConverterTypeReverseSwapStatus) lift(cRustBuf C.RustBuffer) (ReverseSwapStatus, error) {
	return liftFromRustBuffer[ReverseSwapStatus](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterTypeReverseSwapStatus) lower(value ReverseSwapStatus) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[ReverseSwapStatus](c, value)
	return _loweredValue
}
func (FfiConverterTypeReverseSwapStatus) read(reader io.Reader) (ReverseSwapStatus, error) {
	id, err := readInt32(reader)
	if err != nil {
		var _uniffiDefaultValue ReverseSwapStatus
		return _uniffiDefaultValue, err
	}
	return ReverseSwapStatus(id), nil
}

func (FfiConverterTypeReverseSwapStatus) write(writer io.Writer, value ReverseSwapStatus) error {
	return writeInt32(writer, int32(value))
}

type FfiDestroyerTypeReverseSwapStatus struct{}

func (FfiDestroyerTypeReverseSwapStatus) destroy(value ReverseSwapStatus) {
}

type SuccessActionProcessed interface {
	Destroy()
}
type SuccessActionProcessedAes struct {
	Data AesSuccessActionDataDecrypted
}

func (e SuccessActionProcessedAes) Destroy() {
	FfiDestroyerTypeAesSuccessActionDataDecrypted{}.destroy(e.Data)
}

type SuccessActionProcessedMessage struct {
	Data MessageSuccessActionData
}

func (e SuccessActionProcessedMessage) Destroy() {
	FfiDestroyerTypeMessageSuccessActionData{}.destroy(e.Data)
}

type SuccessActionProcessedUrl struct {
	Data UrlSuccessActionData
}

func (e SuccessActionProcessedUrl) Destroy() {
	FfiDestroyerTypeUrlSuccessActionData{}.destroy(e.Data)
}

type FfiConverterTypeSuccessActionProcessed struct{}

var FfiConverterTypeSuccessActionProcessedINSTANCE = FfiConverterTypeSuccessActionProcessed{}

func (c FfiConverterTypeSuccessActionProcessed) lift(cRustBuf C.RustBuffer) (SuccessActionProcessed, error) {
	return liftFromRustBuffer[SuccessActionProcessed](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterTypeSuccessActionProcessed) lower(value SuccessActionProcessed) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[SuccessActionProcessed](c, value)
	return _loweredValue
}
func (FfiConverterTypeSuccessActionProcessed) read(reader io.Reader) (SuccessActionProcessed, error) {
	var _uniffiDefaultValue SuccessActionProcessed
	id, err := readInt32(reader)
	if err != nil {
		return _uniffiDefaultValue, err
	}
	switch id {
	case 1:
		_data, err := FfiConverterTypeAesSuccessActionDataDecryptedINSTANCE.read(reader)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return SuccessActionProcessedAes{
			Data: _data,
		}, nil
	case 2:
		_data, err := FfiConverterTypeMessageSuccessActionDataINSTANCE.read(reader)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return SuccessActionProcessedMessage{
			Data: _data,
		}, nil
	case 3:
		_data, err := FfiConverterTypeUrlSuccessActionDataINSTANCE.read(reader)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return SuccessActionProcessedUrl{
			Data: _data,
		}, nil
	default:
		return nil, fmt.Errorf("invalid enum value %v in FfiConverterTypeSuccessActionProcessed.read()", id)
	}
}

func (FfiConverterTypeSuccessActionProcessed) write(writer io.Writer, value SuccessActionProcessed) error {
	switch variant_value := value.(type) {
	case SuccessActionProcessedAes:
		if err := writeInt32(writer, 1); err != nil {
			return err
		}
		if err := FfiConverterTypeAesSuccessActionDataDecryptedINSTANCE.write(writer, variant_value.Data); err != nil {
			return err
		}
	case SuccessActionProcessedMessage:
		if err := writeInt32(writer, 2); err != nil {
			return err
		}
		if err := FfiConverterTypeMessageSuccessActionDataINSTANCE.write(writer, variant_value.Data); err != nil {
			return err
		}
	case SuccessActionProcessedUrl:
		if err := writeInt32(writer, 3); err != nil {
			return err
		}
		if err := FfiConverterTypeUrlSuccessActionDataINSTANCE.write(writer, variant_value.Data); err != nil {
			return err
		}
	default:
		_ = variant_value
		return fmt.Errorf(fmt.Sprintf("invalid enum value `%v` in FfiConverterTypeSuccessActionProcessed.write", value))
	}
	return nil
}

type FfiDestroyerTypeSuccessActionProcessed struct{}

func (FfiDestroyerTypeSuccessActionProcessed) destroy(value SuccessActionProcessed) {
	value.Destroy()
}

type SwapStatus uint

const (
	SwapStatusInitial SwapStatus = 1
	SwapStatusExpired SwapStatus = 2
)

type FfiConverterTypeSwapStatus struct{}

var FfiConverterTypeSwapStatusINSTANCE = FfiConverterTypeSwapStatus{}

func (c FfiConverterTypeSwapStatus) lift(cRustBuf C.RustBuffer) (SwapStatus, error) {
	return liftFromRustBuffer[SwapStatus](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterTypeSwapStatus) lower(value SwapStatus) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[SwapStatus](c, value)
	return _loweredValue
}
func (FfiConverterTypeSwapStatus) read(reader io.Reader) (SwapStatus, error) {
	id, err := readInt32(reader)
	if err != nil {
		var _uniffiDefaultValue SwapStatus
		return _uniffiDefaultValue, err
	}
	return SwapStatus(id), nil
}

func (FfiConverterTypeSwapStatus) write(writer io.Writer, value SwapStatus) error {
	return writeInt32(writer, int32(value))
}

type FfiDestroyerTypeSwapStatus struct{}

func (FfiDestroyerTypeSwapStatus) destroy(value SwapStatus) {
}

type SdkError struct {
	err error
}

func (err SdkError) Error() string {
	return fmt.Sprintf("SdkError: %s", err.err.Error())
}

func (err SdkError) Unwrap() error {
	return err.err
}

// Err* are used for checking error type with `errors.Is`
var ErrSdkErrorGeneric = fmt.Errorf("SdkErrorGeneric")
var ErrSdkErrorInitFailed = fmt.Errorf("SdkErrorInitFailed")
var ErrSdkErrorNotReady = fmt.Errorf("SdkErrorNotReady")
var ErrSdkErrorLspConnectFailed = fmt.Errorf("SdkErrorLspConnectFailed")
var ErrSdkErrorLspOpenChannelNotSupported = fmt.Errorf("SdkErrorLspOpenChannelNotSupported")
var ErrSdkErrorPersistenceFailure = fmt.Errorf("SdkErrorPersistenceFailure")
var ErrSdkErrorReceivePaymentFailed = fmt.Errorf("SdkErrorReceivePaymentFailed")
var ErrSdkErrorCalculateOpenChannelFeesFailed = fmt.Errorf("SdkErrorCalculateOpenChannelFeesFailed")

// Variant structs
type SdkErrorGeneric struct {
	message string
}

func NewSdkErrorGeneric() *SdkError {
	return &SdkError{
		err: &SdkErrorGeneric{},
	}
}

func (err SdkErrorGeneric) Error() string {
	return fmt.Sprintf("Generic: %s", err.message)
}

func (err SdkErrorGeneric) Is(target error) bool {
	return target == ErrSdkErrorGeneric
}

type SdkErrorInitFailed struct {
	message string
}

func NewSdkErrorInitFailed() *SdkError {
	return &SdkError{
		err: &SdkErrorInitFailed{},
	}
}

func (err SdkErrorInitFailed) Error() string {
	return fmt.Sprintf("InitFailed: %s", err.message)
}

func (err SdkErrorInitFailed) Is(target error) bool {
	return target == ErrSdkErrorInitFailed
}

type SdkErrorNotReady struct {
	message string
}

func NewSdkErrorNotReady() *SdkError {
	return &SdkError{
		err: &SdkErrorNotReady{},
	}
}

func (err SdkErrorNotReady) Error() string {
	return fmt.Sprintf("NotReady: %s", err.message)
}

func (err SdkErrorNotReady) Is(target error) bool {
	return target == ErrSdkErrorNotReady
}

type SdkErrorLspConnectFailed struct {
	message string
}

func NewSdkErrorLspConnectFailed() *SdkError {
	return &SdkError{
		err: &SdkErrorLspConnectFailed{},
	}
}

func (err SdkErrorLspConnectFailed) Error() string {
	return fmt.Sprintf("LspConnectFailed: %s", err.message)
}

func (err SdkErrorLspConnectFailed) Is(target error) bool {
	return target == ErrSdkErrorLspConnectFailed
}

type SdkErrorLspOpenChannelNotSupported struct {
	message string
}

func NewSdkErrorLspOpenChannelNotSupported() *SdkError {
	return &SdkError{
		err: &SdkErrorLspOpenChannelNotSupported{},
	}
}

func (err SdkErrorLspOpenChannelNotSupported) Error() string {
	return fmt.Sprintf("LspOpenChannelNotSupported: %s", err.message)
}

func (err SdkErrorLspOpenChannelNotSupported) Is(target error) bool {
	return target == ErrSdkErrorLspOpenChannelNotSupported
}

type SdkErrorPersistenceFailure struct {
	message string
}

func NewSdkErrorPersistenceFailure() *SdkError {
	return &SdkError{
		err: &SdkErrorPersistenceFailure{},
	}
}

func (err SdkErrorPersistenceFailure) Error() string {
	return fmt.Sprintf("PersistenceFailure: %s", err.message)
}

func (err SdkErrorPersistenceFailure) Is(target error) bool {
	return target == ErrSdkErrorPersistenceFailure
}

type SdkErrorReceivePaymentFailed struct {
	message string
}

func NewSdkErrorReceivePaymentFailed() *SdkError {
	return &SdkError{
		err: &SdkErrorReceivePaymentFailed{},
	}
}

func (err SdkErrorReceivePaymentFailed) Error() string {
	return fmt.Sprintf("ReceivePaymentFailed: %s", err.message)
}

func (err SdkErrorReceivePaymentFailed) Is(target error) bool {
	return target == ErrSdkErrorReceivePaymentFailed
}

type SdkErrorCalculateOpenChannelFeesFailed struct {
	message string
}

func NewSdkErrorCalculateOpenChannelFeesFailed() *SdkError {
	return &SdkError{
		err: &SdkErrorCalculateOpenChannelFeesFailed{},
	}
}

func (err SdkErrorCalculateOpenChannelFeesFailed) Error() string {
	return fmt.Sprintf("CalculateOpenChannelFeesFailed: %s", err.message)
}

func (err SdkErrorCalculateOpenChannelFeesFailed) Is(target error) bool {
	return target == ErrSdkErrorCalculateOpenChannelFeesFailed
}

type FfiConverterTypeSdkError struct{}

var FfiConverterTypeSdkErrorINSTANCE = FfiConverterTypeSdkError{}

func (c FfiConverterTypeSdkError) lift(cErrBuf C.RustBuffer) (error, error) {
	errBuf := fromCRustBuffer(cErrBuf)
	return liftFromRustBuffer[error](c, errBuf)
}

func (c FfiConverterTypeSdkError) lower(value *SdkError) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[*SdkError](c, value)
	return _loweredValue
}

func (c FfiConverterTypeSdkError) read(reader io.Reader) (error, error) {
	errorID, err := readUint32(reader)
	if err != nil {
		return nil, err
	}

	message, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return nil, err
	}
	switch errorID {
	case 1:
		return &SdkError{&SdkErrorGeneric{message}}, nil
	case 2:
		return &SdkError{&SdkErrorInitFailed{message}}, nil
	case 3:
		return &SdkError{&SdkErrorNotReady{message}}, nil
	case 4:
		return &SdkError{&SdkErrorLspConnectFailed{message}}, nil
	case 5:
		return &SdkError{&SdkErrorLspOpenChannelNotSupported{message}}, nil
	case 6:
		return &SdkError{&SdkErrorPersistenceFailure{message}}, nil
	case 7:
		return &SdkError{&SdkErrorReceivePaymentFailed{message}}, nil
	case 8:
		return &SdkError{&SdkErrorCalculateOpenChannelFeesFailed{message}}, nil
	default:
		return nil, fmt.Errorf("unknown error code %d in FfiConverterTypeSdkError.read()", errorID)
	}

}

func (c FfiConverterTypeSdkError) write(writer io.Writer, value *SdkError) error {
	switch variantValue := value.err.(type) {
	case *SdkErrorGeneric:
		if err := writeInt32(writer, 1); err != nil {
			return err
		}
	case *SdkErrorInitFailed:
		if err := writeInt32(writer, 2); err != nil {
			return err
		}
	case *SdkErrorNotReady:
		if err := writeInt32(writer, 3); err != nil {
			return err
		}
	case *SdkErrorLspConnectFailed:
		if err := writeInt32(writer, 4); err != nil {
			return err
		}
	case *SdkErrorLspOpenChannelNotSupported:
		if err := writeInt32(writer, 5); err != nil {
			return err
		}
	case *SdkErrorPersistenceFailure:
		if err := writeInt32(writer, 6); err != nil {
			return err
		}
	case *SdkErrorReceivePaymentFailed:
		if err := writeInt32(writer, 7); err != nil {
			return err
		}
	case *SdkErrorCalculateOpenChannelFeesFailed:
		if err := writeInt32(writer, 8); err != nil {
			return err
		}
	default:
		_ = variantValue
		return fmt.Errorf(fmt.Sprintf("invalid error value `%v` in FfiConverterTypeSdkError.write", value))
	}
	return nil
}

type uniffiCallbackResult C.int32_t

const (
	idxCallbackFree                                          = 0
	uniffiCallbackResultSuccess         uniffiCallbackResult = 1
	uniffiCallbackResultError           uniffiCallbackResult = -2
	uniffiCallbackUnexpectedResultError uniffiCallbackResult = -1
)

type concurrentHandleMap[T any] struct {
	leftMap       map[uint64]*T
	rightMap      map[*T]uint64
	currentHandle uint64
	lock          sync.Mutex
}

func newConcurrentHandleMap[T any]() *concurrentHandleMap[T] {
	return &concurrentHandleMap[T]{
		leftMap:  map[uint64]*T{},
		rightMap: map[*T]uint64{},
	}
}

func (cm *concurrentHandleMap[T]) insert(obj *T) uint64 {
	cm.lock.Lock()
	defer cm.lock.Unlock()
	if existingHandle, ok := cm.rightMap[obj]; ok {
		return existingHandle
	}
	cm.currentHandle = cm.currentHandle + 1
	cm.leftMap[cm.currentHandle] = obj
	cm.rightMap[obj] = cm.currentHandle
	return cm.currentHandle
}

func (cm *concurrentHandleMap[T]) remove(handle uint64) bool {
	cm.lock.Lock()
	defer cm.lock.Unlock()
	if val, ok := cm.leftMap[handle]; ok {
		delete(cm.leftMap, handle)
		delete(cm.rightMap, val)
	}
	return false
}

func (cm *concurrentHandleMap[T]) tryGet(handle uint64) (*T, bool) {
	val, ok := cm.leftMap[handle]
	return val, ok
}

type FfiConverterCallbackInterface[CallbackInterface any] struct {
	handleMap *concurrentHandleMap[CallbackInterface]
}

func (c *FfiConverterCallbackInterface[CallbackInterface]) drop(handle uint64) rustBuffer {
	c.handleMap.remove(handle)
	return rustBuffer{}
}

func (c *FfiConverterCallbackInterface[CallbackInterface]) lift(handle uint64) (CallbackInterface, error) {
	val, ok := c.handleMap.tryGet(handle)
	if !ok {
		var _uniffiDefaultValue CallbackInterface
		return _uniffiDefaultValue, fmt.Errorf("no callback in handle map: %d", handle)
	}
	return *val, nil
}

func (c *FfiConverterCallbackInterface[CallbackInterface]) read(reader io.Reader) (CallbackInterface, error) {
	readValue, err := readUint64(reader)
	if err != nil {
		var _uniffiDefaultValue CallbackInterface
		return _uniffiDefaultValue, err
	}
	return c.lift(readValue)
}

func (c *FfiConverterCallbackInterface[CallbackInterface]) lower(value CallbackInterface) C.uint64_t {
	return C.uint64_t(c.handleMap.insert(&value))
}

func (c *FfiConverterCallbackInterface[CallbackInterface]) write(writer io.Writer, value CallbackInterface) error {
	return writeUint64(writer, uint64(c.lower(value)))
}

// Declaration and FfiConverters for EventListener Callback Interface
type EventListener interface {
	OnEvent(e BreezEvent)
}

// foreignCallbackTypeEventListener cannot be callable be a compiled function at a same time
type foreignCallbackTypeEventListener struct{}

//export breez_sdk_d634_cgo_EventListener
func breez_sdk_d634_cgo_EventListener(handle C.uint64_t, method C.int32_t, args C.RustBuffer, outBuf *C.RustBuffer) C.int32_t {
	cb, _ := FfiConverterTypeEventListenerINSTANCE.lift(uint64(handle))
	switch method {
	case 0:
		// 0 means Rust is done with the callback, and the callback
		// can be dropped by the foreign language.
		*outBuf = FfiConverterTypeEventListenerINSTANCE.drop(uint64(handle)).asCRustBuffer()
		// No return value.
		// See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
		return C.int32_t(idxCallbackFree)

	case 1:
		var result uniffiCallbackResult
		result, *outBuf = foreignCallbackTypeEventListener{}.InvokeOnEvent(cb, fromCRustBuffer(args))
		// Value written to out buffer.
		// See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
		return C.int32_t(result)

	default:
		// This should never happen, because an out of bounds method index won't
		// ever be used. Once we can catch errors, we should return an InternalException.
		// https://github.com/mozilla/uniffi-rs/issues/351
		return C.int32_t(uniffiCallbackUnexpectedResultError)
	}
}

func (foreignCallbackTypeEventListener) InvokeOnEvent(callback EventListener, args rustBuffer) (uniffiCallbackResult, C.RustBuffer) {
	defer args.free()
	reader := args.asReader()
	_e, _ := FfiConverterTypeBreezEventINSTANCE.read(reader)
	callback.OnEvent(_e)

	return uniffiCallbackResultSuccess, rustBuffer{}.asCRustBuffer()
}

type FfiConverterTypeEventListener struct {
	FfiConverterCallbackInterface[EventListener]
}

var FfiConverterTypeEventListenerINSTANCE = &FfiConverterTypeEventListener{
	FfiConverterCallbackInterface: FfiConverterCallbackInterface[EventListener]{
		handleMap: newConcurrentHandleMap[EventListener](),
	},
}

// This is a static function because only 1 instance is supported for registering
func (c *FfiConverterTypeEventListener) register() {
	rustCall(func(status *C.RustCallStatus) int32 {
		C.ffi_breez_sdk_d634_EventListener_init_callback(C.ForeignCallback(C.breez_sdk_d634_cgo_EventListener), status)
		return 0
	})
}

type FfiDestroyerTypeEventListener struct{}

func (FfiDestroyerTypeEventListener) destroy(value EventListener) {
}

// Declaration and FfiConverters for LogStream Callback Interface
type LogStream interface {
	Log(l LogEntry)
}

// foreignCallbackTypeLogStream cannot be callable be a compiled function at a same time
type foreignCallbackTypeLogStream struct{}

//export breez_sdk_d634_cgo_LogStream
func breez_sdk_d634_cgo_LogStream(handle C.uint64_t, method C.int32_t, args C.RustBuffer, outBuf *C.RustBuffer) C.int32_t {
	cb, _ := FfiConverterTypeLogStreamINSTANCE.lift(uint64(handle))
	switch method {
	case 0:
		// 0 means Rust is done with the callback, and the callback
		// can be dropped by the foreign language.
		*outBuf = FfiConverterTypeLogStreamINSTANCE.drop(uint64(handle)).asCRustBuffer()
		// No return value.
		// See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
		return C.int32_t(idxCallbackFree)

	case 1:
		var result uniffiCallbackResult
		result, *outBuf = foreignCallbackTypeLogStream{}.InvokeLog(cb, fromCRustBuffer(args))
		// Value written to out buffer.
		// See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
		return C.int32_t(result)

	default:
		// This should never happen, because an out of bounds method index won't
		// ever be used. Once we can catch errors, we should return an InternalException.
		// https://github.com/mozilla/uniffi-rs/issues/351
		return C.int32_t(uniffiCallbackUnexpectedResultError)
	}
}

func (foreignCallbackTypeLogStream) InvokeLog(callback LogStream, args rustBuffer) (uniffiCallbackResult, C.RustBuffer) {
	defer args.free()
	reader := args.asReader()
	_l, _ := FfiConverterTypeLogEntryINSTANCE.read(reader)
	callback.Log(_l)

	return uniffiCallbackResultSuccess, rustBuffer{}.asCRustBuffer()
}

type FfiConverterTypeLogStream struct {
	FfiConverterCallbackInterface[LogStream]
}

var FfiConverterTypeLogStreamINSTANCE = &FfiConverterTypeLogStream{
	FfiConverterCallbackInterface: FfiConverterCallbackInterface[LogStream]{
		handleMap: newConcurrentHandleMap[LogStream](),
	},
}

// This is a static function because only 1 instance is supported for registering
func (c *FfiConverterTypeLogStream) register() {
	rustCall(func(status *C.RustCallStatus) int32 {
		C.ffi_breez_sdk_d634_LogStream_init_callback(C.ForeignCallback(C.breez_sdk_d634_cgo_LogStream), status)
		return 0
	})
}

type FfiDestroyerTypeLogStream struct{}

func (FfiDestroyerTypeLogStream) destroy(value LogStream) {
}

type FfiConverterOptionaluint32 struct{}

var FfiConverterOptionaluint32INSTANCE = FfiConverterOptionaluint32{}

func (c FfiConverterOptionaluint32) lift(cRustBuf C.RustBuffer) (*uint32, error) {
	return liftFromRustBuffer[*uint32](c, fromCRustBuffer(cRustBuf))
}

func (FfiConverterOptionaluint32) read(reader io.Reader) (*uint32, error) {
	readValue, err := readInt8(reader)
	if err != nil {
		return nil, err
	}
	if readValue == 0 {
		return nil, nil
	}
	temp, err := FfiConverteruint32INSTANCE.read(reader)
	if err != nil {
		return nil, err
	}
	return &temp, nil
}

func (c FfiConverterOptionaluint32) lower(value *uint32) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[*uint32](c, value)
	return _loweredValue
}

func (FfiConverterOptionaluint32) write(writer io.Writer, value *uint32) error {
	if value == nil {
		return writeInt8(writer, 0)
	}
	if err := writeInt8(writer, 1); err != nil {
		return err
	}
	return FfiConverteruint32INSTANCE.write(writer, *value)
}

type FfiDestroyerOptionaluint32 struct{}

func (FfiDestroyerOptionaluint32) destroy(value *uint32) {
	if value != nil {
		FfiDestroyeruint32{}.destroy(*value)
	}
}

type FfiConverterOptionaluint64 struct{}

var FfiConverterOptionaluint64INSTANCE = FfiConverterOptionaluint64{}

func (c FfiConverterOptionaluint64) lift(cRustBuf C.RustBuffer) (*uint64, error) {
	return liftFromRustBuffer[*uint64](c, fromCRustBuffer(cRustBuf))
}

func (FfiConverterOptionaluint64) read(reader io.Reader) (*uint64, error) {
	readValue, err := readInt8(reader)
	if err != nil {
		return nil, err
	}
	if readValue == 0 {
		return nil, nil
	}
	temp, err := FfiConverteruint64INSTANCE.read(reader)
	if err != nil {
		return nil, err
	}
	return &temp, nil
}

func (c FfiConverterOptionaluint64) lower(value *uint64) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[*uint64](c, value)
	return _loweredValue
}

func (FfiConverterOptionaluint64) write(writer io.Writer, value *uint64) error {
	if value == nil {
		return writeInt8(writer, 0)
	}
	if err := writeInt8(writer, 1); err != nil {
		return err
	}
	return FfiConverteruint64INSTANCE.write(writer, *value)
}

type FfiDestroyerOptionaluint64 struct{}

func (FfiDestroyerOptionaluint64) destroy(value *uint64) {
	if value != nil {
		FfiDestroyeruint64{}.destroy(*value)
	}
}

type FfiConverterOptionalint64 struct{}

var FfiConverterOptionalint64INSTANCE = FfiConverterOptionalint64{}

func (c FfiConverterOptionalint64) lift(cRustBuf C.RustBuffer) (*int64, error) {
	return liftFromRustBuffer[*int64](c, fromCRustBuffer(cRustBuf))
}

func (FfiConverterOptionalint64) read(reader io.Reader) (*int64, error) {
	readValue, err := readInt8(reader)
	if err != nil {
		return nil, err
	}
	if readValue == 0 {
		return nil, nil
	}
	temp, err := FfiConverterint64INSTANCE.read(reader)
	if err != nil {
		return nil, err
	}
	return &temp, nil
}

func (c FfiConverterOptionalint64) lower(value *int64) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[*int64](c, value)
	return _loweredValue
}

func (FfiConverterOptionalint64) write(writer io.Writer, value *int64) error {
	if value == nil {
		return writeInt8(writer, 0)
	}
	if err := writeInt8(writer, 1); err != nil {
		return err
	}
	return FfiConverterint64INSTANCE.write(writer, *value)
}

type FfiDestroyerOptionalint64 struct{}

func (FfiDestroyerOptionalint64) destroy(value *int64) {
	if value != nil {
		FfiDestroyerint64{}.destroy(*value)
	}
}

type FfiConverterOptionalbool struct{}

var FfiConverterOptionalboolINSTANCE = FfiConverterOptionalbool{}

func (c FfiConverterOptionalbool) lift(cRustBuf C.RustBuffer) (*bool, error) {
	return liftFromRustBuffer[*bool](c, fromCRustBuffer(cRustBuf))
}

func (FfiConverterOptionalbool) read(reader io.Reader) (*bool, error) {
	readValue, err := readInt8(reader)
	if err != nil {
		return nil, err
	}
	if readValue == 0 {
		return nil, nil
	}
	temp, err := FfiConverterboolINSTANCE.read(reader)
	if err != nil {
		return nil, err
	}
	return &temp, nil
}

func (c FfiConverterOptionalbool) lower(value *bool) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[*bool](c, value)
	return _loweredValue
}

func (FfiConverterOptionalbool) write(writer io.Writer, value *bool) error {
	if value == nil {
		return writeInt8(writer, 0)
	}
	if err := writeInt8(writer, 1); err != nil {
		return err
	}
	return FfiConverterboolINSTANCE.write(writer, *value)
}

type FfiDestroyerOptionalbool struct{}

func (FfiDestroyerOptionalbool) destroy(value *bool) {
	if value != nil {
		FfiDestroyerbool{}.destroy(*value)
	}
}

type FfiConverterOptionalstring struct{}

var FfiConverterOptionalstringINSTANCE = FfiConverterOptionalstring{}

func (c FfiConverterOptionalstring) lift(cRustBuf C.RustBuffer) (*string, error) {
	return liftFromRustBuffer[*string](c, fromCRustBuffer(cRustBuf))
}

func (FfiConverterOptionalstring) read(reader io.Reader) (*string, error) {
	readValue, err := readInt8(reader)
	if err != nil {
		return nil, err
	}
	if readValue == 0 {
		return nil, nil
	}
	temp, err := FfiConverterstringINSTANCE.read(reader)
	if err != nil {
		return nil, err
	}
	return &temp, nil
}

func (c FfiConverterOptionalstring) lower(value *string) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[*string](c, value)
	return _loweredValue
}

func (FfiConverterOptionalstring) write(writer io.Writer, value *string) error {
	if value == nil {
		return writeInt8(writer, 0)
	}
	if err := writeInt8(writer, 1); err != nil {
		return err
	}
	return FfiConverterstringINSTANCE.write(writer, *value)
}

type FfiDestroyerOptionalstring struct{}

func (FfiDestroyerOptionalstring) destroy(value *string) {
	if value != nil {
		FfiDestroyerstring{}.destroy(*value)
	}
}

type FfiConverterOptionalTypeGreenlightCredentials struct{}

var FfiConverterOptionalTypeGreenlightCredentialsINSTANCE = FfiConverterOptionalTypeGreenlightCredentials{}

func (c FfiConverterOptionalTypeGreenlightCredentials) lift(cRustBuf C.RustBuffer) (*GreenlightCredentials, error) {
	return liftFromRustBuffer[*GreenlightCredentials](c, fromCRustBuffer(cRustBuf))
}

func (FfiConverterOptionalTypeGreenlightCredentials) read(reader io.Reader) (*GreenlightCredentials, error) {
	readValue, err := readInt8(reader)
	if err != nil {
		return nil, err
	}
	if readValue == 0 {
		return nil, nil
	}
	temp, err := FfiConverterTypeGreenlightCredentialsINSTANCE.read(reader)
	if err != nil {
		return nil, err
	}
	return &temp, nil
}

func (c FfiConverterOptionalTypeGreenlightCredentials) lower(value *GreenlightCredentials) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[*GreenlightCredentials](c, value)
	return _loweredValue
}

func (FfiConverterOptionalTypeGreenlightCredentials) write(writer io.Writer, value *GreenlightCredentials) error {
	if value == nil {
		return writeInt8(writer, 0)
	}
	if err := writeInt8(writer, 1); err != nil {
		return err
	}
	return FfiConverterTypeGreenlightCredentialsINSTANCE.write(writer, *value)
}

type FfiDestroyerOptionalTypeGreenlightCredentials struct{}

func (FfiDestroyerOptionalTypeGreenlightCredentials) destroy(value *GreenlightCredentials) {
	if value != nil {
		FfiDestroyerTypeGreenlightCredentials{}.destroy(*value)
	}
}

type FfiConverterOptionalTypeLnInvoice struct{}

var FfiConverterOptionalTypeLnInvoiceINSTANCE = FfiConverterOptionalTypeLnInvoice{}

func (c FfiConverterOptionalTypeLnInvoice) lift(cRustBuf C.RustBuffer) (*LnInvoice, error) {
	return liftFromRustBuffer[*LnInvoice](c, fromCRustBuffer(cRustBuf))
}

func (FfiConverterOptionalTypeLnInvoice) read(reader io.Reader) (*LnInvoice, error) {
	readValue, err := readInt8(reader)
	if err != nil {
		return nil, err
	}
	if readValue == 0 {
		return nil, nil
	}
	temp, err := FfiConverterTypeLnInvoiceINSTANCE.read(reader)
	if err != nil {
		return nil, err
	}
	return &temp, nil
}

func (c FfiConverterOptionalTypeLnInvoice) lower(value *LnInvoice) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[*LnInvoice](c, value)
	return _loweredValue
}

func (FfiConverterOptionalTypeLnInvoice) write(writer io.Writer, value *LnInvoice) error {
	if value == nil {
		return writeInt8(writer, 0)
	}
	if err := writeInt8(writer, 1); err != nil {
		return err
	}
	return FfiConverterTypeLnInvoiceINSTANCE.write(writer, *value)
}

type FfiDestroyerOptionalTypeLnInvoice struct{}

func (FfiDestroyerOptionalTypeLnInvoice) destroy(value *LnInvoice) {
	if value != nil {
		FfiDestroyerTypeLnInvoice{}.destroy(*value)
	}
}

type FfiConverterOptionalTypeLspInformation struct{}

var FfiConverterOptionalTypeLspInformationINSTANCE = FfiConverterOptionalTypeLspInformation{}

func (c FfiConverterOptionalTypeLspInformation) lift(cRustBuf C.RustBuffer) (*LspInformation, error) {
	return liftFromRustBuffer[*LspInformation](c, fromCRustBuffer(cRustBuf))
}

func (FfiConverterOptionalTypeLspInformation) read(reader io.Reader) (*LspInformation, error) {
	readValue, err := readInt8(reader)
	if err != nil {
		return nil, err
	}
	if readValue == 0 {
		return nil, nil
	}
	temp, err := FfiConverterTypeLspInformationINSTANCE.read(reader)
	if err != nil {
		return nil, err
	}
	return &temp, nil
}

func (c FfiConverterOptionalTypeLspInformation) lower(value *LspInformation) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[*LspInformation](c, value)
	return _loweredValue
}

func (FfiConverterOptionalTypeLspInformation) write(writer io.Writer, value *LspInformation) error {
	if value == nil {
		return writeInt8(writer, 0)
	}
	if err := writeInt8(writer, 1); err != nil {
		return err
	}
	return FfiConverterTypeLspInformationINSTANCE.write(writer, *value)
}

type FfiDestroyerOptionalTypeLspInformation struct{}

func (FfiDestroyerOptionalTypeLspInformation) destroy(value *LspInformation) {
	if value != nil {
		FfiDestroyerTypeLspInformation{}.destroy(*value)
	}
}

type FfiConverterOptionalTypeOpeningFeeParams struct{}

var FfiConverterOptionalTypeOpeningFeeParamsINSTANCE = FfiConverterOptionalTypeOpeningFeeParams{}

func (c FfiConverterOptionalTypeOpeningFeeParams) lift(cRustBuf C.RustBuffer) (*OpeningFeeParams, error) {
	return liftFromRustBuffer[*OpeningFeeParams](c, fromCRustBuffer(cRustBuf))
}

func (FfiConverterOptionalTypeOpeningFeeParams) read(reader io.Reader) (*OpeningFeeParams, error) {
	readValue, err := readInt8(reader)
	if err != nil {
		return nil, err
	}
	if readValue == 0 {
		return nil, nil
	}
	temp, err := FfiConverterTypeOpeningFeeParamsINSTANCE.read(reader)
	if err != nil {
		return nil, err
	}
	return &temp, nil
}

func (c FfiConverterOptionalTypeOpeningFeeParams) lower(value *OpeningFeeParams) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[*OpeningFeeParams](c, value)
	return _loweredValue
}

func (FfiConverterOptionalTypeOpeningFeeParams) write(writer io.Writer, value *OpeningFeeParams) error {
	if value == nil {
		return writeInt8(writer, 0)
	}
	if err := writeInt8(writer, 1); err != nil {
		return err
	}
	return FfiConverterTypeOpeningFeeParamsINSTANCE.write(writer, *value)
}

type FfiDestroyerOptionalTypeOpeningFeeParams struct{}

func (FfiDestroyerOptionalTypeOpeningFeeParams) destroy(value *OpeningFeeParams) {
	if value != nil {
		FfiDestroyerTypeOpeningFeeParams{}.destroy(*value)
	}
}

type FfiConverterOptionalTypePayment struct{}

var FfiConverterOptionalTypePaymentINSTANCE = FfiConverterOptionalTypePayment{}

func (c FfiConverterOptionalTypePayment) lift(cRustBuf C.RustBuffer) (*Payment, error) {
	return liftFromRustBuffer[*Payment](c, fromCRustBuffer(cRustBuf))
}

func (FfiConverterOptionalTypePayment) read(reader io.Reader) (*Payment, error) {
	readValue, err := readInt8(reader)
	if err != nil {
		return nil, err
	}
	if readValue == 0 {
		return nil, nil
	}
	temp, err := FfiConverterTypePaymentINSTANCE.read(reader)
	if err != nil {
		return nil, err
	}
	return &temp, nil
}

func (c FfiConverterOptionalTypePayment) lower(value *Payment) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[*Payment](c, value)
	return _loweredValue
}

func (FfiConverterOptionalTypePayment) write(writer io.Writer, value *Payment) error {
	if value == nil {
		return writeInt8(writer, 0)
	}
	if err := writeInt8(writer, 1); err != nil {
		return err
	}
	return FfiConverterTypePaymentINSTANCE.write(writer, *value)
}

type FfiDestroyerOptionalTypePayment struct{}

func (FfiDestroyerOptionalTypePayment) destroy(value *Payment) {
	if value != nil {
		FfiDestroyerTypePayment{}.destroy(*value)
	}
}

type FfiConverterOptionalTypeSwapInfo struct{}

var FfiConverterOptionalTypeSwapInfoINSTANCE = FfiConverterOptionalTypeSwapInfo{}

func (c FfiConverterOptionalTypeSwapInfo) lift(cRustBuf C.RustBuffer) (*SwapInfo, error) {
	return liftFromRustBuffer[*SwapInfo](c, fromCRustBuffer(cRustBuf))
}

func (FfiConverterOptionalTypeSwapInfo) read(reader io.Reader) (*SwapInfo, error) {
	readValue, err := readInt8(reader)
	if err != nil {
		return nil, err
	}
	if readValue == 0 {
		return nil, nil
	}
	temp, err := FfiConverterTypeSwapInfoINSTANCE.read(reader)
	if err != nil {
		return nil, err
	}
	return &temp, nil
}

func (c FfiConverterOptionalTypeSwapInfo) lower(value *SwapInfo) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[*SwapInfo](c, value)
	return _loweredValue
}

func (FfiConverterOptionalTypeSwapInfo) write(writer io.Writer, value *SwapInfo) error {
	if value == nil {
		return writeInt8(writer, 0)
	}
	if err := writeInt8(writer, 1); err != nil {
		return err
	}
	return FfiConverterTypeSwapInfoINSTANCE.write(writer, *value)
}

type FfiDestroyerOptionalTypeSwapInfo struct{}

func (FfiDestroyerOptionalTypeSwapInfo) destroy(value *SwapInfo) {
	if value != nil {
		FfiDestroyerTypeSwapInfo{}.destroy(*value)
	}
}

type FfiConverterOptionalTypeSymbol struct{}

var FfiConverterOptionalTypeSymbolINSTANCE = FfiConverterOptionalTypeSymbol{}

func (c FfiConverterOptionalTypeSymbol) lift(cRustBuf C.RustBuffer) (*Symbol, error) {
	return liftFromRustBuffer[*Symbol](c, fromCRustBuffer(cRustBuf))
}

func (FfiConverterOptionalTypeSymbol) read(reader io.Reader) (*Symbol, error) {
	readValue, err := readInt8(reader)
	if err != nil {
		return nil, err
	}
	if readValue == 0 {
		return nil, nil
	}
	temp, err := FfiConverterTypeSymbolINSTANCE.read(reader)
	if err != nil {
		return nil, err
	}
	return &temp, nil
}

func (c FfiConverterOptionalTypeSymbol) lower(value *Symbol) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[*Symbol](c, value)
	return _loweredValue
}

func (FfiConverterOptionalTypeSymbol) write(writer io.Writer, value *Symbol) error {
	if value == nil {
		return writeInt8(writer, 0)
	}
	if err := writeInt8(writer, 1); err != nil {
		return err
	}
	return FfiConverterTypeSymbolINSTANCE.write(writer, *value)
}

type FfiDestroyerOptionalTypeSymbol struct{}

func (FfiDestroyerOptionalTypeSymbol) destroy(value *Symbol) {
	if value != nil {
		FfiDestroyerTypeSymbol{}.destroy(*value)
	}
}

type FfiConverterOptionalTypeSuccessActionProcessed struct{}

var FfiConverterOptionalTypeSuccessActionProcessedINSTANCE = FfiConverterOptionalTypeSuccessActionProcessed{}

func (c FfiConverterOptionalTypeSuccessActionProcessed) lift(cRustBuf C.RustBuffer) (*SuccessActionProcessed, error) {
	return liftFromRustBuffer[*SuccessActionProcessed](c, fromCRustBuffer(cRustBuf))
}

func (FfiConverterOptionalTypeSuccessActionProcessed) read(reader io.Reader) (*SuccessActionProcessed, error) {
	readValue, err := readInt8(reader)
	if err != nil {
		return nil, err
	}
	if readValue == 0 {
		return nil, nil
	}
	temp, err := FfiConverterTypeSuccessActionProcessedINSTANCE.read(reader)
	if err != nil {
		return nil, err
	}
	return &temp, nil
}

func (c FfiConverterOptionalTypeSuccessActionProcessed) lower(value *SuccessActionProcessed) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[*SuccessActionProcessed](c, value)
	return _loweredValue
}

func (FfiConverterOptionalTypeSuccessActionProcessed) write(writer io.Writer, value *SuccessActionProcessed) error {
	if value == nil {
		return writeInt8(writer, 0)
	}
	if err := writeInt8(writer, 1); err != nil {
		return err
	}
	return FfiConverterTypeSuccessActionProcessedINSTANCE.write(writer, *value)
}

type FfiDestroyerOptionalTypeSuccessActionProcessed struct{}

func (FfiDestroyerOptionalTypeSuccessActionProcessed) destroy(value *SuccessActionProcessed) {
	if value != nil {
		FfiDestroyerTypeSuccessActionProcessed{}.destroy(*value)
	}
}

type FfiConverterOptionalSequenceuint8 struct{}

var FfiConverterOptionalSequenceuint8INSTANCE = FfiConverterOptionalSequenceuint8{}

func (c FfiConverterOptionalSequenceuint8) lift(cRustBuf C.RustBuffer) (*[]uint8, error) {
	return liftFromRustBuffer[*[]uint8](c, fromCRustBuffer(cRustBuf))
}

func (FfiConverterOptionalSequenceuint8) read(reader io.Reader) (*[]uint8, error) {
	readValue, err := readInt8(reader)
	if err != nil {
		return nil, err
	}
	if readValue == 0 {
		return nil, nil
	}
	temp, err := FfiConverterSequenceuint8INSTANCE.read(reader)
	if err != nil {
		return nil, err
	}
	return &temp, nil
}

func (c FfiConverterOptionalSequenceuint8) lower(value *[]uint8) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[*[]uint8](c, value)
	return _loweredValue
}

func (FfiConverterOptionalSequenceuint8) write(writer io.Writer, value *[]uint8) error {
	if value == nil {
		return writeInt8(writer, 0)
	}
	if err := writeInt8(writer, 1); err != nil {
		return err
	}
	return FfiConverterSequenceuint8INSTANCE.write(writer, *value)
}

type FfiDestroyerOptionalSequenceuint8 struct{}

func (FfiDestroyerOptionalSequenceuint8) destroy(value *[]uint8) {
	if value != nil {
		FfiDestroyerSequenceuint8{}.destroy(*value)
	}
}

type FfiConverterOptionalSequenceTypeLocaleOverrides struct{}

var FfiConverterOptionalSequenceTypeLocaleOverridesINSTANCE = FfiConverterOptionalSequenceTypeLocaleOverrides{}

func (c FfiConverterOptionalSequenceTypeLocaleOverrides) lift(cRustBuf C.RustBuffer) (*[]LocaleOverrides, error) {
	return liftFromRustBuffer[*[]LocaleOverrides](c, fromCRustBuffer(cRustBuf))
}

func (FfiConverterOptionalSequenceTypeLocaleOverrides) read(reader io.Reader) (*[]LocaleOverrides, error) {
	readValue, err := readInt8(reader)
	if err != nil {
		return nil, err
	}
	if readValue == 0 {
		return nil, nil
	}
	temp, err := FfiConverterSequenceTypeLocaleOverridesINSTANCE.read(reader)
	if err != nil {
		return nil, err
	}
	return &temp, nil
}

func (c FfiConverterOptionalSequenceTypeLocaleOverrides) lower(value *[]LocaleOverrides) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[*[]LocaleOverrides](c, value)
	return _loweredValue
}

func (FfiConverterOptionalSequenceTypeLocaleOverrides) write(writer io.Writer, value *[]LocaleOverrides) error {
	if value == nil {
		return writeInt8(writer, 0)
	}
	if err := writeInt8(writer, 1); err != nil {
		return err
	}
	return FfiConverterSequenceTypeLocaleOverridesINSTANCE.write(writer, *value)
}

type FfiDestroyerOptionalSequenceTypeLocaleOverrides struct{}

func (FfiDestroyerOptionalSequenceTypeLocaleOverrides) destroy(value *[]LocaleOverrides) {
	if value != nil {
		FfiDestroyerSequenceTypeLocaleOverrides{}.destroy(*value)
	}
}

type FfiConverterOptionalSequenceTypeLocalizedName struct{}

var FfiConverterOptionalSequenceTypeLocalizedNameINSTANCE = FfiConverterOptionalSequenceTypeLocalizedName{}

func (c FfiConverterOptionalSequenceTypeLocalizedName) lift(cRustBuf C.RustBuffer) (*[]LocalizedName, error) {
	return liftFromRustBuffer[*[]LocalizedName](c, fromCRustBuffer(cRustBuf))
}

func (FfiConverterOptionalSequenceTypeLocalizedName) read(reader io.Reader) (*[]LocalizedName, error) {
	readValue, err := readInt8(reader)
	if err != nil {
		return nil, err
	}
	if readValue == 0 {
		return nil, nil
	}
	temp, err := FfiConverterSequenceTypeLocalizedNameINSTANCE.read(reader)
	if err != nil {
		return nil, err
	}
	return &temp, nil
}

func (c FfiConverterOptionalSequenceTypeLocalizedName) lower(value *[]LocalizedName) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[*[]LocalizedName](c, value)
	return _loweredValue
}

func (FfiConverterOptionalSequenceTypeLocalizedName) write(writer io.Writer, value *[]LocalizedName) error {
	if value == nil {
		return writeInt8(writer, 0)
	}
	if err := writeInt8(writer, 1); err != nil {
		return err
	}
	return FfiConverterSequenceTypeLocalizedNameINSTANCE.write(writer, *value)
}

type FfiDestroyerOptionalSequenceTypeLocalizedName struct{}

func (FfiDestroyerOptionalSequenceTypeLocalizedName) destroy(value *[]LocalizedName) {
	if value != nil {
		FfiDestroyerSequenceTypeLocalizedName{}.destroy(*value)
	}
}

type FfiConverterSequenceuint8 struct{}

var FfiConverterSequenceuint8INSTANCE = FfiConverterSequenceuint8{}

func (c FfiConverterSequenceuint8) lift(cRustBuf C.RustBuffer) ([]uint8, error) {
	return liftFromRustBuffer[[]uint8](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterSequenceuint8) read(reader io.Reader) ([]uint8, error) {
	length, err := readInt32(reader)
	if err != nil {
		return nil, err
	}
	if length == 0 {
		return nil, nil
	}
	result := make([]uint8, 0, length)
	for i := int32(0); i < length; i++ {
		_uint8, err := FfiConverteruint8INSTANCE.read(reader)
		if err != nil {
			return nil, err
		}
		result = append(result, _uint8)
	}
	return result, nil
}

func (c FfiConverterSequenceuint8) lower(value []uint8) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[[]uint8](c, value)
	return _loweredValue
}

func (c FfiConverterSequenceuint8) write(writer io.Writer, value []uint8) error {
	if len(value) > math.MaxInt32 {
		return fmt.Errorf("[]uint8 is too large to fit into Int32")
	}

	if err := writeInt32(writer, int32(len(value))); err != nil {
		return err
	}
	for _, item := range value {
		if err := FfiConverteruint8INSTANCE.write(writer, item); err != nil {
			return err
		}
	}
	return nil
}

type FfiDestroyerSequenceuint8 struct{}

func (FfiDestroyerSequenceuint8) destroy(sequence []uint8) {
	for _, value := range sequence {
		FfiDestroyeruint8{}.destroy(value)
	}
}

type FfiConverterSequencestring struct{}

var FfiConverterSequencestringINSTANCE = FfiConverterSequencestring{}

func (c FfiConverterSequencestring) lift(cRustBuf C.RustBuffer) ([]string, error) {
	return liftFromRustBuffer[[]string](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterSequencestring) read(reader io.Reader) ([]string, error) {
	length, err := readInt32(reader)
	if err != nil {
		return nil, err
	}
	if length == 0 {
		return nil, nil
	}
	result := make([]string, 0, length)
	for i := int32(0); i < length; i++ {
		_string, err := FfiConverterstringINSTANCE.read(reader)
		if err != nil {
			return nil, err
		}
		result = append(result, _string)
	}
	return result, nil
}

func (c FfiConverterSequencestring) lower(value []string) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[[]string](c, value)
	return _loweredValue
}

func (c FfiConverterSequencestring) write(writer io.Writer, value []string) error {
	if len(value) > math.MaxInt32 {
		return fmt.Errorf("[]string is too large to fit into Int32")
	}

	if err := writeInt32(writer, int32(len(value))); err != nil {
		return err
	}
	for _, item := range value {
		if err := FfiConverterstringINSTANCE.write(writer, item); err != nil {
			return err
		}
	}
	return nil
}

type FfiDestroyerSequencestring struct{}

func (FfiDestroyerSequencestring) destroy(sequence []string) {
	for _, value := range sequence {
		FfiDestroyerstring{}.destroy(value)
	}
}

type FfiConverterSequenceTypeFiatCurrency struct{}

var FfiConverterSequenceTypeFiatCurrencyINSTANCE = FfiConverterSequenceTypeFiatCurrency{}

func (c FfiConverterSequenceTypeFiatCurrency) lift(cRustBuf C.RustBuffer) ([]FiatCurrency, error) {
	return liftFromRustBuffer[[]FiatCurrency](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterSequenceTypeFiatCurrency) read(reader io.Reader) ([]FiatCurrency, error) {
	length, err := readInt32(reader)
	if err != nil {
		return nil, err
	}
	if length == 0 {
		return nil, nil
	}
	result := make([]FiatCurrency, 0, length)
	for i := int32(0); i < length; i++ {
		_fiatCurrency, err := FfiConverterTypeFiatCurrencyINSTANCE.read(reader)
		if err != nil {
			return nil, err
		}
		result = append(result, _fiatCurrency)
	}
	return result, nil
}

func (c FfiConverterSequenceTypeFiatCurrency) lower(value []FiatCurrency) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[[]FiatCurrency](c, value)
	return _loweredValue
}

func (c FfiConverterSequenceTypeFiatCurrency) write(writer io.Writer, value []FiatCurrency) error {
	if len(value) > math.MaxInt32 {
		return fmt.Errorf("[]FiatCurrency is too large to fit into Int32")
	}

	if err := writeInt32(writer, int32(len(value))); err != nil {
		return err
	}
	for _, item := range value {
		if err := FfiConverterTypeFiatCurrencyINSTANCE.write(writer, item); err != nil {
			return err
		}
	}
	return nil
}

type FfiDestroyerSequenceTypeFiatCurrency struct{}

func (FfiDestroyerSequenceTypeFiatCurrency) destroy(sequence []FiatCurrency) {
	for _, value := range sequence {
		FfiDestroyerTypeFiatCurrency{}.destroy(value)
	}
}

type FfiConverterSequenceTypeLocaleOverrides struct{}

var FfiConverterSequenceTypeLocaleOverridesINSTANCE = FfiConverterSequenceTypeLocaleOverrides{}

func (c FfiConverterSequenceTypeLocaleOverrides) lift(cRustBuf C.RustBuffer) ([]LocaleOverrides, error) {
	return liftFromRustBuffer[[]LocaleOverrides](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterSequenceTypeLocaleOverrides) read(reader io.Reader) ([]LocaleOverrides, error) {
	length, err := readInt32(reader)
	if err != nil {
		return nil, err
	}
	if length == 0 {
		return nil, nil
	}
	result := make([]LocaleOverrides, 0, length)
	for i := int32(0); i < length; i++ {
		_localeOverrides, err := FfiConverterTypeLocaleOverridesINSTANCE.read(reader)
		if err != nil {
			return nil, err
		}
		result = append(result, _localeOverrides)
	}
	return result, nil
}

func (c FfiConverterSequenceTypeLocaleOverrides) lower(value []LocaleOverrides) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[[]LocaleOverrides](c, value)
	return _loweredValue
}

func (c FfiConverterSequenceTypeLocaleOverrides) write(writer io.Writer, value []LocaleOverrides) error {
	if len(value) > math.MaxInt32 {
		return fmt.Errorf("[]LocaleOverrides is too large to fit into Int32")
	}

	if err := writeInt32(writer, int32(len(value))); err != nil {
		return err
	}
	for _, item := range value {
		if err := FfiConverterTypeLocaleOverridesINSTANCE.write(writer, item); err != nil {
			return err
		}
	}
	return nil
}

type FfiDestroyerSequenceTypeLocaleOverrides struct{}

func (FfiDestroyerSequenceTypeLocaleOverrides) destroy(sequence []LocaleOverrides) {
	for _, value := range sequence {
		FfiDestroyerTypeLocaleOverrides{}.destroy(value)
	}
}

type FfiConverterSequenceTypeLocalizedName struct{}

var FfiConverterSequenceTypeLocalizedNameINSTANCE = FfiConverterSequenceTypeLocalizedName{}

func (c FfiConverterSequenceTypeLocalizedName) lift(cRustBuf C.RustBuffer) ([]LocalizedName, error) {
	return liftFromRustBuffer[[]LocalizedName](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterSequenceTypeLocalizedName) read(reader io.Reader) ([]LocalizedName, error) {
	length, err := readInt32(reader)
	if err != nil {
		return nil, err
	}
	if length == 0 {
		return nil, nil
	}
	result := make([]LocalizedName, 0, length)
	for i := int32(0); i < length; i++ {
		_localizedName, err := FfiConverterTypeLocalizedNameINSTANCE.read(reader)
		if err != nil {
			return nil, err
		}
		result = append(result, _localizedName)
	}
	return result, nil
}

func (c FfiConverterSequenceTypeLocalizedName) lower(value []LocalizedName) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[[]LocalizedName](c, value)
	return _loweredValue
}

func (c FfiConverterSequenceTypeLocalizedName) write(writer io.Writer, value []LocalizedName) error {
	if len(value) > math.MaxInt32 {
		return fmt.Errorf("[]LocalizedName is too large to fit into Int32")
	}

	if err := writeInt32(writer, int32(len(value))); err != nil {
		return err
	}
	for _, item := range value {
		if err := FfiConverterTypeLocalizedNameINSTANCE.write(writer, item); err != nil {
			return err
		}
	}
	return nil
}

type FfiDestroyerSequenceTypeLocalizedName struct{}

func (FfiDestroyerSequenceTypeLocalizedName) destroy(sequence []LocalizedName) {
	for _, value := range sequence {
		FfiDestroyerTypeLocalizedName{}.destroy(value)
	}
}

type FfiConverterSequenceTypeLspInformation struct{}

var FfiConverterSequenceTypeLspInformationINSTANCE = FfiConverterSequenceTypeLspInformation{}

func (c FfiConverterSequenceTypeLspInformation) lift(cRustBuf C.RustBuffer) ([]LspInformation, error) {
	return liftFromRustBuffer[[]LspInformation](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterSequenceTypeLspInformation) read(reader io.Reader) ([]LspInformation, error) {
	length, err := readInt32(reader)
	if err != nil {
		return nil, err
	}
	if length == 0 {
		return nil, nil
	}
	result := make([]LspInformation, 0, length)
	for i := int32(0); i < length; i++ {
		_lspInformation, err := FfiConverterTypeLspInformationINSTANCE.read(reader)
		if err != nil {
			return nil, err
		}
		result = append(result, _lspInformation)
	}
	return result, nil
}

func (c FfiConverterSequenceTypeLspInformation) lower(value []LspInformation) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[[]LspInformation](c, value)
	return _loweredValue
}

func (c FfiConverterSequenceTypeLspInformation) write(writer io.Writer, value []LspInformation) error {
	if len(value) > math.MaxInt32 {
		return fmt.Errorf("[]LspInformation is too large to fit into Int32")
	}

	if err := writeInt32(writer, int32(len(value))); err != nil {
		return err
	}
	for _, item := range value {
		if err := FfiConverterTypeLspInformationINSTANCE.write(writer, item); err != nil {
			return err
		}
	}
	return nil
}

type FfiDestroyerSequenceTypeLspInformation struct{}

func (FfiDestroyerSequenceTypeLspInformation) destroy(sequence []LspInformation) {
	for _, value := range sequence {
		FfiDestroyerTypeLspInformation{}.destroy(value)
	}
}

type FfiConverterSequenceTypeOpeningFeeParams struct{}

var FfiConverterSequenceTypeOpeningFeeParamsINSTANCE = FfiConverterSequenceTypeOpeningFeeParams{}

func (c FfiConverterSequenceTypeOpeningFeeParams) lift(cRustBuf C.RustBuffer) ([]OpeningFeeParams, error) {
	return liftFromRustBuffer[[]OpeningFeeParams](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterSequenceTypeOpeningFeeParams) read(reader io.Reader) ([]OpeningFeeParams, error) {
	length, err := readInt32(reader)
	if err != nil {
		return nil, err
	}
	if length == 0 {
		return nil, nil
	}
	result := make([]OpeningFeeParams, 0, length)
	for i := int32(0); i < length; i++ {
		_openingFeeParams, err := FfiConverterTypeOpeningFeeParamsINSTANCE.read(reader)
		if err != nil {
			return nil, err
		}
		result = append(result, _openingFeeParams)
	}
	return result, nil
}

func (c FfiConverterSequenceTypeOpeningFeeParams) lower(value []OpeningFeeParams) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[[]OpeningFeeParams](c, value)
	return _loweredValue
}

func (c FfiConverterSequenceTypeOpeningFeeParams) write(writer io.Writer, value []OpeningFeeParams) error {
	if len(value) > math.MaxInt32 {
		return fmt.Errorf("[]OpeningFeeParams is too large to fit into Int32")
	}

	if err := writeInt32(writer, int32(len(value))); err != nil {
		return err
	}
	for _, item := range value {
		if err := FfiConverterTypeOpeningFeeParamsINSTANCE.write(writer, item); err != nil {
			return err
		}
	}
	return nil
}

type FfiDestroyerSequenceTypeOpeningFeeParams struct{}

func (FfiDestroyerSequenceTypeOpeningFeeParams) destroy(sequence []OpeningFeeParams) {
	for _, value := range sequence {
		FfiDestroyerTypeOpeningFeeParams{}.destroy(value)
	}
}

type FfiConverterSequenceTypePayment struct{}

var FfiConverterSequenceTypePaymentINSTANCE = FfiConverterSequenceTypePayment{}

func (c FfiConverterSequenceTypePayment) lift(cRustBuf C.RustBuffer) ([]Payment, error) {
	return liftFromRustBuffer[[]Payment](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterSequenceTypePayment) read(reader io.Reader) ([]Payment, error) {
	length, err := readInt32(reader)
	if err != nil {
		return nil, err
	}
	if length == 0 {
		return nil, nil
	}
	result := make([]Payment, 0, length)
	for i := int32(0); i < length; i++ {
		_payment, err := FfiConverterTypePaymentINSTANCE.read(reader)
		if err != nil {
			return nil, err
		}
		result = append(result, _payment)
	}
	return result, nil
}

func (c FfiConverterSequenceTypePayment) lower(value []Payment) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[[]Payment](c, value)
	return _loweredValue
}

func (c FfiConverterSequenceTypePayment) write(writer io.Writer, value []Payment) error {
	if len(value) > math.MaxInt32 {
		return fmt.Errorf("[]Payment is too large to fit into Int32")
	}

	if err := writeInt32(writer, int32(len(value))); err != nil {
		return err
	}
	for _, item := range value {
		if err := FfiConverterTypePaymentINSTANCE.write(writer, item); err != nil {
			return err
		}
	}
	return nil
}

type FfiDestroyerSequenceTypePayment struct{}

func (FfiDestroyerSequenceTypePayment) destroy(sequence []Payment) {
	for _, value := range sequence {
		FfiDestroyerTypePayment{}.destroy(value)
	}
}

type FfiConverterSequenceTypeRate struct{}

var FfiConverterSequenceTypeRateINSTANCE = FfiConverterSequenceTypeRate{}

func (c FfiConverterSequenceTypeRate) lift(cRustBuf C.RustBuffer) ([]Rate, error) {
	return liftFromRustBuffer[[]Rate](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterSequenceTypeRate) read(reader io.Reader) ([]Rate, error) {
	length, err := readInt32(reader)
	if err != nil {
		return nil, err
	}
	if length == 0 {
		return nil, nil
	}
	result := make([]Rate, 0, length)
	for i := int32(0); i < length; i++ {
		_rate, err := FfiConverterTypeRateINSTANCE.read(reader)
		if err != nil {
			return nil, err
		}
		result = append(result, _rate)
	}
	return result, nil
}

func (c FfiConverterSequenceTypeRate) lower(value []Rate) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[[]Rate](c, value)
	return _loweredValue
}

func (c FfiConverterSequenceTypeRate) write(writer io.Writer, value []Rate) error {
	if len(value) > math.MaxInt32 {
		return fmt.Errorf("[]Rate is too large to fit into Int32")
	}

	if err := writeInt32(writer, int32(len(value))); err != nil {
		return err
	}
	for _, item := range value {
		if err := FfiConverterTypeRateINSTANCE.write(writer, item); err != nil {
			return err
		}
	}
	return nil
}

type FfiDestroyerSequenceTypeRate struct{}

func (FfiDestroyerSequenceTypeRate) destroy(sequence []Rate) {
	for _, value := range sequence {
		FfiDestroyerTypeRate{}.destroy(value)
	}
}

type FfiConverterSequenceTypeReverseSwapInfo struct{}

var FfiConverterSequenceTypeReverseSwapInfoINSTANCE = FfiConverterSequenceTypeReverseSwapInfo{}

func (c FfiConverterSequenceTypeReverseSwapInfo) lift(cRustBuf C.RustBuffer) ([]ReverseSwapInfo, error) {
	return liftFromRustBuffer[[]ReverseSwapInfo](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterSequenceTypeReverseSwapInfo) read(reader io.Reader) ([]ReverseSwapInfo, error) {
	length, err := readInt32(reader)
	if err != nil {
		return nil, err
	}
	if length == 0 {
		return nil, nil
	}
	result := make([]ReverseSwapInfo, 0, length)
	for i := int32(0); i < length; i++ {
		_reverseSwapInfo, err := FfiConverterTypeReverseSwapInfoINSTANCE.read(reader)
		if err != nil {
			return nil, err
		}
		result = append(result, _reverseSwapInfo)
	}
	return result, nil
}

func (c FfiConverterSequenceTypeReverseSwapInfo) lower(value []ReverseSwapInfo) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[[]ReverseSwapInfo](c, value)
	return _loweredValue
}

func (c FfiConverterSequenceTypeReverseSwapInfo) write(writer io.Writer, value []ReverseSwapInfo) error {
	if len(value) > math.MaxInt32 {
		return fmt.Errorf("[]ReverseSwapInfo is too large to fit into Int32")
	}

	if err := writeInt32(writer, int32(len(value))); err != nil {
		return err
	}
	for _, item := range value {
		if err := FfiConverterTypeReverseSwapInfoINSTANCE.write(writer, item); err != nil {
			return err
		}
	}
	return nil
}

type FfiDestroyerSequenceTypeReverseSwapInfo struct{}

func (FfiDestroyerSequenceTypeReverseSwapInfo) destroy(sequence []ReverseSwapInfo) {
	for _, value := range sequence {
		FfiDestroyerTypeReverseSwapInfo{}.destroy(value)
	}
}

type FfiConverterSequenceTypeRouteHint struct{}

var FfiConverterSequenceTypeRouteHintINSTANCE = FfiConverterSequenceTypeRouteHint{}

func (c FfiConverterSequenceTypeRouteHint) lift(cRustBuf C.RustBuffer) ([]RouteHint, error) {
	return liftFromRustBuffer[[]RouteHint](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterSequenceTypeRouteHint) read(reader io.Reader) ([]RouteHint, error) {
	length, err := readInt32(reader)
	if err != nil {
		return nil, err
	}
	if length == 0 {
		return nil, nil
	}
	result := make([]RouteHint, 0, length)
	for i := int32(0); i < length; i++ {
		_routeHint, err := FfiConverterTypeRouteHintINSTANCE.read(reader)
		if err != nil {
			return nil, err
		}
		result = append(result, _routeHint)
	}
	return result, nil
}

func (c FfiConverterSequenceTypeRouteHint) lower(value []RouteHint) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[[]RouteHint](c, value)
	return _loweredValue
}

func (c FfiConverterSequenceTypeRouteHint) write(writer io.Writer, value []RouteHint) error {
	if len(value) > math.MaxInt32 {
		return fmt.Errorf("[]RouteHint is too large to fit into Int32")
	}

	if err := writeInt32(writer, int32(len(value))); err != nil {
		return err
	}
	for _, item := range value {
		if err := FfiConverterTypeRouteHintINSTANCE.write(writer, item); err != nil {
			return err
		}
	}
	return nil
}

type FfiDestroyerSequenceTypeRouteHint struct{}

func (FfiDestroyerSequenceTypeRouteHint) destroy(sequence []RouteHint) {
	for _, value := range sequence {
		FfiDestroyerTypeRouteHint{}.destroy(value)
	}
}

type FfiConverterSequenceTypeRouteHintHop struct{}

var FfiConverterSequenceTypeRouteHintHopINSTANCE = FfiConverterSequenceTypeRouteHintHop{}

func (c FfiConverterSequenceTypeRouteHintHop) lift(cRustBuf C.RustBuffer) ([]RouteHintHop, error) {
	return liftFromRustBuffer[[]RouteHintHop](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterSequenceTypeRouteHintHop) read(reader io.Reader) ([]RouteHintHop, error) {
	length, err := readInt32(reader)
	if err != nil {
		return nil, err
	}
	if length == 0 {
		return nil, nil
	}
	result := make([]RouteHintHop, 0, length)
	for i := int32(0); i < length; i++ {
		_routeHintHop, err := FfiConverterTypeRouteHintHopINSTANCE.read(reader)
		if err != nil {
			return nil, err
		}
		result = append(result, _routeHintHop)
	}
	return result, nil
}

func (c FfiConverterSequenceTypeRouteHintHop) lower(value []RouteHintHop) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[[]RouteHintHop](c, value)
	return _loweredValue
}

func (c FfiConverterSequenceTypeRouteHintHop) write(writer io.Writer, value []RouteHintHop) error {
	if len(value) > math.MaxInt32 {
		return fmt.Errorf("[]RouteHintHop is too large to fit into Int32")
	}

	if err := writeInt32(writer, int32(len(value))); err != nil {
		return err
	}
	for _, item := range value {
		if err := FfiConverterTypeRouteHintHopINSTANCE.write(writer, item); err != nil {
			return err
		}
	}
	return nil
}

type FfiDestroyerSequenceTypeRouteHintHop struct{}

func (FfiDestroyerSequenceTypeRouteHintHop) destroy(sequence []RouteHintHop) {
	for _, value := range sequence {
		FfiDestroyerTypeRouteHintHop{}.destroy(value)
	}
}

type FfiConverterSequenceTypeSwapInfo struct{}

var FfiConverterSequenceTypeSwapInfoINSTANCE = FfiConverterSequenceTypeSwapInfo{}

func (c FfiConverterSequenceTypeSwapInfo) lift(cRustBuf C.RustBuffer) ([]SwapInfo, error) {
	return liftFromRustBuffer[[]SwapInfo](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterSequenceTypeSwapInfo) read(reader io.Reader) ([]SwapInfo, error) {
	length, err := readInt32(reader)
	if err != nil {
		return nil, err
	}
	if length == 0 {
		return nil, nil
	}
	result := make([]SwapInfo, 0, length)
	for i := int32(0); i < length; i++ {
		_swapInfo, err := FfiConverterTypeSwapInfoINSTANCE.read(reader)
		if err != nil {
			return nil, err
		}
		result = append(result, _swapInfo)
	}
	return result, nil
}

func (c FfiConverterSequenceTypeSwapInfo) lower(value []SwapInfo) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[[]SwapInfo](c, value)
	return _loweredValue
}

func (c FfiConverterSequenceTypeSwapInfo) write(writer io.Writer, value []SwapInfo) error {
	if len(value) > math.MaxInt32 {
		return fmt.Errorf("[]SwapInfo is too large to fit into Int32")
	}

	if err := writeInt32(writer, int32(len(value))); err != nil {
		return err
	}
	for _, item := range value {
		if err := FfiConverterTypeSwapInfoINSTANCE.write(writer, item); err != nil {
			return err
		}
	}
	return nil
}

type FfiDestroyerSequenceTypeSwapInfo struct{}

func (FfiDestroyerSequenceTypeSwapInfo) destroy(sequence []SwapInfo) {
	for _, value := range sequence {
		FfiDestroyerTypeSwapInfo{}.destroy(value)
	}
}

type FfiConverterSequenceTypeUnspentTransactionOutput struct{}

var FfiConverterSequenceTypeUnspentTransactionOutputINSTANCE = FfiConverterSequenceTypeUnspentTransactionOutput{}

func (c FfiConverterSequenceTypeUnspentTransactionOutput) lift(cRustBuf C.RustBuffer) ([]UnspentTransactionOutput, error) {
	return liftFromRustBuffer[[]UnspentTransactionOutput](c, fromCRustBuffer(cRustBuf))
}

func (c FfiConverterSequenceTypeUnspentTransactionOutput) read(reader io.Reader) ([]UnspentTransactionOutput, error) {
	length, err := readInt32(reader)
	if err != nil {
		return nil, err
	}
	if length == 0 {
		return nil, nil
	}
	result := make([]UnspentTransactionOutput, 0, length)
	for i := int32(0); i < length; i++ {
		_unspentTransactionOutput, err := FfiConverterTypeUnspentTransactionOutputINSTANCE.read(reader)
		if err != nil {
			return nil, err
		}
		result = append(result, _unspentTransactionOutput)
	}
	return result, nil
}

func (c FfiConverterSequenceTypeUnspentTransactionOutput) lower(value []UnspentTransactionOutput) C.RustBuffer {
	_loweredValue, _ := lowerIntoRustBuffer[[]UnspentTransactionOutput](c, value)
	return _loweredValue
}

func (c FfiConverterSequenceTypeUnspentTransactionOutput) write(writer io.Writer, value []UnspentTransactionOutput) error {
	if len(value) > math.MaxInt32 {
		return fmt.Errorf("[]UnspentTransactionOutput is too large to fit into Int32")
	}

	if err := writeInt32(writer, int32(len(value))); err != nil {
		return err
	}
	for _, item := range value {
		if err := FfiConverterTypeUnspentTransactionOutputINSTANCE.write(writer, item); err != nil {
			return err
		}
	}
	return nil
}

type FfiDestroyerSequenceTypeUnspentTransactionOutput struct{}

func (FfiDestroyerSequenceTypeUnspentTransactionOutput) destroy(sequence []UnspentTransactionOutput) {
	for _, value := range sequence {
		FfiDestroyerTypeUnspentTransactionOutput{}.destroy(value)
	}
}

func Connect(config Config, seed []uint8, listener EventListener) (*BlockingBreezServices, error) {

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) unsafe.Pointer {
		return C.breez_sdk_d634_connect(FfiConverterTypeConfigINSTANCE.lower(config), FfiConverterSequenceuint8INSTANCE.lower(seed), FfiConverterTypeEventListenerINSTANCE.lower(listener), _uniffiStatus)
	})
	var _uniffiDefaultValue *BlockingBreezServices
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterBlockingBreezServicesINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}

func SetLogStream(logStream LogStream) error {

	_, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) bool {
		C.breez_sdk_d634_set_log_stream(FfiConverterTypeLogStreamINSTANCE.lower(logStream), _uniffiStatus)
		return false
	})
	return _uniffiErr

}

func ParseInvoice(invoice string) (LnInvoice, error) {

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_parse_invoice(FfiConverterstringINSTANCE.lower(invoice), _uniffiStatus)
	})
	var _uniffiDefaultValue LnInvoice
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterTypeLnInvoiceINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}

func ParseInput(s string) (InputType, error) {

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_parse_input(FfiConverterstringINSTANCE.lower(s), _uniffiStatus)
	})
	var _uniffiDefaultValue InputType
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterTypeInputTypeINSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}

func MnemonicToSeed(phrase string) ([]uint8, error) {

	_uniffiRV, _uniffiErr := rustCallWithError(FfiConverterTypeSdkError{}, func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_mnemonic_to_seed(FfiConverterstringINSTANCE.lower(phrase), _uniffiStatus)
	})
	var _uniffiDefaultValue []uint8
	if _uniffiErr != nil {
		return _uniffiDefaultValue, _uniffiErr
	} else {
		liftedValue, err := FfiConverterSequenceuint8INSTANCE.lift(_uniffiRV)
		if err != nil {
			return _uniffiDefaultValue, err
		}
		return liftedValue, _uniffiErr
	}

}

func DefaultConfig(envType EnvironmentType, apiKey string, nodeConfig NodeConfig) Config {

	liftedValue, _ := FfiConverterTypeConfigINSTANCE.lift(rustCall(func(_uniffiStatus *C.RustCallStatus) C.RustBuffer {
		return C.breez_sdk_d634_default_config(FfiConverterTypeEnvironmentTypeINSTANCE.lower(envType), FfiConverterstringINSTANCE.lower(apiKey), FfiConverterTypeNodeConfigINSTANCE.lower(nodeConfig), _uniffiStatus)
	}))
	return liftedValue

}
